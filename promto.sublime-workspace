{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"lv_modify",
				"LV_ModifyCol()"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#SingleInstance,force\n#NoTrayIcon\nSetWorkingDir %A_ScriptDir%  ; Ensures a consistent starting directory.\n;##################################################\n;#												  											#\n;#			PROMTO(FRONT-END)(NATIVE)			  					#\n;#												  											#\n;##################################################\n\n;##################################################\n;#												  											#\n;#				EMPRESAS						  									#	\n;#												  											#\n;##################################################\n\n/*\n	Parametros de configuracao \n*/\n\n$$ := JSON_load(A_WorkingDir \"\\settings.json\")\njsonString := JSON_to($$) \nsettings := JSON_from(jsonString) \ndb_type := settings.db_type  \ndb_location := settings.db_location \nTAB_COLOR := settings.tab_color \nTAB_TEXT_SIZE := settings.tab_text_size \nSMALL_FONT := settings.small_font \nMEDIUM_FONT := settings.medium_font \nLARGE_FONT := settings.large_font \nBUTTON_SIZE := settings.button_size \nglobal_image_path := settings.image_folder_path \nglobal_cert_path := settings.cert_folder_path\nlv_grid := settings.lv_grid\nMARIADB_PATH := settings.mariaDB_path\nHOST := settings.host\nStringReplace, global_image_path, global_image_path, /,\\, All\nStringReplace, global_cert_path, global_cert_path, /,\\, All\nif(BUTTON_SIZE = \"small\")\n	button_h := 15\nGLOBAL_COLOR := settings.global_color\nBANNER_COLOR := settings.banner_color\nTextOptions := \"x0p y10 s\" settings.banner_text_size \" Center c\" settings.banner_text_color \" r4 Bold\"\nFont := settings.font\n\n/*\n	Iniciando GDI\n*/\nIf !pToken := Gdip_Startup()\n{\n  MsgBox, 48, gdiplus error!, Gdiplus failed to start. Please ensure you have gdiplus on your system\n  ExitApp\n}\n\n/*\n	Conectando no banco\n*/\n\ndb := new PromtoSQL(\n	(JOIN \n		db_type,\n		db_location\n	))\nsearch := new PromtoSearch()\nGLOBAL_TVSTRING := \"\"\nETF_TVSTRING := \"\"\nS_ETF_hashmask := {}\nhashmask:={},field:=[\"Aba\", \"Familia\", \"Subfamilia\", \"Modelo\"]\n_reload_gettable := True\n\nE:\n/*\n	Gui init\n*/\nGui, initialize:New\nGui, Font, s%SMALL_FONT%, %FONT%\nGui, Color, %GLOBAL_COLOR%\nGui, Add, Picture, x30 ym, img\\promtologo.png\n\n/*\n	Nome do usuario\n*/\nGui, Add, Groupbox, xp-20 y+10 w300 h110, Usuario\nGui, Add, Text, xp+5 yp+15, Nome:\nGui, Add, Edit, w280 vuser_name, \nGui, Add, Text, , Senha:\nGui, Add, Edit, w280 vuser_password password,\n;Gui, Add, Button, w150 h20 y+10 gmanager_users, Gerenciar usuarios\n\n/*\n	Localizacao\n*/\nGui, Add, Groupbox, xm y+10 w300 h80 , Localizacao DB\nGui, Add, Edit, xp+25 yp+25 w250 vdb_location_to_save , %db_location%\n\n/*\n	Opcoes\n*/\nGui, Add, Groupbox, xm y+25 w300 h60, Opcoes\nGui, Add, Button, xp+45 yp+20 w100 h30 gloading_main vloading_main Default, Iniciar\nGui, Add, Button, x+5 w100 h30 gedit_config_file vedit_config_file, Editar Configuracao\nGui, Show,,	Inicializacao \nReturn\n\n	edit_config_file:\n	Return\n\n	loading_main:\n	Gui, Submit, Nohide\n	;if(!db.Usuario.log_in_user(user_name, user_password))\n		;return \n	USER_NAME := user_name\n	Gui, initialize:default\n	GuiControl, Disable, loading_main,\n	GuiControl, Disable, edit_config_file\n	Gui, Add, Text, xm y+10, Carregando...\n	Gui, Add, Progress, xm y+5 vprogress  -Smooth 0x8 w300 h18\n	Gui, Show, AutoSize, Carregando...\n	undetermine_progress_window := \"initialize\"\n  SetTimer, undetermine_progress_action, 45\n  load_ETF(db)\n  Gui, initialize:destroy\n  Gosub, M\n	Return \n\n		undetermine_progress_action:\n		Gui, %undetermine_progress_window%:default\n		GuiControl,, progress, 1\n		Return\n\nmanager_users:\nmanager_users_view()\nreturn\n\nM:\nGui, M:New\nGui, Font, s%SMALL_FONT%, %FONT%\nGui, Color, %GLOBAL_COLOR%\nGui, Add, Picture, xm ym,img\\promtologo.png\nGui, Add, Groupbox, xp-5 y+10 w290 h450, Empresas/Tipos/Familias\nGui, Add, TreeView, xp+5 yp+15 w280 h430 vmain_tv gmain_tv\nload_main_tv()\nGui, Add, Groupbox, xm y+10 w230 h60, Opcoes\nGui, Add, Button, xp+25 yp+15 w100 h30 ginsert_empresa, Criar Empresa \nGui, Add, Button, x+5 w40 h30 hwndhBtn grecarregar_main_tv\nILButton(hBtn, \"promtoshell.dll:\" 5, 32, 32, 0)\nGui, Add, Groupbox, xm+300 ym w220 h290, Modelos \nGui, Add, Listview, xp+5 yp+15 w200 h270 section  vMODlv gMODlv altsubmit %lv_grid%, Modelo|Mascara\nGui, Add, Groupbox, xm+300 y+10 w220 h60, Numero de items:\nGui, Font, s15\nGui, Add,	Text, xp+75 yp+15 w100 vnumberofitems cblue,\nGui, Font, s8\nGui, Add, Groupbox, xm+300 y+20 w220 h300, Opcoes \nGui, Add, Button, hwndhMod xp+5 yp+15 w100 h30 gMAM, Modelos\nglabels := [\"MAB\", \"MAC\", \"ordemprefix\", \"MAOC\", \"MAODC\", \"MAODR\", \"MAODI\"]\nfor,each,value in [\"Bloqueados\", \"Campos\", \"Ordem Prefixo\", \"Ordem Codigo\", \"Ordem Desc Completa\", \"Ordem Desc Resumida\", \"Ordem Desc Ingles\"]{\n	glabel := glabels[A_Index]\n	Gui, Add, Button, wp hp g%glabel%,% \"&\" value\n}\nGui, Add, Button, x+5 y380 wp hp ggerarcodigos, Gerar Codigos\nglabels := [\"gerarestruturas\",\"linkarm\",\"dbex\", \"massaestrut\", \"codetable\", \"plotcode\", \"certificados\"]\nfor,each,value in [\"Gerar Estruturas\", \"Linkar\", \"Add db Externo\", \"Estrutura\", \"Lista de Codigos\", \"Imprimir\", \"Certificados\"]{\n	glabel := glabels[A_Index]\n	Gui, Add, Button, wp hp g%glabel%,% \"&\" value\n}\nGui, Add, Groupbox, x540 ym w315 h90, Status\nGui, Add, Picture, xp+5 yp+15 vstatus_picture, % \"img\\gray_glossy_ball.png\"\nGui, Add, Text, x+5 w220 h60 vstatus_info,\nGui, Add, Button, x540 y+15 w80 h20 gchange_status , Alterar status\nGui, Add, Picture, xp y+15 w268 h156 vptcode gfotoindividual, % \"img\\promtologo.png\"\nGui, Add, Listview, x+5 yp w540 h300 vall_mod_lv gall_mod_lv altsubmit %lv_grid%,\n_loading := 1\nGui, Add, Groupbox, x540 y+20 w815 h60, Certificacao:\nGui, Font, cgreen s20\nGui, Add, Text, xp+5 yp+15 w400 h30 vcert_status, \nGui, Font, cblack s8\nGui, Add, Groupbox, x540 y+20 w815 h150, Ultimas atualizacoes:\nGui, Font, cgreen\nGui, Add, Text, xp+5 yp+15 w365 h80 vmod_info,\nGui, Font, cblue \nGui, Add, Text, x+2 w300 h80 vmsg_info,\nGui, Font, cblack\nGui, Add, Groupbox, x860 ym w150 h90, Totallight\nGui, Add, Picture,  xp+5 yp+15 vconsistency_picture_tot, % \"img\\gray_glossy_ball.png\"\nGui, Add, Button,   x865 y+15 w80 h20 gverify_tot, Verificar\nGui, Add, Groupbox, x1020 ym w150 h90, Maccomevap\nGui, Add, Picture, xp+5 yp+15 vconsistency_picture_mac, % \"img\\gray_glossy_ball.png\"\nGui, Add, Button, x1025 y+15 w80 h20 gverify_mac, Verificar\nMenu, update_menu,   Add, Atualizar, make_update\nMenu, backup_menu,   Add, Fazer Back up, make_back_up\nMenu, users_menu,    Add, Usuarios, manager_users\nMenu, list_menu,     Add, Listas, list_options\nMenu, xml_menu,      Add, XML, xml\nMenu, json_menu,     Add, JSON, json\nMenu, imagem_menu,   Add, Redimensionar, resize_image_folder \nMenu, feed_menu,   	 Add, feed, visualize_feed \nMenu, backup_menu,   Add, Carregar Back up, load_back_up\nMenu, main_menu_bar, Add, &Atualizar, :update_menu\nMenu, main_menu_bar, Add, &Back up, :backup_menu\nMenu, main_menu_bar, Add, &Usuarios, :users_menu\nMenu, main_menu_bar, Add, &XML, :xml_menu\nMenu, main_menu_bar, Add, &JSON , :json_menu\nMenu, main_menu_bar, Add, &Imagem, :imagem_menu\nMenu, main_menu_bar, Add, &Feed, :feed_menu \nMenu, main_menu_bar, Color, White\nGui, Menu, main_menu_bar\nGui, Show,, %FamiliaName%\nGui, Listview, MODlv\nLV_ModifyCol(2,300) \nLV_Modify(2, \"+Select\")\n_loading := 0\nreturn	\n\nvisualize_feed:\nfeed := new GenerateJSONFeed() \nfeed.generate_feed()\nreturn \n\ncertificados:\ncert_view(\"\", \"M\")\nreturn\n\nresize_image_folder:\nresize_image_folder_view()\nreturn\n\nall_mod_lv:\nif A_GuiEvent = I\n{\n	if(ErrorLevel = \"\")\n		return\n	Gui, Submit, Nohide\n	info := get_item_info(\"M\", \"MODlv\") \n	selected_mod := GetSelectedRow(\"M\", \"all_mod_lv\")\n	if(selected_mod[1] = \"\" || selected_mod[1] = \"Codigos\")\n		return \n	image_path := db.Imagem.get_image_full_path(selected_mod[1])\n	if(image_path != \"\"){\n		change_ptcode := 1\n		Guicontrol,, ptcode, % image_path \n	}else{\n		change_ptcode := 1\n		Guicontrol,, ptcode, % \"img\\sem_foto.jpg\"\n	}	\n}\nreturn\n\n\n\nverify_tot:\ninfo := get_item_info(\"M\", \"MODlv\")\ntot_connection := get_connection(\"TOTALLIGHT\")\nbase_value := get_data_base_value(\"TOTALLIGHT\")\nif(base_value = \"\")\n	return\ncode_table :=\n(JOIN\n	info.empresa[2]\n	info.tipo[2] \n	info.familia[2] \n	info.subfamilia[2] \n	info.modelo[2] \"Codigo\"\n)\ncurrent_code_list := db.load_table_in_array(code_table)\nmissing_codes := DBEC.codes(info, tot_connection, base_value, current_code_list) \nif(missing_codes.maxindex() > 0){\n  DBEC.change_code_status(0, \"consistency_picture_tot\")\n}else{\n	DBEC.change_code_status(1, \"consistency_picture_tot\")\n}\nreturn \n\nverify_mac:\ninfo := get_item_info(\"M\", \"MODlv\")\nmac_connection := get_connection(\"MACCOMEVAP\")\nbase_value := get_data_base_value(\"MACCOMEVAP\")\nif(base_value = \"\")\n	return\ncode_table :=\n(JOIN\n	info.empresa[2]\n	info.tipo[2] \n	info.familia[2] \n	info.subfamilia[2] \n	info.modelo[2] \"Codigo\"\n)\ncurrent_code_list := db.load_table_in_array(code_table)\nmissing_codes := DBEC.codes(info, mac_connection, base_value, current_code_list) \nif(missing_codes.maxindex() > 0){\n  DBEC.change_code_status(0, \"consistency_picture_mac\")\n}else{\n	DBEC.change_code_status(1, \"consistency_picture_mac\")\n}\nreturn\n\nMGuiClose:\nExitApp\nreturn\n\nlist_options:\nlist_options_view()\nreturn\n\nxml:\ngenerate_xml_view()\nreturn\n\njson:\njson := new PromtoJSON()\njson.get_companies()\nreturn  \n\nHTML:\ngenerate_html_view()\nreturn\n\ninsert_empresa:\ninserir_ETF_view(\"M\", \"main_tv\", \"\", \"Empresas\")\nreturn\n\nrecarregar_main_tv:\nGui, M:default\nGui, Treeview, main_tv\nTV_Delete() \nETF_TVSTRING := \"\"\nload_ETF(db)\nload_main_tv()\nreturn\n\nchange_status:\ninfo := get_item_info(\"M\", \"MODlv\")\nchange_status_view(info)\nreturn\n\nMGuiContextMenu:\nif A_GuiControl = main_tv\n{\n	/*\n		verifica em que nivel a selecao esta\n		caso esteja no nivel tres somente\n		a opcao de remover aparecera, a menos que a familia \n		selecionada tenha uma subfamilia.\n	*/\n	tv_level_menu := get_tv_level(\"M\", \"main_tv\") \n	Menu, main_tv_menu, Add, Adicionar, adicionar_item\n	Menu, main_tv_menu, Add, Remover, remover_item	\n	Menu, remover_menu, Add, Remover, remover_item\n	/* \n		Pega a tabela onde serao inseridos \n		os valores\n	*/\n	current_selected_name := get_item_from_tv(A_EventInfo)\n	current_id := A_EventInfo\n	/*\n		Caso a selecao esteja no nivel de insercao \n		de tipos\n	*/\n\n	if(tv_level_menu = 1){\n		current_columns := \"Abas\"\n		info := get_item_info(\"M\", \"MODlv\")\n		tabela1 := info.empresa[1] \n		Menu, main_tv_menu, Show, x%A_GuiX% y%A_GuiY%\n	}\n\n	/*\n		Caso a insercao esteja no nivel \n		de familias\n	*/\n\n	if(tv_level_menu = 2){\n		current_columns := \"Familias\"\n		info := get_item_info(\"M\", \"MODlv\")\n		tabela1 := info.empresa[2] info.tipo[1]\n		Menu, main_tv_menu, Show, x%A_GuiX% y%A_GuiY%\n	}\n\n	if(tv_level_menu = 3){\n		current_columns := \"Subfamilias\"\n	}\n\n	/*\n		Caso esteja no nivel das familias e a familia nao tenha subfamilia nao existe opcao de incluir\n	*/\n	if(tv_level_menu = 3){\n		info := get_item_info(\"M\", \"MODlv\")\n		tabela1 := info.empresa[2] info.tipo[2] info.familia[1]\n		if(db.have_subfamilia(tabela1)){\n			Menu, main_tv_menu, Show, x%A_GuiX% y%A_GuiY%		\n		}else{\n			Menu, remover_menu, Show, x%A_GuiX% y%A_GuiY%\n		}	\n	}\n	\n	if(tv_level_menu = 4){\n		info := get_item_info(\"M\", \"MODlv\")\n		tabela1 := info.empresa[2] info.tipo[2] info.familia[1] info.subfamilia[1]\n		Menu, remover_menu, Show, x%A_GuiX% y%A_GuiY%\n	}\n}\nreturn\n\n	adicionar_item:\n	inserir_ETF_view(\"M\", \"main_tv\", current_id, current_columns)\n	return \n\n	remover_item:\n	Gui, M:default\n	Gui, Treeview, main_tv\n	selected_name := get_item_from_tv(current_id)\n	MsgBox, 4,,Deseja apagar o item %selected_name% e todos os seus subitems? \n	IfMsgBox No\n	{\n		return\n	}\n	delete_confirmation_view(selected_name)\n	return\n\n	main_tv:\n  /*\n  	funcao que busca o nivel \n  	que a selecao esta\n  */\n  tv_level := get_tv_level(\"M\", \"main_tv\")\n\n  /*\n   Limpa todas as informacoes deixadas pela ultima selecao\n  */\n  clear_main_info()\n\n  if(tv_level = 3 || tv_level = 4){\n  	/*\n  		Se estiver no nivel das \n  		familias ira buscar a tabela de modelos\n  		e carrega-la na listview ao lado. \n  	*/\n  		\n  	/*\n  		Verifica se o nivel atual tem um subnivel\n  		se tiver retorna sem carregar tabela de modelo\n  	*/\n  	if(tv_level = 3){\n  		info := get_item_info(\"M\", \"MODlv\")\n  		tabela1 := info.empresa[2] info.tipo[2] info.familia[1]\n			if(db.have_subfamilia(tabela1)){\n				;load_logo_in_main()\n				return\n			}else{\n				/*\n  			Pega a tabela de modelos\n  			*/	 \n  			info := get_item_info(\"M\", \"MODlv\")\n				model_table := db.get_reference(\"Modelo\", info.empresa[2] info.tipo[2] info.familia[1])\n			}\n  	}\n  	\n  	if(tv_level = 4){\n  		info := get_item_info(\"M\", \"MODlv\")\n			model_table := db.get_reference(\"Modelo\", info.empresa[2] info.tipo[2] info.familia[2] info.subfamilia[1])\n  	}\n		/*\n			Metodo que carrega a lista de modelos\n			em determinada listview\n		*/\n		;db.Modelo.check_data_consistency(model_table, info) ;verifica se todos os elementos na lista tem as tabela necessarias.\n		db.load_lv(\"M\", \"MODlv\", model_table)\n		LV_ModifyCol(1)\n		;load_logo_in_main()	\n  }else{\n  	/*\n  		Funcao que substui a imagem que foi gerada\n  		no load_image... pelo logo do programa\n  	*/\n  	;load_logo_in_main()\n  }\n	return \n\n	fotoindividual:\n	foto_individual_view()\n	;Gui,submit,nohide\n	;massainsertphoto(codtable) \n	return \n\n	combocodes:\n	Gui,submit,nohide\n	StringReplace,combocodes,combocodes,% \">>\",|, All\n	StringSplit,combocodes,combocodes,|\n	result := db.query(\"SELECT tabela2 FROM reltable WHERE tipo='image' AND tabela1='\" combocodes1 \"'\")\n	comboimagepath := \"\"\n	if(result[\"tabela2\"] != \"\"){\n		db.loadimage(\"\",\"\",result[\"tabela2\"])\n		comboimagepath := \"image.png\"\n	}else{\n		comboimagepath := \"noimage.png\"\n	}\n	result.close()\n	;showimageandcode(comboimagepath, 10, 10, EmpresaMascara AbaMascara FamiliaMascara,ModeloMascara, combocodes1 \"`n\" combocodes2 ,20)\n	;Guicontrol,, ptcode, simpleplot.png\n	return  \n\n	plotcode:\n	info := get_item_info(\"M\", \"MODlv\")\n	Print.product_list(info)\n\n	/*\n	Gui,escolha_plotcode:New\n	Gui,font,s%SMALL_FONT%,%FONT% \n	Gui,add,button,w100 gplotar_esse_item,Imprimir item marcado\n	Gui,add,button,x+5 w100 gplotar_todos_os_items,Imprimir todos os items \n	Gui,add,button,xm y+5 w100 gplotar_todos_os_items_em_lista,Imprimir lista com todos os items \n	Gui,Show,,Imprimir Escolha\n	*/\n	return \n\n	plotar_todos_os_items_em_lista:\n	items_to_plot := getvaluesLV(\"M\",\"MODlv\")\n	plot_pt_code_list()\n	return\n\n\n	plotar_todos_os_items:\n	items_to_plot := getvaluesLV(\"M\",\"MODlv\")\n	progress(items_to_plot.maxindex())\n	FileRemoveDir, % A_WorkingDir \"\\temp\\\" FamiliaName\n	FileCreateDir, %  A_WorkingDir \"\\temp\\\" FamiliaName\n	FileDelete,% A_WorkingDir \"\\temp\\\" FamiliaName \"\\semprefixo.csv\"  \n	_prefixos_em_falta := False\n	for,each,item in items_to_plot{\n		prefixpt2:=\"\"\n		result:=db.query(\"SELECT tabela2 FROM reltable WHERE tipo='image' AND tabela1='\" EmpresaMascara AbaMascara FamiliaMascara items_to_plot[A_Index,2] items_to_plot[A_Index,1] \"'\") \n		db.loadimage(\"\",\"\",result[\"tabela2\"])\n		result.close()\n		for,each,value in list:=db.getvalues(\"Campos\",EmpresaMascara AbaMascara FamiliaMascara items_to_plot[A_Index,2] \"prefixo\"){\n			prefixpt2.=list[A_Index,1]	\n		}\n		if(prefixpt2 = \"\"){\n			_prefixos_em_falta := True\n			FileAppend, % EmpresaMascara AbaMascara FamiliaMascara items_to_plot[A_Index,2] \"`n\", % A_WorkingDir \"\\temp\\\" FamiliaName \"\\semprefixo.csv\"\n			continue\n		}\n		plotptcode(EmpresaMascara AbaMascara FamiliaMascara,prefixpt2,items_to_plot[A_Index,2],,900,6000)\n		updateprogress(\"Imprimindo : \" prefixpt2 modelpt,1)\n	}\n	if(_prefixos_em_falta = True)\n		MsgBox,16,,\"Alguns items nao foram gerados pois o prefixo do codigo ainda nao tinha sido definido !\"\n	Else\n		MsgBox,64,,\"Todos os items foram gerados e estao na pasta \\temp\\ !\"\n	gui,progress:destroy\n	return\n\n	plotar_esse_item:\n	selecteditem:=GetSelected(\"M\", \"MODlv\")\n	currentvalue:=GetSelectedRow(\"M\", \"MODlv\")\n	selectmodel:=selecteditem\n	result:=db.query(\"SELECT Mascara FROM \" . modtable . \" WHERE Modelos='\" . selecteditem . \"'\")\n	ModeloMascara:=result[\"Mascara\"]\n	prefixpt2:=\"\"\n	for,each,value in list := db.getvalues(\"Campos\",EmpresaMascara AbaMascara FamiliaMascara ModeloMascara \"prefixo\"){\n		prefixpt2 .= list[A_Index,1]	\n	} \n	StringReplace,prefixpt2,prefixpt2,% currentvalue[2],,All\n	_showcode:=1\n	MsgBox, % \"currentvalue: \" currentvalue[2] \"  modelpt: \" modelpt \n	plotptcode(EmpresaMascara AbaMascara FamiliaMascara,prefixpt2,currentvalue[2],1,900,6000)\n	return \n\n;MGuiSize:\n;GuiSize:\n;	UpdateScrollBars(A_Gui, A_GuiWidth, A_GuiHeight)\n;return\n\n	codetable:\n	info := get_item_info(\"M\", \"MODlv\")\n	lista_de_codigos(info)\n	return  \n\n	massaestrut:\n	estruturas_view()\n	return\n\n		exportarparaarquivo:\n		checkeditems := GetCheckedRows2(\"massaestrut\",\"estrutlv\")\n		filedelete, dadosestrutura.csv\n		MsgBox, % checkeditems[\"code\"].maxindex()\n		FileAppend,% \"G1_COD;G1_COMP;G1_QUANT;G1_INI;G1_FIM;G1_FIXVAR;G1_REVFIM;G1_NIV;G1_NIVINV`n\", dadosestrutura.csv\n		already_in_structure := \"\"\n		number_of_parents := 0\n		for,each,value in checkeditems[\"code\"]{\n			loadestruturatofile(checkeditems[\"code\",A_Index] \">>\" checkeditems[\"desc\",A_Index])\n		}\n		run,dadosestrutura.csv\n		Gui,progress:destroy\n		MsgBox, % \"As estruturas foram exportadas\"\n		return \n\n		\n\n		exportarparadb:\n		checkeditems:=GetCheckedRows2(\"massaestrut\",\"estrutlv\")\n		rs:=sigaconnection.OpenRecordSet(\"SELECT TOP 1 G1_COD,G1_COMP,R_E_C_N_O_ FROM SG1010 ORDER BY R_E_C_N_O_ DESC\")\n		R_E_C_N_O_TBI := rs[\"R_E_C_N_O_\"]\n		rs.close() \n		progress(checkeditems[\"code\"].maxindex())\n		prefixbloq:=\"\"\n		for,each,value in checkeditems[\"code\"]{\n			updateprogress(\"Incluindo Estruturas banco: \" checkeditems[\"code\",A_Index],1)\n			loadestruturatodb(checkeditems[\"code\",A_Index] \">>\" checkeditems[\"desc\",A_Index])\n		}\n		Gui,progress:destroy\n		MsgBox, % \"As estruturas foram exportadas\"\n		return  \n \n\n			addmassaestrut:\n			checkeditems := GetCheckedRows2(\"massaestrut\",\"estrutlv\")\n			if(!checkeditems[\"code\"].maxindex()){\n				MsgBox,64,, % \"Selecione items onde serao incluidos os codigos antes de continuar!!!\"\n				return \n			}\n			itemstoinsert:=getvaluesLV(\"addmassa\",\"lvaddmassa2\")\n			progress(checkeditems.maxindex())\n			for,each,element in checkeditems[\"code\"]{\n				element:=checkeditems[\"code\",A_Index] \">>\" checkeditems[\"desc\",A_Index]\n 				updateprogress(\"inserindo nas estruturas: \" element,1)\n				for,each,item in itemstoinsert{\n					if(element=itemstoinsert[A_Index,1]){\n						MsgBox, % \"Um item nao pode ser inserido dentro dele mesmo na estrutura!\"\n						continue \n					}\n					if(!db.exist(\"item,componente\",\"item like '\" element \"%' AND componente like '\" itemstoinsert[A_Index,1] \"%'\",\"ESTRUTURAS\"))\n						db.query(\"INSERT INTO ESTRUTURAS (item,componente,QUANTIDADE) VALUES ('\" element \"','\" itemstoinsert[A_Index,1] \"','1');\")\n					else\n						MsgBox, % \"o item \" itemstoinsert[A_Index,1] \"ja existe nas estruturas!!\"\n				} \n			}\n			Gui,progress:destroy\n			MsgBox,64,, % \"os valores foram inseridos!!!\"\n			return \n\n			removelist:\n			selecteditem:=GetSelected(\"addmassa\",\"lvaddmass2\",\"number\")\n			Gui,listview,lvaddmass2\n			LV_Delete(selecteditem)\n			return \n\n			addalista:\n			Gui,submit,nohide\n			result:=GetCheckedRows2(\"addmassa\",\"lvaddmass\")\n			gui,listview,lvaddmass2\n			for,each,value in result[\"code\"]{\n				LV_Add(\"\",result[\"code\",A_Index] \">>\" result[\"desc\",A_Index])\n			}\n			return \n\n\n			\n\n			pesquisaraddmass:\n			Gui,submit,nohide\n			search.LV.any_word_search(\"dbex\",\"lvdbex\", pesquisaraddmass)\n			return \n\n\n			remmassabutton:\n			Gui,submit,nohide 	\n			count:=0\n			for,each,value in checkedremmassa[\"code\"]{\n				count++\n				table := db.iquery(\"SELECT item,componente FROM ESTRUTURAS WHERE item LIKE '\" checkedremmassa[\"code\",A_Index] \"%' AND componente LIKE '\" remedit \"%';\")\n				if(table.Rows.Count()=0){\n					MsgBox, % \"O item a ser deletado nao existia na estrutura: \" checkedremmassa[\"code\",A_Index] \n					count -= 1\n				}\n				db.query(db.query(\"DELETE FROM ESTRUTURAS WHERE item like '\" checkedremmassa[\"code\",A_Index] \"%' AND componente like '\" remedit \"%';\"))\n			}\n\n			if(count = 0){\n				MsgBox, % \"Nenhum item foi removido\"\n			}else{\n				MsgBox,64,, % \"o item \" remedit \" foi removido de \" count \" estruturas!!!\"\n			}\n			return\n\n	ordemprefix:\n	info := get_item_info(\"M\", \"MODlv\")\n	ordem_view(\"prefixo\", info)\n	return \n\n	dbex:\n	config_db_ex_view()\n	return \n	\n\nCODlv:\nif A_GuiEvent = DoubleClick\n{\n	LV_GetText(selected,A_EventInfo)\n	tvstring := \"\"\n	loadestrutura(selected, \"\")\n	tvwindow2(args)\n}\nreturn \n\n\ntvwindow2(args){\n	Global tvstring,db,GLOBAL_COLOR\n	Static tv2,itemtext,parenttext,itemid\n	Gui,tv2:New\n	Gui,font,s%SMALL_FONT%,%FONT%\n	;Gui,tv2:+toolwindow\n	Gui,color,%GLOBAL_COLOR%\n	Gui,add,treeview,w1200 h500 vtv2,\n	Gui,add,button,x100 y+5 w100 h40 gtv2action disabled ,Remover\n	gui,show,,Estrutura \n	TvDefinition=\n	(\n		%tvstring%\n	)\n	CreateTreeView(TvDefinition)\n	return \n\n	tv2GuiContextMenu: \n	TV_GetText(itemtext,A_EventInfo)\n	itemid:=A_EventInfo\n	TV_GetText(parenttext,TV_GetParent(A_EventInfo))\n	if A_GuiControl <> tv2  ; This check is optional. It displays the menu only for clicks inside the TreeView.\n		return\n	Menu, MyMenu, Add,Add Quantidade,addquantidade\n	Menu, MyMenu, Add,Add Preco,addpreco\n	Menu, MyMenu,Show, %A_GuiX%, %A_GuiY%\n	return \n\n		addquantidade:\n		if(parenttext=\"\"){\n			MsgBox,16,, % \"Voce nao pode mudar a quantidade desse item!\"\n			return \n		}\n		addquantidade(itemtext,parenttext,itemid)\n		return \n\n\n\n		addpreco:\n		Gui,add,text,w300,Quantidade\n		Gui,add,edit,y+5 w300 r1 uppercase,\n		Gui,add,button,xm y+5 w100 gsalvarquantidade ,Salvar\n		return \n\n	tv2action:\n	button:=A_GuiControl\n	Gui,treeview,tv2\n	if(button=\"Remover\"){\n		id:=TV_GetSelection()\n		TV_GetText(item,id)\n		parentid:=TV_GetParent(id)\n		TV_GetText(element,parentid)\n		MsgBox, 4,,Deseja apagar o item %item% da estrutura %element%?\n		IfMsgBox Yes\n		{ \n			db.query(\"DELETE FROM ESTRUTURAS WHERE item like '\" element \"%' AND componente like '\" item \"%';\")\n			TV_Delete(id)\n			MsgBox,64,, % \" O valor foi deletado!!\"\n		}else{\n			return \n		}\n		\n	}\n	return \n}\n\naddquantidade(itemtext,parenttext,itemid){\n	Global db,selecteditemtoloadestrut,tvstring\n	Static valorquantidade,itemtext1,parenttext1,itemid1\n	itemid1:=itemid\n	itemtext1:=itemtext,parenttext1:=parenttext\n	Gui,addquantidade:New\n	Gui,font,s%SMALL_FONT%,%FONT%\n	Gui,color,%GLOBAL_COLOR%\n	Gui,add,text,w300,Quantidade\n	Gui,add,edit,y+5 w300 r1 vvalorquantidade uppercase,\n	Gui,add,button,xm y+5 w100 gsalvarquantidade default,Salvar\n	Gui,show,,Adicionar Quantidade\n	return \n\n		salvarquantidade:\n		Gui,submit,nohide\n		loop,parse,parenttext1,|\n		{\n			if(A_Index=1)\n				parenttext11:=A_LoopField\n		}\n		loop,parse,itemtext1,|\n		{\n			if(A_Index=1)\n				itemtext11:=A_LoopField\n		}\n		db.queryS(\"UPDATE ESTRUTURAS SET QUANTIDADE='\" valorquantidade \"' WHERE item like '\" trim(parenttext11) \"%' AND componente like '\" trim(itemtext11) \"%';\")\n		MsgBox,64,, % \" A quantidade foi atualizada!\"\n		Gui,tv2:default\n		Gui,TreeView,tv2\n		TV_Modify(itemid1,\"\",trim(itemtext11) \"|UN:\" valorquantidade)\n		tvstring:=\"\"\n		gui,addquantidade:destroy\n		return \n}\n\nloadestrutura(item,nivel,ownercode=\"\",semUN=1,quantidade=\"\"){\n	Global db,tvstring\n	if item =\n		return\n	nivel.=\"`t\"\n	table:=db.query(\"SELECT item,componente,QUANTIDADE FROM ESTRUTURAS WHERE item='\" . item . \"'\")\n	if (table[\"componente\"]=\"\"){\n		if(ownercode!=\"\"){\n		 	IfNotInString,%ownercode%,%item%\n		 	{\n		 		%ownercode%.=\"`n\" item\n		 		if(semUN=1)\n		 			tvstring.=\"`n\" . nivel . item\n		 		else \n		 			tvstring.=\"`n\" . nivel . item . \"|UN:\" quantidade\n		 	}\n		}else{\n			IfNotInString,maincodes,%item%\n		 	{\n				maincodes.=\"`n\" item\n				if(semUN=1)\n					tvstring .= \"`n\" . nivel . item\n				else \n					tvstring .= \"`n\" . nivel . item . \"|UN:\" quantidade\n		 	}\n		}\n	 }\n	while(!table.EOF){\n		tableitem:=table[\"item\"]	\n		if(ownercode!=\"\"){\n			IfNotInString,%ownercode%,%tableitem%\n			{\n				%ownercode% .= \"`n\" table[\"item\"]\n				if(semUN=1)\n					tvstring .= \"`n\" . nivel . table[\"item\"]\n				else \n				 	tvstring .= \"`n\" . nivel . table[\"item\"] . \"|UN:\" quantidade\n			}\n		}else{\n			IfNotInString,maincodes,%tableitem%\n		 	{\n				maincodes .= \"`n\" tableitem\n				if(semUN=1)\n					tvstring .= \"`n\" . nivel . table[\"item\"]\n				Else\n					tvstring .= \"`n\" . nivel . table[\"item\"] . \"|UN:1\" \n		 	}\n		}\n		StringReplace,parseditem,tableitem,>>,|,All\n		StringSplit,parseditem,parseditem,|\n		StringReplace,parseditem1,parseditem1,%A_Space%,,All\n		loadestrutura(table[\"componente\"],nivel,parseditem1,semUN,table[\"QUANTIDADE\"])\n		table.MoveNext()\n	}\n}\n\nloadestruturatofile(item){\n	Global db,already_in_structure,number_of_parents\n	if item =\n		return\n	table:=db.query(\"SELECT item,componente,QUANTIDADE FROM ESTRUTURAS WHERE item='\" item \"'\")\n	subitems:=object()\n	while(!table.EOF){\n		itemtbi:=table[\"item\"],componentetbi:=table[\"componente\"]\n		StringReplace,itemtbi,itemtbi,% \">>\",|, All\n		StringSplit,itemtbi,itemtbi,|\n		StringReplace,componentetbi,componentetbi,% \">>\",|, All\n		StringSplit,componentetbi,componentetbi,|\n		StringLeft,testprefix,componentetbi1,3\n		if(testprefix=\"mpt\")\n			StringReplace,componentetbi1,componentetbi1,MPT,MP, All    ;SUBSTITUI O MPT POR MP\n		if(testprefix=\"mod\")\n			StringReplace,componentetbi1,componentetbi1,MODT,MOD, All    ;SUBSTITUI O MODT POR MOD\n		StringLeft,testprefix,itemtbi1,3\n		if(testprefix=\"mpt\")\n			StringReplace,itemtbi1,itemtbi1,MPT,MP, All    ;SUBSTITUI O MPT POR MP\n		if(testprefix=\"mod\")\n			StringReplace,itemtbi1,itemtbi1,MODT,MOD, All    ;SUBSTITUI O MODT POR MOD\n		if(testprefix=\"TL0\"){\n			number_of_parents++\n		}\n		IfNotInString,already_in_structure,%itemtbi1%;%componentetbi1%\n		{\n			if(testprefix=\"TL0\"){\n			}\n			FileAppend,% itemtbi1 \";\" componentetbi1 \";\" table[\"QUANTIDADE\"] \";31/12/2006;31/12/2049;V;ZZZZ;01;99\" \"`n\",dadosestrutura.csv\n		}\n		already_in_structure.=itemtbi1 \";\" componentetbi1 \"`n\"\n		subitems.insert(table[\"componente\"])\n		table.MoveNext()\n	}\n	table.close()	\n	for,each,value in subitems{\n		loadestruturatofile(value)\n	}\n}\n\nloadestruturatodb(item){\n	Global db,sigaconnection,R_E_C_N_O_TBI\n	\n	if item =\n		return\n	table:=db.query(\"SELECT item,componente,QUANTIDADE FROM ESTRUTURAS WHERE item='\" item \"'\")\n	subitems:=object()\n	while(!table.EOF){\n		itemtbi:=table[\"item\"],componentetbi:=table[\"componente\"]\n		StringLeft,testprefix,componentetbi,3\n		if(testprefix=\"mpt\")\n			StringReplace,componentetbi,componentetbi,MPT,MP, All    ;SUBSTITUI O MPT POR MP\n		if(testprefix=\"mod\")\n			StringReplace,componentetbi,componentetbi,MODT,MOD, All    ;SUBSTITUI O MODT POR MOD\n		StringLeft,testprefix,itemtbi,3\n		if(testprefix=\"mpt\")\n			StringReplace,itemtbi,itemtbi,MPT,MP, All    ;SUBSTITUI O MPT POR MP\n		if(testprefix=\"mod\")\n			StringReplace,itemtbi,itemtbi,MODT,MOD, All    ;SUBSTITUI O MODT POR MOD\n		StringReplace,itemtbi,itemtbi,% \">>\",|, All\n		StringSplit,itemtbi,itemtbi,|\n		StringReplace,componentetbi,componentetbi,% \">>\",|, All\n		StringSplit,componentetbi,componentetbi,|\n		exist:=existindb(sigaconnection,\"Select G1_COD from SG1010 WHERE G1_COD LIKE '\" itemtbi1 \"%' AND G1_COMP LIKE '\" componentetbi1 \"%'\")\n		if(exist=true){ \n			sql:=\n			(JOIN\n				\"UPDATE SG1010 SET G1_COD='\" itemtbi1 \n				\"',G1_COMP='\" componentetbi1\n				\"',G1_QUANT='\" table[\"QUANTIDADE\"] \n				\"',G1_INI='20060101\" \n				\"',G1_FIM='20491231\"\n				\"',G1_FIXVAR='V\"\n				\"',G1_REVFIM='ZZZ\"\n				\"',G1_NIV='01\"   \n				\"',G1_NIVINV='99\"\n				\"',G1_FILIAL='01\" \n				\"',D_E_L_E_T_='\"\n				\"' WHERE G1_COD='\" itemtbi1 \"' AND G1_COMP='\" componentetbi1 \"'\"\n			)\n			sigaconnection.query(sql)\n		}else{\n			R_E_C_N_O_TBI++\n			sql:=\n			(JOIN\n				\"INSERT INTO SG1010 (G1_COD,G1_COMP,G1_QUANT,G1_INI,G1_FIM,G1_FIXVAR,G1_REVFIM,G1_NIV,R_E_C_N_O_,G1_FILIAL,D_E_L_E_T_,G1_NIVINV)\" \n				\" VALUES ('\" itemtbi1\n				\"','\" componentetbi1\n				\"','\" table[\"QUANTIDADE\"]\n				\"','20060101\" \n				\"','20491231\"\n				\"','V\"\n				\"','ZZZ\"\n				\"','01\"\n				\"','\" R_E_C_N_O_TBI\n				\"','01\"\n				\"','\" \n				\"','99')\"\n			)\n			sigaconnection.query(sql)\n		}\n		exist := existindb(sigaconnection,\"Select B1_COD from SB1010 WHERE B1_COD LIKE '\" itemtbi1 \"%'\")\n		if(exist=false){\n			FileAppend, % itemtbi1 \"`n\",missingitems.csv\n		}\n		exist := existindb(sigaconnection,\"Select B1_COD from SB1010 WHERE B1_COD LIKE '\" componentetbi1 \"%'\")\n		if(exist=false){\n			FileAppend, % componentetbi1 \"`n\",missingitems.csv\n		}\n		subitems.insert(table[\"componente\"])\n		table.MoveNext()\n	}\n	table.close()	\n	for,each,value in subitems{\n		loadestruturatodb(value)\n	}\n}\n\nexist_in_db(connection,sql){  ;connection fora da classe sql \n	tableexist := connection.Query(sql)\n	columnCount := tableexist.Columns.Count()\n	for each,row in tableexist.Rows{\n		Loop, % columnCount{\n			if(row[A_index]!=\"\"){\n				returnvalue:=True\n				Break\n			}else{\n				returnvalue:=False\n				Break\n			}\n		}\n	}\n	tableexist.close()\n	return returnvalue\n}\n\n\n\n\ngerarestruturas:\nif(_reload_gettable = True ){    ; Variavel utilizada para saber se a tabela de formacao de estrutura precisa ser recaregada\n		GLOBAL_TVSTRING := \"\"\n		gettable(\"empresa\",0,\"\",\"\")\n		_reload_gettable := False \n}\ndb.createtable(\"ESTRUTURAS\",\"(item,componente)\") \nargs := {},hashmask := {},subitem := {}\nargs[\"table\"] := \"empresa\", args[\"loadfunc\"] := \"gettable\", args[\"mascaraant\"] := EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara,args[\"savetvfunc\"] := \"savetvfunc1\"\nfield := [\"Aba\",\"Familia\", \"Subfamilia\", \"Modelo\"], args[\"owner\"] := \"M\"\ntvstring := \"\"\ntvwindow(args)\nreturn \n\ntvwindow(args){\n	Global tvstring,selectmodel,hashmask,subitem,GLOBAL_COLOR,GLOBAL_TVSTRING\n	Static args1\n	\n	args1:=args \n	Gui,tvwindow:New\n	Gui,font,s%SMALL_FONT%,%FONT%\n	owner:=args[\"owner\"]\n	if(owner!=\"\")\n		Gui,tvwindow:+owner%owner%\n	;Gui,tvwindow:+toolwindow\n	Gui,color,%GLOBAL_COLOR%\n	Gui, Add, GroupBox, x2 y0 w490 h550 , Gerar Estrutura\n	Gui, Add, GroupBox, x12 y20 w470 h430 , TreeView\n	Gui, Add, GroupBox, x12 y450 w470 h90 , Opcoes\n	Gui, Add, TreeView, x22 y40 w450 h400 gtvest , \n	Gui, Add, Button, x272 y480 w100 h30 gsalvartv , Salvar\n	Gui, Add, Button, x372 y480 w100 h30 gcancelartv, Cancelar\n	;table:=args[\"table\"]\n	;loadfunc:=args.loadfunc,%loadfunc%(table,0,\"\",\"\")\n	TvDefinition=\n	(\n		%GLOBAL_TVSTRING%\n	)\n	CreateTreeView(TvDefinition)\n	Gui, Show, w501 h559,Gerar Estruturas!	\n	return\n\n		salvartv:\n		maska:=[]\n		id:=TV_GetSelection()\n		Loop\n		{\n			TV_GetText(text,id)\n			if(A_Index=1)\n				selected2:=text\n			if hashmask[text]!=\"\"\n				maska.insert(hashmask[text])\n			MsgBox, % \"text do hashmask \" text\n			MsgBox, % \"hashmask \" hashmask[text]\n			id:=TV_GetParent(id)\n			if !id \n				Break\n		}\n		for,each,value in maska{\n			MsgBox, % \"value in maska \" value\n		}\n		newarray := reversearray(maska)\n		mask=\n		for,each,value in newarray{\n			MsgBox, % \"values in the new array \" value\n			mask.=value\n		} \n		scmodel:=args1[\"mascaraant\"] . selectmodel\n		MsgBox, % \"mask \" mask \" selected2 \" selected2\n		dtmodel:=mask . selected2\n		MsgBox, % \"scmodel \" scmodel \" dtmodel \" dtmodel \n		args1[\"selected1\"]:=selectmodel,args1[\"selected2\"]:=selected2\n		savetvfunc:=args1[\"savetvfunc\"],%savetvfunc%(scmodel,dtmodel,args1[\"mascaraant\"],mask,args1)\n		return \n\n		cancelartv:\n\n		return \n\n	GuiClose:\n	ExitApp\n}\n\nsavetvfunc1(scmodel,dtmodel,mask1,mask2,args1){  ;Monta as Estruturas!!\n	Global\n	relationalhash:={} ;hash que faz a referencia entre o codigo e a descricao\n	loadtabledcdt(scmodel,dtmodel)\n	args[\"mascara1\"]:=mask1\n	args[\"mascara2\"]:=mask2\n	args[\"model1\"]:=args1[\"selected1\"]\n	args[\"model2\"]:=args1[\"selected2\"]\n	CHA1:={},CHA2:={},camposrel:=[]\n	for,each,value in args[\"codigo1\"]{\n		%value%:={}\n	}\n	for,each,value in args[\"codigo2\"]{\n		%value%:={}\n	}\n	loadtablesge(args)\n	progress(args[\"codigo1\"])\n	campo:=[]\n	for,each,value in camposrel{\n		campo.insert(value)\n	}\n	for,each,codigo in args[\"codigo1\"]{\n		i:=1,_ended:=0,relacionados:=args[\"codigo2\"]\n		gerarestruturas(codigo,args[\"codigo2\"])\n		for,each,value in finalreturn{\n			db.query(\"DELETE FROM ESTRUTURAS WHERE item='\" \"='\" finalreturn[A_Index,1] \" AND componente='\" finalreturn[A_Index,2] \"';\")\n			updateprogress(\"Gerando Estruturas:`n\" . finalreturn[A_Index,1],1)\n			if(finalreturn[A_Index,1]=finalreturn[A_Index,2]){\n				MsgBox, % \" O codigo do item nao pode ser igual ao do pai!\"\n				continue\n			}\n			db.insert(\"ESTRUTURAS\",\"(item,componente)\",\"('\" finalreturn[A_Index,1] \">>\" relationalhash[finalreturn[A_Index,1]] \"','\" finalreturn[A_Index,2] \">>\" relationalhash[finalreturn[A_Index,2]] \"')\")\n		}\n	}\n	Gui,progress:destroy\n	MsgBox,64,, % \"Estrutura gerada com sucesso.\"\n	loaditem()\n	return\n}\n\nloadtabledcdt(scmodel,dtmodel){     ;carrega as tabelas dos dois modelos que serao comparados.\n	Global db,args,relationalhash\n	args:={}\n	x:=[scmodel,dtmodel],y:=[\"codigo1\",\"codigo2\"],ocs:=[\"oc1\",\"oc2\"],camps:=[\"campo1\",\"campo2\"],i:=0\n		for,each,table in x {\n			i++\n			result:=db.query(\"SELECT tabela2 FROM reltable WHERE tipo='Codigo' AND tabela1='\" . table . \"'\")\n			For each in list:=db.getvalues(\"Codigos,DR\",result[\"tabela2\"]){\n				relationalhash[list[A_Index,1]]:=list[A_Index,2]\n				args[y[i],A_Index]:=list[A_Index,1] \n			}\n			result:=db.query(\"SELECT tabela2 FROM reltable WHERE tipo='oc' AND tabela1='\" . table . \"'\")\n			For each in list:=db.getvalues(\"Campos\",result[\"tabela2\"]){\n				args[ocs[i],A_Index]:=list[A_Index,1]\n			}\n			result:=db.query(\"SELECT tabela2 FROM reltable WHERE tipo='Campo' AND tabela1='\" . table . \"'\")\n			For each in list:=db.getvalues(\"Campos\",result[\"tabela2\"]){\n				args[camps[i],A_Index]:=list[A_Index,1]\n			}\n			For each,campname in args[camps[i]]{\n				StringReplace,campname,campname,%A_Space%,,All\n				result:=db.query(\"SELECT tabela2 FROM reltable WHERE tipo='\" . campname . \"' AND tabela1='\" . table . \"'\")\n				For each in list:=db.getvalues(\"Codigo\",result[\"tabela2\"]){\n					args[campname . i,A_Index]:=list[A_Index,1]\n				}\n			}\n	}\n}\n\nloadtablesge(args){        ;extrai os valores das tabelas no formato necessario para gerar as estruturas.\n	Global\n	tables:=[\"campo1\",\"campo2\"],cha:=[\"CHA1\",\"CHA2\"],i:=0\n	MsgBox,64,, % args[\"campo1\"].maxindex() \n	progress(args[\"campo1\"].maxindex()+args[\"campo2\"].maxindex())\n	for,each,table1 in tables {\n		i++\n		chav:=cha[A_Index]\n		for,each,value in args[table1]{\n			updateprogress(\"Carregando tabelas:`n\" . value,1)\n			if(ObjHasValue(args[\"campo2\"],value)) && (table1!=\"campo2\"){\n				camposrel.insert(value)\n			}\n			StringReplace,campname,value,%A_Space%,,All\n			if(args[campname . i,1]) && (args[campname . i,1]!=\"\"){\n				%chav%[campname] := StrLen(args[campname . i,1])\n			}Else{\n				%chav%[campname] := StrLen(args[campname . i])\n			}\n		}\n	}\n	codtables:=[\"codigo1\",\"codigo2\"],mascaras:=[\"mascara1\",\"mascara2\"],i:=0\n	for,each,codtable in codtables{\n		i+=1\n		if(codtable=\"codigo1\")\n			oc:=\"oc1\"\n		Else\n			oc:=\"oc2\"\n		for,each,codigo1 in args[codtable]{\n			StringTrimleft,codigo,codigo1,StrLen(args[mascaras[i]])\n			for,each2,value2 in camposrel{\n				StringReplace,value2,value2,%A_Space%,,All\n				args[\"trimfield\"]:=value2\n				%codigo1%[value2]:=trimcode(args,codigo,cha[i],oc)   ;me retorna a lista de valores relacionados ao codigo e ao campo\n			}\n		}\n	}\n	gui,progress:destroy\n}\n\ntrimcode(args,codigo,cha,oc){\n	Global CHA1,CHA2,camposrel\n		for,each,campo in args[oc]{\n			StringReplace,campo,campo,%A_Space%,,All\n			if(campo=args[\"trimfield\"]){\n				Stringleft,codigo,codigo,%cha%[campo]\n				Break\n			}Else{\n				StringTrimleft,codigo,codigo,%cha%[campo]\n			}		\n		}\n	returnvalue:=getreferencefield(args[\"trimfield\"],codigo,args[\"model2\"])   ;funcao que pega os valores na tabela de referencia.\n	returnvalue.insert(codigo)\n	;returnvalue:=[codigo]\n	return returnvalue\n}\n\ngetreferencefield(nomecamp,selectcode,selectmodel){\n	Global db \n	referencias:=[]\n	StringReplace,selectmodel,selectmodel,`.,,All\n	for,each,value in list:=db.getvalues(\"Referencia\",nomecamp . selectcode . selectmodel){\n		referencias.insert(list[A_Index,1])\n	}\n	return referencias\n}\n\ngerarestruturas(codigo1,prox){\n	Global relacionados,i,campo,finalreturn,_ended \n\n	if(campo[i])\n		prox:=[]\n	camp00:=campo[i]\n	StringReplace,camp00,camp00,%A_Space%,,All\n	For,each,value in %codigo1%[camp00]{\n		if(value!=\"\"){\n			For,each2,value2 in relacionados{\n				if(ObjHasValue(%value2%[camp00],value)){\n					prox.insert(value2)\n				}\n			}\n		}\n	}\n	i++\n	if(campo[i]!=\"\"){\n		for,each,value in prox{ \n			relacionados:=prox,gerarestruturas(codigo1,prox)\n		}\n	}else{\n		if(!_ended){\n			finalreturn:=[]\n			relacionados:=prox\n			for,each,value in relacionados{\n				finalreturn[A_Index,1]:=codigo1\n				finalreturn[A_Index,2]:=value\n			}\n			_ended:=1\n		}\n	}\n}\n\ntvest:\nTV_GetText(selectedsubitem,A_EventInfo)\nsubitem[selectedsubitem] := A_EventInfo\nreturn \n\ngettable(table,x,nivel,masc){\n	Global db,GLOBAL_TVSTRING,field,hashmask\n	x+=1,nivel.=\"`t\"\n	For each in list := db.getvalues(\"*\",table){\n		GLOBAL_TVSTRING .= \"`n\" . nivel . list[A_Index,1] \n		hashmask[list[A_Index,1]] := list[A_Index,2]\n		;MsgBox, % \"valor do hashmask \" hashmask[list[A_Index,1]] \"`n para o valor \" list[A_Index,1] \n		result:=db.query(\"SELECT tabela2 FROM reltable WHERE tipo='\" . field[x] . \"' AND tabela1='\" . masc . list[A_Index,1] . \"'\")\n		newtable := result[\"tabela2\"]\n		result.close()\n		if(newtable)\n			gettable(newtable,x,nivel,masc . list[A_Index,2])\n	}\n	return \n}\n\nlinkarm:\nif(!selecteditem){\n	MsgBox,64,, % \"Selecione um item para continuar!\"\n	return \n}\n\nargs := {}\nargs[\"selecteditem\"] := selecteditem\nargs[\"window\"] := \"M\",args[\"lv\"] := \"MODlv\",args[\"mascaraant\"] := EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara\nargs[\"tipo\"] := \"Campo\",args[\"selecteditem\"] := selectmodel,args[\"owner\"]:=\"M\"\nargs[\"tipoquery\"] := \"SELECT tipo,tabela1,tabela2 FROM reltable WHERE tipo='Campo'\"\nlinkar2(args)\nreturn \n\nMODlv:\nif A_GuiEvent = I\n{\n	Gui,submit,nohide\n	info := get_item_info(\"M\", \"MODlv\") \n	if(info.modelo[1] != \"Modelo\"){	\n		clear_prev_status()\n		load_model_image_in_main_window(info)\n		load_mod_info(info)\n		load_all_mod(info)\n		load_status_in_main_window(info)\n		load_cert_status(info)\n	}\n}\nreturn \n\nloaditem(){\n	Global\n\n	bloqtable := \"\", codtable := \"\", camptable := \"\", octable := \"\" , odctable := \"\", odrtable := \"\"\n	prefixpt2 := \"\"\n	for,each,value in list:=db.getvalues(\"Campos\",EmpresaMascara AbaMascara FamiliaMascara ModeloMascara \"prefixo\"){\n		prefixpt2 .= list[A_Index,1]	\n	} \n	StringReplace, prefixpt2, prefixpt2,% ModeloMascara,,All\n	result := db.query(\"SELECT tabela2 FROM reltable WHERE tipo='image' AND tabela1='\" EmpresaMascara AbaMascara FamiliaMascara ModeloMascara selectmodel \"'\")\n	IfnotExist,% A_WorkingDir \"\\img\\\" result[\"tabela2\"] \".png\"\n	{\n		db.load_image_to_file(\"\",\"\",result[\"tabela2\"])\n	}\n	;showimageandcode(A_WorkingDir \"\\img\\\" result[\"tabela2\"] \".png\",10,10,EmpresaMascara AbaMascara FamiliaMascara,ModeloMascara)\n	result.close()\n	Gui, M:default\n	;Guicontrol,, ptcode, simpleplot.png\n	result:=db.query(\"SELECT tabela2 FROM reltable WHERE tipo='Bloqueio' AND tabela1='\" . EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . selectmodel . \"'\")\n	bloqtable:=result[\"tabela2\"]\n	result.close()\n	if(!bloqtable)\n		bloqtable:=EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . \"Bloqueio\"\n	result:=db.query(\"SELECT tabela2 FROM reltable WHERE tipo='Codigo' AND tabela1='\" . EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . selectmodel . \"'\")\n	codtable:=result[\"tabela2\"]\n	result.close()\n	if(!codtable)\n		codtable:=EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . \"Codigo\"\n	result:=db.query(\"SELECT tabela2 FROM reltable WHERE tipo='Campo' AND tabela1='\" . EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . selectmodel . \"'\")\n	camptable:=result[\"tabela2\"]\n	result.close()\n	if(!camptable)\n		camptable:=EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . \"Campo\"\n	result:=db.query(\"SELECT tabela2 FROM reltable WHERE tipo='oc' AND tabela1='\" . EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . selectmodel . \"'\")\n	octable:=result[\"tabela2\"]\n	result.close()\n	if(!octable){\n		if(!db.exist(\"tipo,tabela1\",\"tipo='oc' AND tabela1='\" . EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . selectmodel . \"'\",\"reltable\"))\n			db.insert(\"reltable\",\"(tipo,tabela1,tabela2)\",\"('oc','\" . EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . selectmodel . \"','\" . EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . \"oc')\")\n		octable:=EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . \"oc\"\n	}\n	result:=db.query(\"SELECT tabela2 FROM reltable WHERE tipo='odc' AND tabela1='\" . EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . selectmodel . \"'\")\n	odctable:=result[\"tabela2\"]\n	result.close()\n	if(!odctable)\n		odctable:=EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . \"odc\"\n	result:=db.query(\"SELECT tabela2 FROM reltable WHERE tipo='odr' AND tabela1='\" . EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . selectmodel . \"'\")\n	odrtable:=result[\"tabela2\"]\n	result.close()\n	if(!odrtable)\n		odrtable:=EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . \"odr\"\n	result:=db.query(\"SELECT tabela2 FROM reltable WHERE tipo='odi' AND tabela1='\" . EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . selectmodel . \"'\")\n	oditable:=result[\"tabela2\"]\n	result.close()\n	if(!oditable)\n		oditable := EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . \"odi\"\n	Gui,listview,CODlv\n	Gui,M:default\n	RowNumber:=0\n	values:=getvaluesLV(\"M\",\"CODlv\")\n	numberofitems:=0\n	resultlist:=\"\"\n	for,each,value in list:=db.getvalues(\"Codigos,DR\",EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . \"Codigo\"){\n		numberofitems++	\n		if(list[A_Index,1]!=\"\"){\n        	resultlist.=\"|\" list[A_Index,1] \">>\" list[A_Index,2] \n   		 }   \n	} \n	guicontrol,,combocodes,|\n  	guicontrol,,combocodes,%resultlist%\n	Guicontrol,,numberofitems,Items:%numberofitems%\n}\n\n		MAM:\n		info := get_item_info(\"M\", \"MODlv\")\n		if(db.have_subfamilia(info.empresa[2] info.tipo[2] info.subfamilia[2] info.familia[1])){\n			MsgBox, % \"O item selecionado tem subfamilia, insira uma subfamilia antes de continuar!\" \n			return \n		}\n		if(get_tv_level(\"M\", \"main_tv\") != 3 && get_tv_level(\"M\", \"main_tv\") != 4){\n			MsgBox,16,Erro, % \" Selecione uma familia antes, para alterar modelos!\"\n			return \n		}\n		familia := get_tv_info(\"Familia\")\n		tipo := get_tv_info(\"Tipo\")\n		empresa := get_tv_info(\"Empresa\")\n		if(info.subfamilia[2] != \"\"){\n			model_table := db.get_reference(\"Modelo\",info.empresa[2] info.tipo[2] info.familia[2] info.subfamilia[1])	\n		}else{\n			;MsgBox, % \"ira buscar a tabela de modelos sem subfamilia \" info.empresa[2] info.tipo[2] info.familia[1]\n			model_table := db.get_reference(\"Modelo\", info.empresa[2] info.tipo[2] info.familia[1])\n		}\n		inserir_modelo_view(model_table)\n		return\n		\n		reloadmodelo(){\n			Global\n			db.loadlv(\"M\",\"MODlv\",modtable,\"Modelos,Mascara\",1)\n		}\n\nrefreshm(){\n	Global _refresh \n	_refresh := true\n	gosub,M\n}		\n		\n		MAB:\n		info := get_item_info(\"M\", \"MODlv\")\n		\n		if(info.modelo[2] = \"\"){\n			MsgBox, 16, Erro, % \"Selecione um modelo antes de continuar!\"\n			return \n		}\n		\n		tabela1 := info.empresa[2] info.tipo[2] info.familia[2] info.subfamilia[2] info.modelo[2] info.modelo[1] \n		bloq_table := db.get_reference(\"Bloqueio\", tabela1)\n		if(bloq_table = \"\")\n			bloq_table := info.empresa[2] info.tipo[2] info.familia[2] info.subfamilia[2] info.modelo[2] \"Bloqueio\"\n		\n		/*\n			Cria a tabela de bloqueios caso ela nao exista\n		*/ \n		db.Modelo.create_tabela_bloqueio(bloq_table, info)\n		inserir_bloqueio_view()\n		return \n\n\n				exportarbloqueio:\n				result_to_export:=GetCheckedRows(\"MAB\",\"MABlv\")\n				if(result_to_export[1,1] = \"\"){\n					MsgBox,64,,% \"Selecione os modelos a serem exportados antes de continuar\"\n					return \n				}\n				FileDelete,listbloqtemp.csv\n				for,each,value in result_to_export{\n					FileAppend,% result_to_export[A_Index,1] \"`n\",listbloqtemp.csv\n					if ErrorLevel\n						MsgBox, % \"O arquivo estava bloqueado!\"\n				}\n				MsgBox,64,, % \"Os items foram exportados!!!\" \n				run,listbloqtemp.csv\n				return \n\n				importarbloqueio:\n				db.query(\"Create TABLE \" bloqtable \" (Codigos, PRIMARY KEY(Codigos ASC));\")\n				FileSelectFile,source,\"\"\n				MsgBox, % source\n				x:= new OTTK(source)\n				progress(Listbloq.maxindex())\n				for,each,value in x{\n					updateprogress(\"Inserindo bloqueios: \" x[A_Index,1],1)\n				    db.query(\"INSERT INTO \" bloqtable \" (Codigos) VALUES ('\" x[A_Index,1] \"');\")\n				}\n				Gui, progress:destroy\n				MsgBox,64,,% \"valores importados!!!!\"\n				return \n\n				marctodosmab:\n				gui,listview,MABlv\n				Loop, % LV_GetCount()\n					LV_Modify(\"\",\"+check\")\n				return \n\n				destodosmab:\n				gui,listview,MABlv\n				Loop, % LV_GetCount()\n					LV_Modify(\"\",\"-check\")\n				return \n\n				filtrarcod:\n				table:=db.query(\"SELECT Codigos FROM \" codtable \";\")\n				progress(Listbloq.maxindex())\n				while(!table.EOF){ \n					if(MatHasValue(Listbloq,table[\"Codigos\"])){\n						updateprogress(\"filtrando codigos: \" table[\"Codigos\"],1)\n						db.query(\"DELETE FROM \" codtable \" WHERE Codigos='\" table[\"Codigos\"] \"';\")\n					}\n        			table.MoveNext()\n				}\n				Gui,progress:destroy\n				loaditem()\n				MsgBox,64,, % \"os codigos foram filtrados!!!\"\n				return \n\n				retirarbloq:\n				result:=GetCheckedRows(\"MAB\",\"MABlv\")\n				progress(result.maxindex())\n				for,each,value in result{\n					updateprogress(\"Retirando Bloqueios: \" result[A_Index,1],1)\n					Listbloq:=deletefromarray(result[A_Index,1],Listbloq)\n					db.query(\"DELETE FROM \" bloqtable \" WHERE Codigos='\" result[A_Index,1] \"';\")\n				}\n				gui,progress:destroy\n				db.loadlv(\"MAB\",\"MABlv\",bloqtable,\"Codigos\")\n				return \n\n				pesquisabloq:\n				gui,submit,nohide\n				pesquisalv(\"MAB\",\"MABlv\",pesquisamam,Listbloq)\n				return \n			\n			inserirwindow:\n			Gui,iw:New\n			Gui,font,s%SMALL_FONT%,%FONT%\n			Gui,iw:+owner%owner%\n			Gui,color,%GLOBAL_COLOR%\n			Gui,Add, Picture,w500 h50 0xE vbanner \n			banner(BANNER_COLOR,banner,\"Inserir bloqueios\")\n			;Gui,iw:+toolwindow\n			Gui,add,edit,w500 r1 gpesquisaiw vpesquisaiw uppercase,\n			Gui,add,listview,w500 h400 y+5 viwlv  checked,\n			Gui,add,button,w100 h30 y+5 ginserirbloq,Inserir\n			Gui,add,button,w100 h30 x+5 gmarctodosiw,Marc.Todos\n			Gui,add,button,w100 h30 x+5 gdestodosiw,Des.Todos\n			Gui,Show,,Inserir Bloqueios!!\n			Listiw:=[]\n			table:=db.query(\"SELECT Codigos,DC FROM \" codtable \";\")\n			k:=0\n			while(!table.EOF){\n					if(!MatHasValue(Listbloq,table[\"Codigos\"])){\n				        k++\n				        value1:=table[\"Codigos\"],value2:=table[\"DC\"]\n				        Listiw[k,1]:=value1 \n				        Listiw[k,2]:=value2\n					}\n					table.MoveNext()\n			}\n			db.loadlv(\"iw\",\"iwlv\",codtable,\"Codigos,DC\",1)\n			return \n\n				marctodosiw:\n				gui,listview,iwlv\n				Loop, % LV_GetCount()\n					LV_Modify(\"\",\"+check\")\n				return \n\n				destodosiw:\n				gui,listview,iwlv\n				Loop, % LV_GetCount()\n					LV_Modify(\"\",\"-check\")\n				return \n\n				pesquisaiw:\n				Gui,submit,nohide\n				pesquisalv(\"iw\",\"iwlv\",pesquisaiw,Listiw)\n				return \n\n\n				inserirbloq:\n				Gui,submit,nohide\n				db.query(\"Create TABLE \" bloqtable \" (Codigos, PRIMARY KEY(Codigos ASC));\")\n				result:=GetCheckedRows(\"iw\",\"iwlv\")\n				for,index,value in result{\n					for,each,string in Listiw{\n						if (Listiw[A_Index,1]=result[index,1]){\n							Listiw.Remove(each)\n							Gosub,pesquisaiw\n						}\n					}\n					db.query(\"INSERT INTO \" bloqtable \"(Codigos) VALUES ('\" . result[A_Index,1] . \"');\")\n				}\n				db.loadlv(\"MAB\",\"MABlv\",bloqtable,\"Codigos\",1)\n				MsgBox,64,, % \"Bloqueios inseridos\"\n\n				return \n\n\n;##################################################\n;#												  \n;#					Campos						  \n;#										          \n;##################################################\n\n\n; O modelo antigo esta no teste7			\nMAC:\ninfo := get_item_info(\"M\", \"MODlv\")\nif(info.modelo[2] = \"\" || info.modelo[1] = \"Modelo\" ){\n	MsgBox,16,Erro, % \"Selecione um modelo antes de continuar!\" \n	return\n}\n	\ninserir_campos_view(info)\nreturn\n\n				loadcampetables(relreference){\n					Global db\n					;MsgBox, % \" relreference \" relreference\n					db.loadlv(\"MAC\",\"MACcod\",relreference,\"Codigo\") \n					db.loadlv(\"MAC\",\"MACdc\",relreference,\"DC\")\n					db.loadlv(\"MAC\",\"MACdr\",relreference,\"DR\")\n					db.loadlv(\"MAC\",\"MACdi\",relreference,\"DI\")\n					GuiControl,+ReDraw,MACcod\n					GuiControl,+ReDraw,MACdc\n					GuiControl,+ReDraw,MACdr\n					GuiControl,+ReDraw,MACdi\n				}\n\n				desc.geral:\n				Gui,descgaral:New\n				Gui,font,s%SMALL_FONT%,%FONT%\n				Gui,Add, Picture,w310 h50 0xE vbanner\n				banner(BANNER_COLOR,banner,\"Descricao Geral\")\n				table:=db.query(\"SELECT descricao FROM \" EmpresaMascara AbaMascara FamiliaMascara ModeloMascara \"Desc;\")\n				table2:=db.query(\"SELECT descricao FROM \" EmpresaMascara AbaMascara FamiliaMascara ModeloMascara \"DescIngles;\")				\n				Gui,add,text,xm y+5,Descricao Potugues:\n				Gui,add,edit,r2 w310  y+5 xm  veditdg uppercase, % table[\"descricao\"]\n				Gui,add,text,xm y+5,Descricao Ingles:\n				Gui,add,edit,r2 w310 y+5 xm  veditdi uppercase, % table2[\"descricao\"]\n				Gui,add,button,y+5 xm gsalvardescgeral,Salvar\n				Gui,Show,,Descricao Geral\n				table.close()\n				table2.close()\n				return \n\n					salvardescgeral:\n					Gui,Submit,nohide\n					db.query(\"Create TABLE \" EmpresaMascara AbaMascara FamiliaMascara ModeloMascara \"Desc (descricao);\")\n					db.query(\"Create TABLE \" EmpresaMascara AbaMascara FamiliaMascara ModeloMascara \"DescIngles (descricao);\")\n					db.deletevalues(EmpresaMascara AbaMascara FamiliaMascara ModeloMascara \"Desc\",\"descricao\")\n					db.deletevalues(EmpresaMascara AbaMascara FamiliaMascara ModeloMascara \"DescIngles\",\"descricao\")\n					db.insert(EmpresaMascara AbaMascara FamiliaMascara ModeloMascara \"Desc\",\"(descricao)\",\"('\" editdg \"')\")\n					db.insert(EmpresaMascara AbaMascara FamiliaMascara ModeloMascara \"DescIngles\",\"(descricao)\",\"('\" editdi \"')\")\n					MsgBox,64,, % \"A descricao geral foi salva!!!\" \n					return \n\n\n				MACRDI:\n				return \n\n\n\n				deslink:\n				MsgBox, 4,,Deseja desfazer o link?\n				IfMsgBox Yes\n				{\n					SQL:=\"DELETE FROM reltable WHERE tipo='Campo' AND tabela1='\" . EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . selectmodel . \"';\"\n					db.query(sql)\n					for,each,value in [octable,odctable,odrtable]{\n						db.deletevalues(value,\"Campos\")	\n					}\n					camptable:=EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . \"Codigo\"\n					db.loadlv(\"MAC\",\"MACcamp\",camptable)\n					MsgBox,64,, % \"O link foi desfeito!\"\n					guicontrol,,link,\n					guicontrol,hide,deslink\n					loaditem()\n				}else{\n					return \n				}\n				return \n\n				deslink2:\n				MsgBox, 4,,Deseja desfazer o link?\n				IfMsgBox Yes\n				{\n					desparan1 := GetSelected(\"MAC\",\"MACcamp\")\n					desparan2 := EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . selectmodel\n					StringReplace,desparan1,desparan1,%A_Space%,,All\n					MsgBox, % \"DELETE FROM reltable WHERE tipo='\" desparan1 \"' AND tabela1='\" desparan2 \"';\" \n					db.query(\"DELETE FROM reltable WHERE tipo='\" desparan1 \"' AND tabela1='\" desparan2 \"';\")\n					MsgBox,64,, % \"O link do campo \" desparan1 \" foi desfeito!!!\"\n				}else{\n					return \n				}\n				return \n\n				loadcampetable(args){\n					Global \n					campvalues := {}\n					campnames := db.query(\"SELECT Campos FROM \" args[\"camptable\"] \";\")\n					while(!campnames.EOF){\n					    campname := campnames[\"Campos\"]\n					    StringReplace,campname,campname,%A_Space%,,All\n					    if(campname=\"\")\n					        Break\n					    relreference:=db.query(\"SELECT tabela2 FROM reltable WHERE tipo='\" . campname . \"' AND tabela1='\" . args[\"model\"] . \"'\")\n					    db.query(\"ALTER TABLE \" relreference[\"tabela2\"] \" ADD COLUMN DI TEXT;\")\n					    result:=db.query(\"SELECT Codigo,DC,DR,DI FROM \" relreference[\"tabela2\"] \";\")\n					    while(!result.EOF){\n					        if(result[\"Codigo\"] = \"\")\n					            continue\n					        referencename1 := campname . \"Codigo\",referencename2:=campname . \"dc\",referencename3:=campname . \"dr\",referencename4:=campname . \"di\"\n							\n							campvalues[referencename1, A_Index] := result[\"Codigo\"]\n							campvalues[referencename2, A_Index] := result[\"DC\"]\n							campvalues[referencename3, A_Index] := result[\"DR\"]\n							campvalues[referencename4, A_Index] := result[\"DI\"]\n					        result.movenext()\n					    }\n					    result.close()\n					    campnames.movenext()\n					}\n					campnames.close()\n					relreference.close()\n				}\n\n				MACcod:\n				if A_GuiEvent = I \n				{\n					gui,submit,nohide\n					selecteditem9:=GetSelected(\"MAC\",\"MACcod\"),selectcode:=selecteditem9\n				}\n				return \n\n				addreferencia:\n				if(!nomecamp) || (!selectcode) || (!selectmodel)\n					MsgBox,64,, % \"Nenhum dos campos pode estar em branco!!!\"\n				StringReplace,selectmodel,selectmodel,`.,,All\n				inserir3(nomecamp . selectcode . selectmodel,\"Referencia\",\"Referencia ASC\",\"\",\"\")\n				return \n\n				MACREN:\n				args:={}\n				args[\"window\"]:=\"MAC\",args[\"table\"]:=campEtable,args[\"camptable\"]:=camptable\n				args[\"mascaraant\"]:=EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara\n				button:=A_GuiControl\n				if(button=\"MACRC\"){\n					args[\"lv\"]:=\"MACcamp\"\n					args[\"field1\"]:=\"Campos\"\n					args[\"field2\"]:=\"Campos\"\n					args[\"func\"]:=\"salvarr1\"\n					args[\"loadtable\"]:=camptable\n					args[\"loadfield\"]:=\"Campos\"\n				}\n\n				if(button=\"MACRCO\"){\n					args[\"lv\"]:=\"MACcod\"\n					args[\"field1\"]:=\"Codigo\"\n					args[\"field2\"]:=\"Codigo\"\n					args[\"func\"]:=\"salvarr2\"\n					args[\"loadtable\"]:=campEtable\n					args[\"loadfield\"]:=\"Codigo\"\n				}\n\n				if(button=\"MACRDC\"){\n					args[\"lv\"]:=\"MACdc\"\n					args[\"field1\"]:=\"DC\"\n					args[\"field2\"]:=\"DC\"\n					args[\"func\"]:=\"salvarr2\"\n					args[\"loadtable\"]:=campEtable\n					args[\"loadfield\"]:=\"DC\"\n				}\n					\n				if(button=\"MACRDR\"){\n					args[\"lv\"]:=\"MACdr\"\n					args[\"field1\"]:=\"DR\"\n					args[\"field2\"]:=\"DR\"\n					args[\"func\"]:=\"salvarr2\"\n					args[\"loadtable\"]:=campEtable\n					args[\"loadfield\"]:=\"DR\"\n				}\n\n				if(button=\"MACRDI\"){\n					args[\"lv\"]:=\"MACdi\"\n					args[\"field1\"]:=\"DI\"\n					args[\"field2\"]:=\"DI\"\n					args[\"func\"]:=\"salvarr2\"\n					args[\"loadtable\"]:=campEtable\n					args[\"loadfield\"]:=\"DI\"\n				}\n				renomear2(args)\n				return\n\n			MACL:\n			gui,submit,nohide\n			if(!nomecamp){\n				MsgBox,64,, % \"Selecione um campo ja criado antes de continuar!\"\n				return \n			}\n			args:={}\n			args[\"selecteditem\"]:=selectmodel\n			args[\"tipo\"]:=nomecamp,args[\"mascaraant\"]:=EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara\n			args[\"tipoquery\"]:=\"SELECT tipo,tabela1,tabela2 FROM reltable WHERE tipo='\" . nomecamp . \"'\"\n			args[\"closefunc\"]:=\"closelinkar2\",args[\"selecteditem\"]:=selectmodel\n			linkar2(args)\n			return\n\n			closelinkar2(args1){\n				Global\n				args:={},args[\"camptable\"]:=camptable,args[\"model\"]:=EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . selectmodel\n				loadcampetable(args1)\n			}\n\n			MACEXCLUIRC:\n			selecteditems:=getselecteditems(\"MAC\",\"MACcamp\")\n			MsgBox, 4,,Deseja apagar os campos?\n			IfMsgBox Yes\n			{\n				for,each,value in selecteditems{\n					campEtable:=getreferencetable(value,EmpresaMascara AbaMascara FamiliaMascara ModeloMascara selectmodel)\n					MsgBox, % \" gonna drop table \" campEtable\n					db.query(\"DROP TABLE \" campEtable \";\")\n					db.delete(camptable,value,\"Campos\")\n					db.delete(octable,value,\"Campos\")\n					db.delete(odctable,value,\"Campos\")\n					db.delete(odrtable,value,\"Campos\")\n					db.delete(oditable,value,\"Campos\")\n				}\n				db.loadlv(\"MAC\",\"MACcamp\",camptable)\n			}else{\n				return \n			}\n			return \n\n			MACEEXCLUIRV:\n			selecteditems:=getselecteditems(\"MAC\",\"MACcod\")\n			MsgBox, % \" selecteditems \" selecteditems[1] \" nomecamp \" nomecamp \n			if(selecteditems[1]=\"\" or nomecamp=\"\"){\n				MsgBox,64,, % \"Selecione um campo e um item a ser excluido!\"\n				return \n			}\n			MsgBox, 4,,Deseja apagar os items selecionados?\n			IfMsgBox Yes\n			{\n				for,each,value in selecteditems{\n					db.delete(campEtable,value,\"Codigo\")\n					}	\n				db.loadlv(\"MAC\",\"MACcod\",campEtable,\"codigo\")\n				db.loadlv(\"MAC\",\"MACdc\",campEtable,\"dc\")\n				db.loadlv(\"MAC\",\"MACdr\",campEtable,\"dr\")\n				db.loadlv(\"MAC\",\"MACdi\",campEtable,\"di\")\n			}else{\n				return \n			}\n			return \n\n\n			MACcamp:\n			if A_GuiEvent = I \n			{\n				gui,submit,nohide\n				selecteditem := GetSelected(\"MAC\",\"MACcamp\")\n				StringReplace,nomecamp,selecteditem,%A_Space%,,All\n				campEtable := getreferencetable(selecteditem,EmpresaMascara AbaMascara FamiliaMascara ModeloMascara selectmodel)\n				guicontrol,,link0,% \"@\" campEtable\n				loadcampetables(campEtable)\n			}\n			\n			return \n\n				MACEXCLUIR:\n				selecteditem:=GetSelected(\"MAC\",\"MACcamp\")\n				MsgBox, 4,,Deseja apagar o campo selecionado %selecteditem%?\n				IfMsgBox Yes\n				{\n					db.delete(\"MAC\",\"MACcamp\",EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . \"camp\",selecteditem,\"Campos\")\n					db.loadlv(\"MAC\",\"MACcamp\",EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . \"camp\")\n				}else{\n					return \n				}\n				return \n\n				MACC:\n				return \n\n				MACI:\n				campname:=\"\"\n				camplist:=db.getvalues(\"Campos\",camptable)\n				campvalues:=\"\"\n				for,k,v in camplist{\n			    if(A_Index=1){\n			        if(camplist[A_Index,1]!=\"\")\n			            campvalues.=camplist[A_Index,1] \n			    }else{\n			        if(camplist[A_Index,1]!=\"\")\n			            campvalues.=\"|\" . camplist[A_Index,1]       \n			    }\n				}\n				gui,MABC:New\n				Gui,font,s%SMALL_FONT%,%FONT%\n				Gui,MABC:+ownerM\n				Gui,color,%GLOBAL_COLOR%\n				Gui, Add, Text, xm w100 h20 , Campos\n				Gui, Add,Dropdownlist, xm y+5 w180 gddlaction vddlvalue ,%campvalues%\n				Gui, Add, Button, x+5  w100 h20 gAddCampo, Add Campo\n				Gui, Add, Text, xm y+5 w100 h20 , Codigo\n				Gui, Add, Edit, xm y+5 w120 h20 vcod uppercase,\n				Gui, Add, Text, xm y+5 w100 h20 , Descricao Completa\n				Gui, Add, Edit,  y+5 w700 h60 vdc uppercase,\n				Gui, Add, Text, xm y+5 w100 h20 , Descricao Resumida\n				Gui, Add, Edit,  y+5 w700 h60 vdr uppercase,\n				Gui, Add, Text, xm y+5 w100 h20 , Descricao Ingles\n				Gui, Add, Edit,  y+5 w700 h60 vdi uppercase,\n				Gui, Add, Button, xm y+5 y+5   w100 h30 gMACISALVAR,Salvar\n				Gui, Add, Button,  x+5 w100 h30 gMACIIMPORT,Importar\n				Gui, Add, Button, x+5 w100 h30 gMACICANCELAR, Cancelar\n				Gui, Show,,Modelos-Alterar-Campos-Incluir\n				return  \n\n					MACIIMPORT:\n					Gui,submit,nohide\n				  FileSelectFile,source,\"\"\n				  Stringright,_iscsv,source,3\n				  if(_iscsv!=\"csv\"){\n				  	MsgBox, % \"o arquivo selecionado tem que ser .csv!!!!\"\n				    return \n				  }\n				  if(campEtable=\"\"){\n						MsgBox, % \"Selecione um modelo antes de continuar!!!\"\n						return \n					}\n					MsgBox, % campEtable\n					db.query(\"create table if not exists \" campEtable \"(Codigo,DC,DR,DI, PRIMARY KEY(Codigo ASC))\")\n			    ;db.query(\"CREATE TABLE \" campEtable \" (Codigo,DC);\")\n			    MsgBox, 4,,Deseja apagar a tabela antiga?\n					IfMsgBox Yes\n					{\n						db.query(\"DELETE FROM \" campEtable \";\")\n					}\n				  x:= new OTTK(source)\n				  for,each,value in x{\n				    db.query(\"INSERT INTO \" campEtable \" (Codigo,DC,DR,DI) VALUES ('\" x[A_Index,1] \"','\" x[A_Index,2] \"','\" x[A_Index,3] \"','\" x[A_Index,4] \"');\")\n				  }\n				  MsgBox,64,,% \"valores importados!!!!\"\n					return \n				\n\n					ddlaction:\n					Gui,submit,nohide\n					StringReplace,value,ddlvalue,%A_Space%,,All\n					result:=db.query(\"SELECT tabela2 FROM reltable WHERE tipo='\" . value . \"' AND tabela1='\" . EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . selectmodel . \"'\")\n					campEtable:=result[\"tabela2\"]\n					result.close()\n					campname1:=value\n					;MsgBox, % \" valor selecionado no camp action \" campname \"`n valor do campEtable \" campEtable\n					model:=EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . selectmodel\n					return \n\n					AddCampo:\n					gui,addcampo:New\n					Gui,font,s%SMALL_FONT%,%FONT%\n					Gui,color,%GLOBAL_COLOR%\n					Gui, Add, Text, x7 y55 w70 h20 ,Nome:\n					Gui, Add, Edit, x57 y45 w230 h30 vADDCedit1 uppercase,\n					Gui, Add, GroupBox, x-3 y-5 w300 h180 , Inserir\n					Gui, Add, Button, x72 y130 w100 h30 gADDCAMPOSALVAR,&Salvar\n					Gui, Add, Button, x182 y130 w100 h30 gADDCAMPOCANCELAR,&Cancelar\n					Gui, Show, w309 h200,Empresa-Alterar-Inserir\n					return\n\n						ADDCAMPOSALVAR:\n						gui,submit,nohide\n						if(ADDCedit1=\"\")\n						{\n							MsgBox, % \"O campo nao pode estar em branco!!\"\n							return \n						}\n						db.createtable(camptable,\"(Campos,PRIMARY KEY(Campos ASC))\")\n						db.createtable(octable,\"(Campos,PRIMARY KEY(Campos ASC))\")\n						db.createtable(odctable,\"(Campos,PRIMARY KEY(Campos ASC))\")\n						db.createtable(odrtable,\"(Campos,PRIMARY KEY(Campos ASC))\")\n						istring:=\"('\" . ADDCedit1 . \"')\"\n						model:=EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . selectmodel\n						db.insert(camptable,\"(Campos)\",istring)\n						db.insert(octable,\"(Campos)\",istring)\n						db.insert(odctable,\"(Campos)\",istring)\n						db.insert(odrtable,\"(Campos)\",istring)\n						if(!db.exist(\"tipo,tabela1\",\"tipo='Campo' AND tabela1='\" . model . \"'\",\"reltable\"))\n							db.insert(\"reltable\",\"(tipo,tabela1,tabela2)\",\"('Campo','\" . model . \"','\" . camptable . \"')\")\n						if(!db.exist(\"tipo,tabela1\",\"tipo='oc' AND tabela1='\" . model . \"'\",\"reltable\"))\n							db.insert(\"reltable\",\"(tipo,tabela1,tabela2)\",\"('oc','\" . model . \"','\" . octable . \"')\")\n						if(!db.exist(\"tipo,tabela1\",\"tipo='odc' AND tabela1='\" . model . \"'\",\"reltable\"))\n							db.insert(\"reltable\",\"(tipo,tabela1,tabela2)\",\"('odc','\" . model . \"','\" . odctable . \"')\")\n						if(!db.exist(\"tipo,tabela1\",\"tipo='odr' AND tabela1='\" . model . \"'\",\"reltable\"))\n							db.insert(\"reltable\",\"(tipo,tabela1,tabela2)\",\"('odr','\" . model . \"','\" . odrtable . \"')\")\n						Gui,AddCampo:destroy\n						Gosub,MACI\n						args:={},args[\"camptable\"]:=camptable,args[\"model\"]:=EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . selectmodel\n						;MsgBox, % \"addcamposalvar\"\n						loadcampetable(args)\n						;MsgBox, % camptable\n						db.loadlv(\"MAC\",\"MACcamp\",camptable)\n						return \n\n						ADDCAMPOCANCELAR:\n						gui,AddCampo:destroy\n						return \n\n\n					MACISALVAR:\n					gui,submit,nohide\n					db.query(\"create table if not exists \" campEtable \"(Codigo,DC,DR,DI, PRIMARY KEY(Codigo ASC))\")\n					if(campname1=\"\"){\n						MsgBox,64,, % \"Selecione um campo ou insira um se nao existir!\"\n						return\n					}\n					MsgBox, % \" model e igual a \" model \" e cod e igual a \" cod\n					if(model = \"\" or dc = \"\" or dr = \"\" or di = \"\" or cod = \"\"){\n						MsgBox,64,, % \"Algum campo obrigatorio esta em branco!\"\n						return \n					}\n					istring:=\"('\" cod \"','\" dc \"','\" dr \"','\" di \"')\"\n					if(campEtable = \"\"){\n						if(!db.exist(\"tipo,tabela1\",\"tipo='\" . campname1 . \"' AND tabela1='\" . model . \"'\",\"reltable\"))\n						{\n							db.insert(\"reltable\",\"(tipo,tabela1,tabela2)\",\"('\" . campname1 . \"','\" . model . \"','\" . EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . campname1 . \"')\")\n						}\n						db.createtable(EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . campname1,\"(Codigo,DC,DR,DI, PRIMARY KEY(Codigo ASC))\")\n						db.query(\"ALTER TABLE \" EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . campname1 \" ADD COLUMN DI TEXT;\")\n						db.insert(EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . campname1,\"(Codigo,DC,DR,DI)\",istring)\n					}else{\n						db.query(\"ALTER TABLE \" campEtable \" ADD COLUMN DI TEXT;\")\n						db.insert(campEtable,\"(Codigo,DC,DR,DI)\",istring)\n					}\n					args:={},args[\"camptable\"]:=camptable,args[\"model\"]:=EmpresaMascara . AbaMascara . FamiliaMascara . ModeloMascara . selectmodel\n					MsgBox, % \"Os valores foram salvos com sucesso!!!\"\n					db.loadlv(\"MAC\",\"MACcamp\",camptable)\n					return \n\n					MACICANCELAR:\n					return \n\n		\n\n\n			MAOC:\n			info := get_item_info(\"M\", \"MODlv\")\n			ordem_view(\"oc\", info)\n			\n			;args:={}\n			;args[\"camptable\"]:=camptable,args[\"table\"]:=octable,args[\"field\"]:=\"Campos\",args[\"comparar\"]:=true,args[\"owner\"]:=\"M\"\n			;MsgBox, % \"octable \" octable\n			;alterarordem(args)\n			return \n			\n			MAODC:\n			info := get_item_info(\"M\", \"MODlv\")\n			ordem_view(\"odc\", info)\n			\n			;args:={}\n			;args[\"camptable\"]:=camptable,args[\"table\"]:=odctable,args[\"field\"]:=\"Campos\",args[\"comparar\"]:=true,args[\"owner\"]:=\"M\"\n			;alterarordem(args)\n			return \n\n			MAODR:\n			info := get_item_info(\"M\", \"MODlv\")\n			ordem_view(\"odr\", info)\n\n			;args:={}\n			;args[\"camptable\"]:=camptable,args[\"table\"]:=odrtable,args[\"field\"]:=\"Campos\",args[\"comparar\"]:=true,args[\"owner\"]:=\"M\" \n			;alterarordem(args)\n			return \n\n			MAODI:\n			info := get_item_info(\"M\", \"MODlv\")\n			ordem_view(\"odi\", info)\n			\n			;args:={}\n			;args[\"camptable\"] := camptable, args[\"table\"] := oditable, args[\"field\"] := \"Campos\", args[\"comparar\"] := true, args[\"owner\"] := \"M\"\n			;alterarordem(args)\n			return\n			\n;inserir1(table,field,primarykey,tipo,mascaraant=\"\",relcondition=true,args)\n\ninserir1(args)\n{\n	Global db,args1,GLOBAL_COLOR,bannerargs,TextOptions,Font,pesquisaifdb,List,BANNER_COLOR\n	Static updown1,lv,foto,banner,banner99\n	args1 := args\n	StringSplit, value, field,`,\n	field3 := value1\n	Gui, inserir1:New\n	Gui,font,s%SMALL_FONT%,%FONT%\n	owner := args[\"owner\"]\n	if(owner != \"\")\n		Gui, inserir1:+owner%owner%\n	Gui, color, %GLOBAL_COLOR%\n	Gui, Add, Picture,w600 h50 0xE vbanner \n	banner(BANNER_COLOR,banner,\"Alterar\")\n	Gui, Add, ListView, xm w320 h290 vlv glv altsubmit  ,\n	Gui, Add, UpDown, x+5  w40 h140 gupdown1 vupdown1, UpDown\n	Gui, Add, Picture, x+5 w230 h250 vfoto gfoto ,%A_ScriptDir%\\SGTK\\Images\\NoImage1.png\n	Gui, Add, Button, xm y+50 w100 h30 ginserir,&Inserir\n	Gui, Add, Button, x+5 wp hp grenomear, &Renomear\n	Gui, Add, Button, x+5 wp hp glinkar, &Linkar\n	Gui, Add, Button, x+5 wp hp gimportar,&Importar\n	Gui, Add, Button, x+5 wp hp gexportar,&Exportar\n	Gui, Add, Button, x+5 wp hp gexcluir, &Excluir\n	Gui, Show,, Empresa-Alterar\n	db.loadlv(\"inserir1\",\"lv\",args[\"table\"],args[\"field\"])\n	return\n\n	importar:\n	Gui, submit, nohide\n    FileSelectFile, source,\"\"\n    Stringright, _iscsv, source, 3\n    MsgBox, % _iscsv\n    if(_iscsv != \"csv\"){\n    	MsgBox, % \"o arquivo selecionado tem que ser .csv!!!!\"\n    	return \n    }\n    if(args1[\"table\"] = \"\"){\n		MsgBox, % \"Selecione um modelo antes de continuar!!!\"\n		return \n	}\n    db.query(\"CREATE TABLE \" args1[\"table\"] \" (\" args1[\"field\"] \");\")\n    MsgBox, 4,,Deseja apagar a tabela antiga?\n	IfMsgBox Yes\n	{\n		db.query(\"DELETE FROM \" args1[\"table\"] \";\")\n	}\n    x:= new OTTK(source)\n    for,each,value in x{\n        db.query(\"INSERT INTO \" args1[\"table\"] \" (\" args1[\"field\"] \") VALUES ('\" x[A_Index,1] \"','\" x[A_Index,2] \"');\")\n    }\n    MsgBox,64,,% \"valores importados!!!!\"\n	return \n\n	exportar:\n	FileDelete,temp.csv \n	for,each,value in list := db.getvalues(args1[\"field\"],args1[\"table\"]){ \n		FileAppend, % list[A_Index,1] \";\" list[A_Index,2] \"`n\",temp.csv\n	}\n	Run, temp.csv		\n	return \n\n	inserir:\n	Gui, submit, nohide\n	inserir2(args1)\n	return\n\n	renomear:\n	renomear(args1)\n	return \n\n	copiar:\n	return \n\n	linkar:\n	linkar(args1)\n	return \n\n	excluir:\n	selecteditem := GetSelected(\"inserir1\",\"lv1\")\n	MsgBox, 4,, Deseja apagar a empresa %selecteditem%?\n	IfMsgBox Yes\n	{\n		db.delete(args1[\"table\"], selecteditem, args1[\"field1\"])\n		SQL:=\"DELETE FROM reltable WHERE tipo='\" . args1[\"tipo\"]  \"' AND tabela1='\" . args1[\"tabela1\"] . \"';\"\n		if (!db.Query(SQL)) {\n					  Msg := \"ErrorLevel: \" . ErrorLevel . \"`n\" . SQLite_LastError() \"`n`n\" sQry\n					  throw Exception(\"Query failed: \" Msg)\n					}\n		db.loadlv(\"inserir1\", \"lv1\", args1[\"table\"], args1[\"field\"])\n		closefunc:=args1[\"closefunc\"]\n		%closefunc%(args)\n	}else{\n		return \n	}\n	return \n\n	updown1:\n	return \n\n	lv:\n	return \n\n	foto:\n	result := GetSelectedRow(\"inserir1\",\"lv1\") \n	if(result[2] = \"mascara\" || result[2] = \"\"){\n		MsgBox, % \"Selecione um item antes de continuar!!\"\n		return \n	}\n	selecteditem := result[1]\n	iprefix := args1[\"mascaraant\"] result[2]\n	inserirfoto(iprefix, selecteditem, \"\", args1[\"owner\"])\n	return \n}\n\nmassainsertphoto(codtable){\n	Global db,TextOptions,Font,picture,BANNER_COLOR,GLOBAL_COLOR\n	Static lv,banner\n\n	Gui,massaphoto:New \n	Gui, Add, Picture,w900 h50 0xE vbanner \n	banner(BANNER_COLOR,banner,\"Inserir Fotos\")\n	Gui, Color,%GLOBAL_COLOR%\n	Gui, Add, Listview,w500 h300 xm section checked vlv altsubmit gmassalv,Codigos\n	Gui, Add, Picture,x+5 w300 h300 vpicture,%A_WorkingDir%\\noimage.png\n	Gui, Add, Button,xm y+5 w100 gmarcartodos,Marcar todos\n	Gui, Add, button,x+5 w100 gdesmarcartodos,Desmarcar todos\n	Gui, Add, button,x+260  w100 ginserirfotoemmassa ,Inserir\n	;Gui,add,button,x+5 w100 gexcluir,Excluir dos marcados\n	Gui, Show \n	db.loadlv(\"massaphoto\",\"lv\",codtable)\n	return \n}\n\ninserirfoto(iprefix1=\"\",selecteditem1=\"\",arrayofitems1=\"\",owner=\"\"){ ;arrayofitems e usado no massainsertphoto\n	Global GLOBAL_COLOR,db,pesquisaifdb,image_table\n	Static iprefix,selecteditem,arrayofitems,owner1\n	arrayofitems := arrayofitems1,owner1 := owner\n	iprefix := iprefix1,selecteditem := selecteditem1\n	Gui,insertimage:New \n	if(owner!=\"\")\n		Gui,insertimage:+owner%owner%\n	Gui,color,%GLOBAL_COLOR%\n	Gui,add,button, w150 h30 ginsertfromdb,Escolher do Banco!\n	Gui,add,button,w150 h30 ginsertfromfile,Escolher Arquivo!\n	Gui,Show,, \n	return \n\n		insertfromdb:\n		Gui,insertimage:destroy\n		Gui,selectfromdb:New\n		if(owner1 != \"\")\n			Gui,selectfromdb:+owner%owner1%\n		Gui,add,text,,Pesquisar:\n		Gui,add,edit,x+5 w150 r1 gpesquisaifdb vpesquisaifdb uppercase, \n		Gui,add,listview,xm y+5 vsblv w200 h300 altsubmit gsblv,Nome\n		Gui,add,picture,x+5 w300 h300 vsbimage,\n		Gui,add,button,xm y+5 gsaveselected w100 h30,Salvar\n		Gui,add,button,x+5 w100 h30 gdeleteimage,Deletar\n		Gui,Show,,\n		image_table := []\n		;Caso a tabela de imagens ainda nao tenha sido carregado\n		table := db.query(\"SELECT Name FROM imagetable;\")\n		while(!table.EOF){  \n      value1 := table[\"Name\"]\n      image_table.insert(value1)\n     	LV_Add(\"\",value1)  \n      table.MoveNext()\n		}\n		table.close()\n		return \n\n			pesquisaifdb:\n			Gui,submit,nohide\n			pesquisa_simple_array(\"selectfromdb\",\"sblv\",pesquisaifdb,image_table) \n			;pesquisalv(\"selectfromdb\",\"sblv\",pesquisaifdb,image_table)\n			return \n\n			deleteimage:\n			selectedimage:=GetSelected(\"selectfromdb\",\"sblv\")\n			if(selectedimage=\"\"){\n				MsgBox, % \"Selecione uma imagem antes de continuar\"\n				return \n			}\n			if(arrayofitems!=\"\"){\n				for,each,value in arrayofitems{\n					db.query(\"DELETE FROM imagetable WHERE Name='\" value \"';\")		\n				}\n			}else{\n				db.query(\"DELETE FROM imagetable WHERE Name='\" selectedimage \"';\")	\n			}\n			db.loadlv(\"selectfromdb\",\"sblv\",\"imagetable\")\n			MsgBox, % \"imagem deletada!!!\"\n			return\n\n			saveselected:\n			selectedimage:=GetSelected(\"selectfromdb\",\"sblv\")\n			if(arrayofitems!=\"\"){               ;se o arrayofitems nao estiver vazio insere todos os items.\n				for,each,value in arrayofitems{\n					db.query(\"DELETE FROM reltable WHERE tipo='image' AND tabela1='\" value \"';\")\n					db.queryS(\"INSERT INTO reltable (tipo,tabela1,tabela2) VALUES ('image','\" value \"','\" selectedimage \"');\")		\n				}\n			}else{\n				if(iprefix=\"\" || selecteditem=\"\"){\n					MsgBox, % \"As imagens nao foram inseridas pois o nome do arquivo e o `n array de items estavam em branco\"\n					return \n				}\n				db.query(\"DELETE FROM reltable WHERE tipo='image' AND tabela1='\" iprefix selecteditem \"';\")\n				db.queryS(\"INSERT INTO reltable (tipo,tabela1,tabela2) VALUES ('image','\" iprefix selecteditem \"','\" selectedimage \"');\")		\n			}			\n			loaditem()\n			Msgbox,64,,\"A imagem foi inserida no item!!!\"\n			return \n\n			sblv:\n			if A_GuiEvent = I\n			{\n				selecteditem2 := GetSelected(\"selectfromdb\",\"sblv\")\n				if(selecteditem2 = \"\" || selecteditem2 = \"Name\")\n					return \n				db.loadimage(\"selectfromdb\",\"sbimage\",selecteditem2)\n			}\n			return \n\n		insertfromfile:\n		Global editimage\n		Gui,insertimage:destroy\n		FileSelectFile,source\n		if(source = \"\"){\n			return\n		}\n		Gui,insertfromfile:New\n		if(owner1!=\"\")\n			Gui,selectfromdb:+owner%owner1%\n		Gui,add,text,w100 h30,Nome imagem:\n		Gui,add,edit,r1 veditimage w150 h30 y+5 uppercase\n		Gui,add,button,gifinsert w100 h30 y+5,inserir\n		Gui,Show,, \n		return \n\n		ifinsert:\n		Gui,submit,nohide\n    if(editimage=\"\" || source=\"\"){\n        MsgBox, % \"Escolha o nome e a imagem antes de continuar editimage!!\"\n        return  \n    }\n    ;insere o valor na tabela de imagem caso a tabela ja tenha sido carregada\n    if(image_table.maxindex())\n    	image_table[1].insert(editimage)\n\n	  if(arrayofitems!=\"\"){               ;se o arrayofitems nao estiver vazio insere todos os items.\n			for,each,value in arrayofitems{\n				db.query(\"DELETE FROM reltable WHERE tipo='image' AND tabela1='\" value \"';\")\n				db.queryS(\"INSERT INTO reltable (tipo,tabela1,tabela2) VALUES ('image','\" value \"','\" editimage \"');\")		\n			}\n		}else{\n			db.query(\"DELETE FROM reltable WHERE tipo='image' AND tabela1='\" iprefix selecteditem \"';\")\n			db.queryS(\"INSERT INTO reltable (tipo,tabela1,tabela2) VALUES ('image','\" iprefix selecteditem \"','\" editimage \"');\")		\n		}\n	    db.insertimage(source,editimage)\n	    loaditem()\n	   MsgBox, % \"a imagem foi inserida no modelo\"\n	  Gui,insertfromfile:destroy\n		return \n}\n\n\n\n;linkar(Tipo)\n\nlinkar(args)\n{\n	Global db, args1,GLOBAL_COLOR, bannerargs, TextOptions, Font\n	Global lb, selecteditem, mascaraant1\n	Static NewMascara, NewName, selecteditem1, tipo1, banner, pesquisarlin, PesqList\n\n	args1 := args\n	selecteditem := GetSelected(\"inserir1\",\"lv\")\n	selecteditem1 := args[\"mascaraant\"] . selecteditem,tipo1 := Tipo\n	gui,lb:New\n	owner:=args[\"owner\"]\n	if(owner != \"\")\n		Gui, lb:+owner%owner%\n	Gui, Color, %GLOBAL_COLOR%\n	Gui,Add,Picture,w450 h50 0xE vbanner \n	banner(BANNER_COLOR,banner,\"Linkar\")\n	Gui, Add, Edit, w440 r1 vpesquisarlin gpesquisarlin uppercase,\n	Gui, Add, ListView, xm y+5 w440 h400 vlb glb,tipo|tabela1|tabela2 \n	Gui, Add, Button, xm y+5 w100 gLinkar1, Linkar\n	Gui, Add, Button, x+5  w100 gCancelarL, Cancelar\n	Gui, Add, Button, x+5 w100 gundo_link, Desfazer Link\n	Gui, Show,, Linkar\n	PesqList := MontarLB(args[\"tipo\"],\"lb\",\"lb\")\n	LV_ModifyCol(1,150), LV_ModifyCol(2,150), LV_ModifyCol(3,150)\n	return\n\n	undo_link:\n	link_to_undo := GetSelectedRow(\"lb\",\"lb\")\n	;MsgBox, % \"DELETE FROM reltable WHERE tipo='\" . link_to_undo[1] . \"' AND tabela1='\" . link_to_undo[2] . \"';\" \n	db.query(\"DELETE FROM reltable WHERE tipo='\" . link_to_undo[1] . \"' AND tabela1='\" . link_to_undo[2] . \"';\")\n	Gui, lb:default \n	Gui, ListView, lb\n	LV_Delete(GetSelectedItems(\"lb\", \"lb\", \"number\"))\n	MsgBox, % \"O link foi desfeito!\"\n	return \n\n	pesquisarlin:\n	Gui, submit, nohide \n	for,each,value in PesqList{\n		Break\n	}\n	pesquisalv3(\"lb\", \"lb\", pesquisarlin, PesqList)\n	return \n\n	lb:\n	return \n\n	Linkar1:\n		result:=GetSelectedRow(\"lb\",\"lb\")\n		if(result=\"\")\n		{\n			MsgBox,64,, % \"selecione um item para continuar!\"\n			return \n		}\n		MsgBox, 4,,Tem certeza que deseja relacionar a tabela, a tabela antiga sera perdida.\n		IfMsgBox Yes\n		{\n			db.queryS(\"DELETE FROM reltable WHERE tipo='\" . args1[\"tipo\"] . \"' AND tabela1='\" . selecteditem1 . \"';\")\n			if(!db.exist(\"tipo,tabela1\",\"tipo='\" . result[1] . \"' AND tabela1='\" . selecteditem1 . \"'\",\"reltable\"))\n				db.insert(\"reltable\",\"(tipo,tabela1,tabela2)\",\"('\" . result[1] . \"','\" . selecteditem1 . \"','\" . result[3] . \"')\")\n		}else{\n			return \n		}\n	return\n\n	CancelarL:\n	Gui,lb:destroy\n	return \n}\n\nlinkar2(args)\n{\n	Global db,camptable,GLOBAL_COLOR,TextOptions,Font,BANNER_COLOR\n	Static selecteditem1,lb,tipo1,args1,pesquisarlin2,PesqList2,banner\n	wName:=args[\"window\"],lvName:=args[\"lv\"],selecteditem1:=args[\"mascaraant\"] . args[\"selecteditem\"],tipo1:=args[\"tipo\"]\n	args1:=args\n	gui,lb:New\n	owner:=args[\"owner\"]\n	if(owner!=\"\")\n		Gui,lb:+owner%owner%\n	;gui,lb:+toolwindow\n	Gui,color,%GLOBAL_COLOR%\n	Gui,Add,Picture,w560 h50 0xE vbanner \n	banner(BANNER_COLOR,banner,\"Linkar\")\n	Gui,add,edit,w440 r1 vpesquisarlin2 uppercase,\n	Gui, add, button, w100 x+5 gpesquisarlin2, Pesquisar\n	Gui, Add, ListView, w540 h320 xm vlb glb2,tipo|tabela1|tabela2 \n	;Gui, Add, GroupBox, x6 y360 w460 h80 , Opcoes\n	Gui, Add, Button,xm y+5 w100 h30 gLinkar2, Linkar\n	Gui, Add, Button,x+5 w100 h30 gCancelar2, Cancelar\n	Gui, Show, w560 h448, Linkar\n	LV_ModifyCol(1,200),LV_ModifyCol(2,200),LV_ModifyCol(3,200)\n	PesqList2 := MontarLB2(args)\n	return\n\n	pesquisarlin2:\n	Gui,submit,nohide \n	pesquisalv3(\"lb\",\"lb\",pesquisarlin2,PesqList2)\n	return \n\n	lb2:\n	return \n\n	Linkar2:\n		result:=object\n		result:=GetSelectedRow(\"lb\",\"lb\")\n		if(result=\"\")\n		{\n			MsgBox,64,, % \"selecione um item para continuar!\"\n			return \n		}\n		MsgBox, 4,,Tem certeza que deseja relacionar a tabela, a tabela antiga sera perdida.\n		IfMsgBox Yes\n		{\n			;MsgBox, % \"delete from  tipo  \" . tipo1 . \"   tabela1 \" . selecteditem1\n			if(result[1]=\"Campo\"){\n				camptable:=result[3]\n				;MsgBox, % \"camptable se tornou \" . camptable\n				loador(result[3])\n			}\n			;MsgBox, % \"DELETE FROM reltable WHERE tipo='\" . result[1] . \"' AND tabela1='\" . selecteditem1 . \"';\"\n			db.queryS(\"DELETE FROM reltable WHERE tipo='\" . result[1] . \"' AND tabela1='\" . selecteditem1 . \"';\")\n			if(!db.exist(\"tipo,tabela1\",\"tipo='\" . result[1] . \"' AND tabela1='\" . selecteditem1 . \"'\",\"reltable\")){\n				;MsgBox, % \"ira inserir tipo=\" result[1] \" tabela1 \" selecteditem1 \" tabela2 \" result[3]\n				db.insert(\"reltable\",\"(tipo,tabela1,tabela2)\",\"('\" . result[1] . \"','\" . selecteditem1 . \"','\" . result[3] . \"')\")\n				\n			}\n			closefunc:=args1[\"closefunc\"],%closefunc%(args1)\n		}else{\n			return \n		}\n		MsgBox,64,, % \"Campos linkados!!\"\n	return\n\n	Cancelar2:\n	Gui,lb:destroy\n	return \n\n\n}\n\nloador(camptable){      ; carrega o valor que foi inserido no linkar dos campos nas tabelas de ordem\n	Global db,octable,odctable,odrtable \n	db.createtable(octable,\"(Campos, PRIMARY KEY(Campos))\")\n	db.createtable(odctable,\"(Campos, PRIMARY KEY(Campos))\")\n	db.createtable(odrtable,\"(Campos, PRIMARY KEY(Campos))\")\n	for,each,value in list:=db.getvalues(\"Campos\",camptable){\n		db.insert(octable,\"(Campos)\",\"('\" . list[A_Index,1] . \"')\")\n		db.insert(odctable,\"(Campos)\",\"('\" . list[A_Index,1] . \"')\")\n		db.insert(odrtable,\"(Campos)\",\"('\" . list[A_Index,1] . \"')\")\n	}\n}\n\nMontarLB2(args)\n{\n	Global db\n	sql:=args[\"tipoquery\"]  ;tipo query sera um select que tera todos os tipo que podem ser escolhidos pelo usuario\n	rs := db.query(sql)\n	Gui,lb:default \n	Gui,listview,lb\n	PesqList:=[]\n	while(!rs.EOF){   \n	  col1 := rs[\"tipo\"] \n	  col2 := rs[\"tabela1\"]  \n	  col3 := rs[\"tabela2\"]\n	  PesqList[A_Index,1]:=col1 \n      PesqList[A_Index,2]:=col2\n      PesqList[A_Index,3]:=col3\n	  LV_Add(\"\",col1,col2,col3)\n	  rs.MoveNext()\n	}\n	rs.Close()\n	return PesqList\n}\n\nMontarLB(tipo,lb,window)\n{\n	Global db \n	sql:=\"SELECT tipo,tabela1,tabela2 FROM reltable WHERE tipo='\" . tipo . \"'\"\n	rs := db.query(sql)\n	Gui,%window%:default \n	Gui,listview,%lb%\n	PesqList:=[]\n	while(!rs.EOF){   \n	  col1 := rs[\"tipo\"] \n	  col2 := rs[\"tabela1\"]  \n	  col3 := rs[\"tabela2\"]\n	  LV_Add(\"\",col1,col2,col3)\n	  PesqList[A_Index,1]:=col1 \n      PesqList[A_Index,2]:=col2\n      PesqList[A_Index,3]:=col3\n	  rs.MoveNext()\n	}\n	rs.Close()\n	return PesqList\n}\n\nchooseyourversion(){\n	Global GLOBAL_COLOR,TAB_COLOR,BANNER_COLOR\n\n	gui,chooseyourversion:New\n	gui,chooseyourversion:+toolwindow -caption\n	Gui,add,picture,w200 h200 gdarkversion,bad.png\n	Gui,add,picture,x+5 w200 h200 glightversion,good.png\n	Gui,Show,,Escolha sua versao!\n	return \n\n	darkversion:\n	TAB_COLOR:=\"FFFFFF\"\n	GLOBAL_COLOR:=\"000000\"\n	BANNER_COLOR:=\"purple\"\n	;Gosub,continuetoloadtheprogram\n	return \n\n	lightversion:\n	TAB_COLOR:=\"000000\"\n	GLOBAL_COLOR:=\"ffffff\"\n	BANNER_COLOR:=\"blue\"\n	;Gosub,continuetoloadtheprogram\n	return \n}\n;renomear(table,field,window,lv,mascaraant)\nrenomear(args)\n{\n	Global db,args1,GLOBAL_COLOR,bannerargs,TextOptions,Font,BANNER_COLOR\n	Static NewMascara,NewName,selecteditem,banner\n	args1 := args\n	selecteditem := GetSelected(\"inserir1\",\"lv\") \n	result:=db.query(\"SELECT \" . args[\"field2\"] . \" FROM \" . args[\"table\"] . \" WHERE \" . args[\"field1\"] . \"='\" . selecteditem . \"'\")\n	if(selecteditem = field1) || (selecteditem = field2){\n		MsgBox,64,, % \"Selecione um item antes de continuar\"\n		return \n	}\n	Gui,renomear:New\n	owner := args[\"owner\"]\n	if(owner != \"\")\n		Gui,renomear:+owner%owner%\n	Gui,color,%GLOBAL_COLOR%\n	Gui,Add,Picture,w250 h50 0xE vbanner \n	banner(BANNER_COLOR,banner,\"Renomear\")\n	Gui, Add, Text, xm y+5 w70 h20 , Nome:\n	Gui, Add, Edit, xm y+5 w230 r1 vNewName uppercase,% selecteditem\n	Gui, Add, Text, xm y+5 w70 h20 , Mascara:\n	Gui, Add, Edit, xm y+5 w230 r1 vNewMascara uppercase,% result[args[\"field2\"]]\n	Gui, Add, Button, xm y+5 w100 h30 gsalvarr,&Salvar\n	Gui, Add, Button, x+5 w100 h30 gcancelarr,&Cancelar\n	Gui, Show,,Renomear\n	result.close()\n	return\n\n		salvarr:\n		Gui,submit,nohide\n		if(!NewName) || (!NewMascara) || (!selecteditem){\n			MsgBox,64,, % \"O nome e a mascara nao podem estar em branco!\"\n			return \n		}\n		db.rename(args1[\"field1\"] . \"= '\" . NewName . \"',\" . args1[\"field2\"] . \"='\" . NewMascara . \"'\",args1[\"field1\"] . \"='\" . selecteditem . \"';\",args1[\"table\"])\n		nName:=args1[\"mascaraant\"] . NewName\n		StringReplace,value,nName,%A_Space%,,All\n		nName2:=args1[\"mascaraant\"] . selecteditem \n		StringReplace,value2,nName2,%A_Space%,,All\n		db.rename(\"tabela1= '\" . value . \"'\",\"tabela1='\" . value2 . \"';\",\"reltable\")\n		db.loadlv(\"inserir1\",\"lv\",args1[\"table\"])\n		Gui,renomear:destroy\n		return \n	\n		cancelarr:\n		Gui,renomear:destroy \n		return \n} \n\nrenomear2(args)\n{\n	Global db \n	Global args1,selecteditem,NewName\n	Static NewMascara\n	args1:=args \n	selecteditem := GetSelected(args1[\"window\"],args1[\"lv\"])\n	args1[\"selecteditem\"] := selecteditem\n	if(selecteditem = field1) || (selecteditem = field2)\n	{\n		MsgBox,64,, % \"Selecione um item antes de continuar\"\n		return \n	}\n	gui,renomear:New\n	Gui,color,%GLOBAL_COLOR%\n	Gui, Add, Text, x7 y55 w70 h20 , Nome:\n	Gui, Add, Edit, x57 y45 w230 h30 vNewName uppercase,% selecteditem\n	Gui, Add, GroupBox, x-3 y-5 w300 h180 , Inserir\n	Gui, Add, Button, x72 y130 w100 h30 gsalvarr2,&Salvar\n	Gui, Add, Button, x182 y130 w100 h30 gcancelarr2,&Cancelar\n	Gui, Show,w309 h183,Renomear\n	return\n	\n		salvarr2:\n		Gui,submit,nohide\n		if(!NewName) || (!selecteditem)\n		{\n			MsgBox,64,, % \"O nome e a mascara nao podem estar em branco!\"\n			return \n		}\n		func := args1[\"func\"]\n		%func%(args1)\n		db.loadlv(args1[\"window\"],args1[\"lv\"],args1[\"loadtable\"],args1[\"loadfield\"])\n		Gui,renomear:destroy\n		return \n	\n		cancelarr2:\n		Gui,renomear:destroy \n		return \n} \n\nsalvarr1(args1){\n	Global db,NewName\n	\n	db.rename(args1[\"field2\"] . \"= '\" . NewName . \"'\",args1[\"field2\"] . \"='\" . args1[\"selecteditem\"] . \"';\",args1[\"camptable\"])\n	;db.rename(args1[\"field2\"] . \"= '\" . NewName . \"'\",args1[\"field2\"] . \"='\" . args1[\"selecteditem\"] . \"';\",args1[\"camptable\"])\n	;db.rename(args1[\"field2\"] . \"= '\" . NewName . \"'\",args1[\"field2\"] . \"='\" . args1[\"selecteditem\"] . \"';\",args1[\"camptable\"])\n	nName:=args1[\"mascaraant\"] . NewName\n	StringReplace,value,nName,%A_Space%,,All   \n	nName2:=args1[\"mascaraant\"] . args1[\"selecteditem\"] \n	StringReplace,value2,nName2,%A_Space%,,All \n	db.rename(\"tabela2= '\" . value . \"'\",\"tabela1='\" . value2 . \"';\",\"reltable\")\n	db.rename(\"tipo= '\" . NewName . \"'\",\"tipo='\" . args1[\"selecteditem\"] . \"';\",\"reltable\")\n}\n\nsalvarr2(args1){\n	Global db,NewName\n\n	db.rename(args1[\"field2\"] . \"= '\" . NewName . \"'\",args1[\"field2\"] . \"='\" . args1[\"selecteditem\"] . \"';\",args1[\"table\"])\n	MsgBox,64,, % \"Modificacao salva com sucesso!!\"\n}\n\n\ncopiar()\n{\n}\n\ninserir2(args)\n{\n	Global db,args1,GLOBAL_COLOR,bannerargs,TextOptions,Font,BANNER_COLOR,tvstring\n	Static updown1,lv,foto,banner\n	\n	args1:=args\n	Static edit1,edit2\n	Gui, inserir2:New\n	owner:=args[\"owner\"]\n	if(owner!=\"\")\n		Gui,inserir2:+owner%owner%\n	;Gui,inserir2:+toolwindow\n	Gui,color,%GLOBAL_COLOR%\n	Gui,Add,Picture,w250 h50 0xE vbanner \n	banner(BANNER_COLOR,banner,\"Inserir\")\n	Gui, Add, Text,xm y+5 w70 h20 , Nome:\n	Gui, Add, Edit,xm y+5 w230 h30 vedit1 r1 uppercase,\n	Gui, Add, Text, xm y+5 w70 h20 , Mascara:\n	Gui, Add, Edit, xm y+5 w230 h30 vedit2 r1 uppercase,Mascara Codigo\n	Gui, Add, Button, xm y+5  w100 h30 gsalvar,&Salvar\n	Gui, Add, Button, x+5  w100 h30 gcancelar,&Cancelar\n	Gui, Show,,Empresa-Alterar-Inserir\n	return\n			\n		salvar:\n		Gui,submit,nohide\n		if(!edit1) || (edit1=\"Nome Empresa\") || (edit2=\"Mascara Codigo\")\n		{\n			MsgBox,64,, % \"Nenhum dos valores podem estar em branco\"\n			return \n		}\n\n		db.createtable(args1[\"table\"],\"(\" . args1[\"field\"] . \", PRIMARY KEY(\" . args1[\"primarykey\"] . \"))\")\n		istring:=\"('\" . edit1 . \"','\" . edit2 . \"')\"\n		db.insert(args1[\"table\"],\"(\" . args1[\"field\"] . \")\",istring)\n		relcondition:=args1[\"relcondition\"]\n		if(relcondition){\n			if(!db.exist(\"tipo,tabela1\",\"tipo='\" . args1[\"tipo\"] . \"' AND tabela1='\" . args1[\"mascaraant\"] . edit1 . \"'\",\"reltable\"))\n				db.insert(\"reltable\",\"(tipo,tabela1,tabela2)\",\"('\" . args1[\"tipo\"] . \"','\" . args1[\"mascaraant\"] . edit1 . \"','\" . args1[\"mascaraant\"] . edit2 . args1[\"tipo\"] . \"')\")\n		}else{\n			;MsgBox,64,, % \"relcondition igual a false\"\n		}\n		db.loadlv(\"inserir1\",\"lv\",args1[\"table\"])\n		MsgBox,64,, % \"valores inseridos com sucesso!!\"\n		closefunc:=args1[\"closefunc\"]\n		%closefunc%(args)\n		return \n		\n		cancelar:\n		Gui,inserir2:destroy\n		return \n}\n\ninserir3(table,field,primarykey,tipo,mascaraant=\"\")\n{\n	Global db,GLOBAL_COLOR\n	Static lv3\n	Global table1,field1,primaryk1,tipo1,field3,mascaraant1\n	table1:=table,field1:=field,primaryk1:=primarykey,tipo1:=tipo,mascaraant1:=mascaraant\n	StringSplit,value,field,`,\n	field3:=value1\n	Gui,inserir3:New\n	Gui,color,%GLOBAL_COLOR%\n	Gui, Add, ListView, x32 y50 w320 h290 vlv3 altsubmit,\n	Gui, Add, GroupBox, x22 y20 w360 h340 ,Valores\n	Gui, Add, GroupBox, x12 y0 w670 h480 , Alterar\n	Gui, Add, GroupBox, x22 y370 w650 h100 , Alterar\n	Gui, Add, Button, x112 y410 w120 h30 ginserir3,&Incluir\n	Gui, Add, Button, x+5 y410 w120 h30 glinkar3, &Linkar\n	Gui, Add, Button, x+5 y410 w120 h30 gexcluir3, &Excluir\n	Gui, Show, w700 h492,Incluir-Bloqueio\n	db.loadlv(\"inserir3\",\"lv3\",table,field)\n	return\n\n	linkar3:\n	linkar(tipo1)\n	RETURN \n\n	inserir3:\n	Gui,submit,nohide\n	inserir4(table1,field1,primaryk1,tipo1,mascaraant1)\n	return \n\n	excluir3:\n\n	selecteditem:=GetSelected(\"inserir3\",\"lv3\")\n\n	MsgBox, 4,,Deseja apagar a empresa %selecteditem%?\n	IfMsgBox Yes\n	{\n		db.delete(table1,selecteditem,field3)\n		db.loadlv(\"inserir3\",\"lv3\",table1,field1)\n	}else{\n		return \n	}\n	return \n}\n\ncompararcamp(camptable,otable)\n{\n	Global db \n \n	sql:=\"SELECT Campos FROM \" . camptable\n	rs := db.query(sql)\n	while(!rs.EOF){   \n	  campvalue := rs[\"Campos\"]\n	  _exist:=FALSE\n	  sql:=\"SELECT Campos FROM \" . otable\n	  rs2 := db.query(sql) \n	  while(!rs2.EOF){\n	  	if(campvalue=rs2[\"Campos\"])\n	  		_exist:=TRUE\n	  	rs2.MoveNext()\n 	  }\n 	  rs2.Close()    \n 	  if(!_exist)\n 	  	db.insert(otable,\"(Campos)\",\"('\" . campvalue . \"')\")\n	  rs.MoveNext()\n	}\n	rs.Close()\n	;se um valor da tabela 2 nao estiver na 1 ,exclui\n	sql:=\"SELECT Campos FROM \" . otable\n	rs := db.query(sql)\n	while(!rs.EOF){   \n	  campvalue := rs[\"Campos\"]\n	  _exist := FALSE\n	  sql:=\"SELECT Campos FROM \" . camptable\n	  rs2 := db.query(sql) \n	  while(!rs2.EOF){\n	  	if(campvalue=rs2[\"Campos\"])\n	  		_exist:=TRUE\n	  	rs2.MoveNext()\n 	  }\n 	  rs2.Close()\n 	  if(!_exist)\n 	  	db.delete(otable,campvalue,\"Campos\")\n	  rs.MoveNext()\n	}\n	rs.Close()\n}\n\ninserir4(table,field,primaryk,tipo,mascaraant=\"\")\n{\n	Global db,selectmodel\n	\n	;MsgBox, % \"table \" . table . \"`nfield \" . field . \"`nprimaryk \" . primaryk . \"`ntipo \" . tipo\n	Static edit1\n	Global table1,field1,primaryk1,tipo1,mascaraant1\n	table1:=table,field1:=field,primaryk1:=primaryk,tipo1:=tipo,mascaraant1:=mascaraant\n	Gui, inserir4:New\n	Gui,color,%GLOBAL_COLOR%\n	Gui, Add, Text, x7 y55 w70 h20 , Nome:\n	Gui, Add, Edit, x57 y45 w230 h30 vedit1 r1 uppercase,\n	Gui, Add, GroupBox, x-3 y-5 w300 h180 , Inserir\n	Gui, Add, Button, x72 y130 w100 h30 gsalvar4,&Salvar\n	Gui, Add, Button, x182 y130 w100 h30 gcancelar4,&Cancelar\n	Gui, Show, w309 h200,Inserir-Bloqueio\n	return\n			\n		salvar4:\n		Gui,submit,nohide\n		if(!edit1)\n		{\n			MsgBox,64,, % \"Nenhum dos valores podem estar em branco\"\n			return \n		}\n		db.createtable(table1,\"(\" . field1 . \", PRIMARY KEY(\" . primaryk1 . \"))\")\n		istring:=\"('\" . edit1 . \"')\"\n		if(!db.exist(\"tipo,tabela1\",\"tipo='\" . tipo1 . \"' AND tabela1='\" . mascaraant1 . selectmodel . \"'\",\"reltable\"))\n		{\n			db.insert(\"reltable\",\"(tipo,tabela1,tabela2)\",\"('\" . tipo1 . \"','\" . mascaraant1 . selectmodel . \"','\" . mascaraant1 . edit2 . tipo1 . \"')\")\n		}\n		db.insert(table1,\"(\" . field1 . \")\",istring)\n		db.loadlv(\"inserir3\",\"lv3\",table1)\n		Gui,inserir4:destroy\n		return \n		\n		cancelar4:\n		Gui,inserir4:destroy\n		return \n}\n\n#include, lib\\promto_search.ahk\n#include, lib\\print_funcs.ahk\n#include, lib\\promto_xml.ahk\n#include, lib\\promto_json.ahk\n#include, lib\\gdip_all.ahk\n#include, lib\\promto_sql_mariaDB.ahk\n#include, models\\remover_item_ETF.ahk\n#include <promtolib>\n#include,lib\\json_parser.ahk\n#include,<SQL_new>\n#include, lib\\gerar_codigos.ahk\n#Include lib\\Crypt.ahk\n#Include lib\\CryptConst.ahk\n#Include lib\\CryptFoos.ahk\n#include, lib\\html-parser.ahk\n\n/*\n	Views\n*/\n#Include, views/reload_hashmask_view.ahk\n#Include, views/insert_cert_from_file_view.ahk\n#Include, views/cert_view.ahk\n#Include, views/rem_massa_view.ahk\n#Include, views/resize_image_folder_view.ahk\n#include, views/generate_xml_view.ahk\n#include, views/inserir_campos_view.ahk\n#include, views/inserir_ETF_view.ahk\n#include, views/inserir_modelo_view.ahk\n#include, views/shared/inserir_dialogo_2_fields.ahk\n#include, views/shared/inserir_imagem_view.ahk\n#include, views/shared/inserir_imagem_db_view.ahk\n#include, views/inserir_campo_esp_view.ahk\n#include, views/alterar_valores_campo_view.ahk\n#include, views/ordem_view.ahk\n#include, views/lista_de_codigos_view.ahk\n#include, views/inserir_bloqueio_view.ahk\n#include, views/db_ex_view.ahk\n#include, views/config_db_ex_view.ahk\n#include, views/inserir_db_ex_view.ahk\n#include, views/inserir_todos_view.ahk\n#include, views/inserir_valores_view.ahk\n#include, views/nova_conexao_view.ahk\n#include, views/inserir_val_view.ahk\n#include, views/estruturas_view.ahk \n#include, views/foto_individual_view.ahk\n#include, views/selecionar_campo_externo_view.ahk\n#include, views/linkar_modelos_view.ahk\n#include, views/delete_confirmation_view.ahk\n#include, views/manager_users_view.ahk\n#include, views/insert_user_view.ahk\n#include, views/edit_user_view.ahk\n#include, views/insert_mod_msg_view.ahk\n#include, views/change_status_view.ahk\n#include, views/list_options_view.ahk\n#include, views/show_status_result_view.ahk\n#include, views/generate_html_view.ahk\n\n\n\n/*\n	Controllers\n*/\n#Include, controllers/db_ex_checker_controller.ahk\n#Include, controllers/status_controller.ahk\n#Include, controllers/rem_massa_controller.ahk\n#include, controllers/db_ex_controller.ahk\n#include, controllers/inserir_valores_controller.ahk\n#include, controllers/inserir_bloqueio_controller.ahk\n#include, controllers/estruturas_controller.ahk\n#include, controllers/foto_individual_controller.ahk\n#include, controllers/delete_confirmation_controller.ahk\n#include, controllers/back_up_controller.ahk\n#include, controllers/update_controller.ahk\n#include, controllers/inserir_campos_controller.ahk\n#include, controllers/manager_users_controller.ahk\n\n\n/*\n	Model\n*/\n#include, models/generate_feed_model.ahk\n",
			"file": "Promto(Front-End)(Native).ahk",
			"file_size": 93228,
			"file_write_time": 130525118267367227,
			"settings":
			{
				"buffer_size": 90297,
				"line_ending": "Windows"
			}
		},
		{
			"file": "controllers/update_controller.ahk",
			"settings":
			{
				"buffer_size": 196,
				"line_ending": "Windows"
			}
		},
		{
			"file": "controllers/back_up_controller.ahk",
			"settings":
			{
				"buffer_size": 460,
				"line_ending": "Windows"
			}
		},
		{
			"file": ".gitignore",
			"settings":
			{
				"buffer_size": 20,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/mcruz/Documents/GitHub/Sublime-Projects/feed.sublime-project",
			"settings":
			{
				"buffer_size": 146,
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/manager_users_view.ahk",
			"settings":
			{
				"buffer_size": 1019,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "insert_user_view(){\n  Global db, GLOBAL_COLOR, SMALL_FONT\n  Static user_name, user_password, priv_combo\n\n  /*\n    Gui init\n  */\n  Gui, inserir_user_view:New\n  Gui, inserir_user_view:+ownermanager_users_view\n  Gui, Font, s%SMALL_FONT%, %FONT%\n  Gui, Color, %GLOBAL_COLOR%\n  \n  /*\n    Opcoes\n  */\n  Gui, Add, Groupbox, x10 y10 w160 h200, Opcoes\n  Gui, Add, Text, xp+5 yp+15 w150, Nome\n  Gui, Add, Edit, y+5 w150 vuser_name,\n  Gui, Add, Text, y+5 w150 , Senha\n  Gui, Add, Edit, y+5 w150 vuser_password password,\n  Gui, Add, Text, y+5 w150, Privilegios\n  Gui, Add, Combobox, y+5 w150 vpriv_combo, Leitura|Edicao\n  Gui, Add, Button, y+5 w150 h30 gsave_new_user, Salvar\n  Gui, Show,, Inserir usuario\n  return\n\n  save_new_user:\n  Gui, Submit, Nohide\n  if(user_name = \"\" || user_password = \"\" || priv_combo = \"\"){\n    MsgBox, 64, Sucesso, % \"Nenhum dos valores do formulario podem estar em branco! \" \n    return \n  }\n  \n  if(db.Usuario.new_user(user_name, user_password, priv_combo)){\n    Gui, manager_users_view:default\n    Gui, Listview, users_lv\n    LV_Add(\"\", user_name, user_password, priv_combo)\n    LV_ModifyCol()\n  }else{\n    return 0  \n  }\n  return\n}",
			"file": "views/insert_user_view.ahk",
			"file_size": 1177,
			"file_write_time": 130392106960000000,
			"settings":
			{
				"buffer_size": 1151,
				"line_ending": "Windows"
			}
		},
		{
			"file": "models/generate_feed_model.ahk",
			"settings":
			{
				"buffer_size": 761,
				"line_ending": "Windows",
				"name": "dfdfd"
			}
		},
		{
			"contents": "class GenerateJSONFeed{\n	generate_feed(){\n		Global db\n		FileDelete, % \"promto_feed_JSON\"\n		this.obj := {}\n		this.load_log()		\n	}\n\n	load_log(){\n	 Global db	 \n	 this.obj.log := []\n	 this.insert_CRUD()\n	 this.obj.max_index := this.obj.log.maxindex()\n	 MsgBox, % \"max index \" this.obj.log.maxindex()\n	 this.save_file() \n	}\n\n	insert_CRUD(){\n		Global db\n		For each, value in list := db.get_values(\"*\", \"CRUD\"){\n			hash := {\n		 		(JOIN \n		 			\"usuario\": list[A_Index, 2], \"tipo\":    list[A_Index, 3],\n		 			\"item\":    list[A_Index, 4], \"data\": 	 list[A_Index, 5],\n		 			\"hora\":     list[A_Index, 6], \"msg\":list[A_Index, 7],\n		 			\"prodkey\": list[A_Index, 8]\n		 		)}\n		 	this.obj.log.insert(hash)\n		}\n	}\n\n	save_file(){\n		JSON_save(this.obj, \"promto_feed_JSON.json\")\n	}\n}\n",
			"file": "models/generate_feed_model.ahk",
			"file_size": 796,
			"file_write_time": 130525185522667193,
			"settings":
			{
				"buffer_size": 763,
				"line_ending": "Windows"
			}
		},
		{
			"file": "views/cert_view.ahk",
			"settings":
			{
				"buffer_size": 1331,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "estruturas_view(){\n	Global\n\n	/* \n		Gui init\n	*/\n\n	Gui,massaestrut:New\n	Gui, Font,s%SMALL_FONT%, %FONT%\n	Gui,massaestrut:+ownerM\n	Gui, Color, %GLOBAL_COLOR%	\n	Gui, Add, Edit, x415 gpesquisarlv w400 r1 vpesquisarlv uppercase ,Pesquisar!!!\n	Gui, Add, Treeview, xm y+5 w400 h300 vtv1 gtvstrut,\n	Gui, Add, Listview, x+5 w400 h300 vlv1 checked gestrutlv,Codigos| Descricao Completa| Descricao Resumida | Descricao Ingles\n	Gui, Add, Treeview, x+5 w400 h300 vtv2,\n	Gui, Add, Treeview, xm y+5 w400 h300 vtvaddmass gtvaddmass,\n	Gui, Add, Listview, x+5 w400 h300 vlvaddmass checked glvaddmass,Codigos|DR\n	Gui, Add, Listview, x+5 w400 h300 vlvaddmass2,Codigos \n	Gui, Add, Button, xm w100 h30 gimprimirestrut,Imprimir Estruturas!!\n	Gui, Add, Button, x+250  w100 h30 gaddmassa, Add em Massa\n	Gui, Add, Button, x+5  w100 h30 gaddquantidademassa, Add Quantidade em Massa\n	Gui, Add, Button, x+5 w100 h30 gremmassa, Remover em Massa \n	Gui, Add, Button, x+5 w100 h30 gmarctodos, Marc.Todos!\n	Gui, Add, Button, x+5 w100 h30 gdesmarctodos,Des.Marc.Todos!\n	Gui, Add, Button, x+5 w100 h30 gexcluirestrut, Excluir estrutura!\n	Gui, Add, Button, x+5 w100 h30 gexcluiritemestrut,Excluir item!\n	Gui, Add, Button, x+5 w100 h30 gexportarestrut,Exportar estruturas!! \n	TvDefinition =\n	(\n		%ETF_TVSTRING%\n	)\n	Gui, Treeview, tv1\n	CreateTreeView(TvDefinition)\n	Gui, Treeview, tvaddmass\n	CreateTreeView(TvDefinition)\n	Gui, Show,, Estruturas!!\n	return\n\n	imprimirestrut:\n	return\n\n	pesquisarlv:\n	Gui, Submit, Nohide\n	search.LV.any_word_search(\"massaestrut\", \"lv1\", pesquisarlv)\n	return\n\n	tvstrut:\n	tv_strut(\"massaestrut\", \"tv1\", \"lv1\")\n	return\n\n	estrutlv:\n	estrut_lv()\n	return\n\n	excluirestrut:\n	remove_strut()\n	return \n\n	excluiritemestrut:\n	Gui, Submit, Nohide\n	TV_GetText(componente, TV_GetSelection())\n	parent := TV_GetParent(TV_GetSelection())\n	TV_GetText(item, parent)\n	if(remove_componente(item, componente)){\n		TV_Delete(TV_GetSelection())	\n	}\n	Return\n\n	exportarestrut:\n	export_strut()\n	return\n	\n	addmassa:\n	add_componente_marcado()\n	return \n\n	addquantidademassa:\n	add_quantidade_em_massa()\n	return \n\n	remmassa:\n	rem_massa_view()\n	return\n\n	marctodos:\n	check_all(\"massaestrut\", \"lv1\")\n	return \n\n	desmarctodos:\n	uncheck_all(\"massaestrut\", \"lv1\")\n	return \n\n	tvaddmass:\n	tv_strut(\"massaestrut\", \"tvaddmass\", \"lvaddmass\")\n	return\n\n	lvaddmass:\n	return \n}\n\nestruturas_view()",
			"file": "views/estruturas_view.ahk",
			"file_size": 2437,
			"file_write_time": 130464453468084387,
			"settings":
			{
				"buffer_size": 2335,
				"line_ending": "Windows"
			}
		},
		{
			"file": "views/linkar_modelos_view.ahk",
			"settings":
			{
				"buffer_size": 1893,
				"line_ending": "Windows"
			}
		},
		{
			"file": "views/selecionar_campo_externo_view.ahk",
			"settings":
			{
				"buffer_size": 2488,
				"line_ending": "Windows"
			}
		},
		{
			"file": "views/shared/inserir_imagem_db_view.ahk",
			"settings":
			{
				"buffer_size": 3156,
				"line_ending": "Windows"
			}
		},
		{
			"file": "controllers/estruturas_controller.ahk",
			"settings":
			{
				"buffer_size": 8833,
				"line_ending": "Windows"
			}
		},
		{
			"file": "views/config_db_ex_view.ahk",
			"settings":
			{
				"buffer_size": 694,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "db_ex_view(){\n	Global\n\n	if(current_connection_value = \"\"){\n		MsgBox, 16, Erro, % \"E preciso selecionar uma conexao externa antes de prosseguir!\" \n		return\n	}\n\n	info := get_item_info(\"M\", \"MODlv\")\n	\n	cod_table := info.empresa[2] info.tipo[2] info.familia[2] info.subfamilia[2] info.modelo[2] \"Codigo\"\n	Gui,dbex:new\n	Gui,font,s%SMALL_FONT%,%FONT%\n	Gui, color, %GLOBAL_COLOR%\n	Gui, dbex:+ownerM\n	Gui, add, edit, w900 r1  vpesquisadbex gpesquisadbex uppercase,\n	Gui, add, listview, w1400 h400 y+5 checked vlvdbex, Codigo|Descricao Completa|Descricao Resumida|Descricao Ingles\n	Gui, add, button, w100 h30 y+5 ginserirdbex,Inserir\n	Gui, add, button, w100 h30 x+5 gmarctodos_dbex,Marc.todos \n	Gui, add, button, w100 h30 x+5 gdesmarctodos_dbex,Desm.todos\n	Gui, add, button, w100 h30 x+5 ginserirvalores,Inserir Valores\n	Gui, add, button, w100 h30 x+5 gconfigdbex,Configurar.\n	Gui, add, button, w100 h30 x+5 gexport_code_list_to_file, Exportar para arquivo\n	Gui, Font, s15 cGreen\n	Gui, add, Text, xm y+5 w800 h30 vconnection_status, % \"Conectado a \" current_connection_value\n	\n	GuiControl, -Redraw, lvdbex\n	table := db.load_table_in_array(cod_table)\n	search.LV.set_searcheable_list(table)\n	for, each, value in table{\n		if(table[A_Index, 1] = \"\")\n			Continue\n		value1 := table[A_Index, 1]\n		%value1% := {}\n	}\n	GuiControl, -Redraw, lvdbex\n	for, each, value in [\"NCM\", \"UM\", \"ORIGIGEM\", \"CONTA\", \"TIPO\", \"GRUPO\", \"IPI\", \"LOCPAD\"]\n		LV_InsertCol(each+4,\"\",value)\n	GuiControl, +Redraw, lvdbex\n	db.load_lv(\"dbex\", \"lvdbex\", cod_table)\n	LV_ModifyCol(1, 120), LV_ModifyCol(2, 550), LV_ModifyCol(4, 50) \n	Gui, Show,, adicionar db externo!\n	return \n\n	check_if_exist_in_external_db:\n	check_if_exist_in_external_db()\n	return \n\n	export_code_list_to_file:	\n	info := get_item_info(\"M\", \"MODlv\")\n	export_code_list_to_file(getvaluesLV(\"dbex\",\"lvdbex\"), info.familia[2] info.subfamilia[2], selectmodel)\n	return \n\n	inserirtodos:\n	inserir_todos_view()\n	return \n\n	configdbex:\n	config_db_ex_view()\n	return \n\n	inserirdbex:\n	inserir_db_ex_view()\n	return \n\n 	pesquisadbex:\n 	Gui, submit, nohide\n 	search.LV.any_word_search(\"dbex\",\"lvdbex\", pesquisadbex)\n 	return \n\n	inserirvalores:\n	inserir_valores_view()\n	return \n\n	exportarparabanco:\n	gosub, configdbex\n	Gui, exportarparadb:New\n	Gui,font, s%SMALL_FONT%, %FONT%\n	Gui,add,button, w100 gexportarparadb, Exportar para db\n	Gui,Show,, Exportar Para DB\n	return \n\n	marctodos_dbex:\n	check_all(\"dbex\", \"lvdbex\")\n	return\n\n	desmarctodos_dbex:\n	uncheck_all(\"dbex\", \"lvdbex\")\n	return\n}",
			"file": "views/db_ex_view.ahk",
			"file_size": 2578,
			"file_write_time": 130519937606859009,
			"settings":
			{
				"buffer_size": 2489,
				"line_ending": "Windows"
			}
		},
		{
			"file": "views/inserir_valores_view.ahk",
			"settings":
			{
				"buffer_size": 1409,
				"line_ending": "Windows"
			}
		},
		{
			"file": "controllers/inserir_valores_controller.ahk",
			"settings":
			{
				"buffer_size": 1841,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "inserir_db_ex_view(){\n	Global\n\n	values := GetCheckedRows(\"dbex\",\"lvdbex\")\n	if(values[1,1] = \"\"){\n		MsgBox, % \"Marque um item antes de continuar.\"\n		return \n	}\n	Gui, bloquear_outros:New\n	Gui, font,s%SMALL_FONT%,%FONT%\n	Gui, Add, Text,,Deseja bloquear os outros items da lista?\n	Gui, Add, Button,xm y+5 w100 h30 gbloquear_outros_items, Sim\n	Gui, Add, Button,x+5 w100 h30 gnao_bloquear_outros_items, Nao\n	Gui, Show,,Bloquear outros items?\n	return\n\n	bloquear_outros_items:\n	bloquear_outros_items := True\n	Gui, bloquear_outros:destroy\n	inserirdbexterno(values)\n	return \n\n	nao_bloquear_outros_items:\n	bloquear_outros_items := False\n	Gui, bloquear_outros:destroy\n	inserirdbexterno(values)\n	Return \n}",
			"file": "views/inserir_db_ex_view.ahk",
			"file_size": 718,
			"file_write_time": 130505278950000840,
			"settings":
			{
				"buffer_size": 692,
				"line_ending": "Windows"
			}
		},
		{
			"file": "controllers/db_ex_controller.ahk",
			"settings":
			{
				"buffer_size": 4678,
				"line_ending": "Windows"
			}
		},
		{
			"file": "doc/PromtoLib.doc",
			"settings":
			{
				"buffer_size": 3025,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "\n\n/*\n	get_lv_in_array(window_name, lv_name, number_of_columns = 1)\n	pega todos os items de uma determinada listview em\n	um array \n*/\n\nClass OTTK\n{\n	__New(filePath){\n		file:=FileOpen(filePath,\"r\")\n\n		value:=file.Read()\n		this.path:=filePath\n		StringSplit,fileLine,value,`n,%A_Space%%A_Tab%`r\n		Loop,%fileLine0%\n		{\n			i+=1\n			if(fileLine%A_Index%!=\"\")\n			{\n					StringSplit,value,fileLine%A_Index%,;\n					Loop,%value0%\n					{\n						this[i,A_Index]:=value%A_Index%\n					}\n			}\n		}\n	}\n	\n	delete(value)\n	{\n		for,k,v in this\n		{\n			for,w,z in this[k]\n			{\n				if(this[k,w]=value)\n				{\n				  this[k].remove(w)	\n				}	\n			}\n		}\n		this.write()\n	}\n\n	deleterow(row){\n		this.remove(row)\n		this.write()\n	}\n	deletevalue(row,column){\n		this[row].remove(column)\n		this.write()\n	}\n	\n	rename(ovalue,nvalue)\n	{\n		i:=0\n		while(this[A_Index,1]!=\"\")\n		{\n			i+=1\n			while(this[i,A_Index]!=\"\")\n			{\n				if(this[i,A_Index]=ovalue)\n				{\n					this[i,A_Index]:=nvalue\n				}\n			}\n		}\n		this.write()\n	}\n	\n	append(value)\n	{\n		i=0\n		while(this[A_Index,1]!=\"\")\n		{\n			i+=1\n		}\n		this[i+1,1]:=value\n		this.write()\n	}\n	\n	write()\n	{\n		fPath:=this.path\n		FileDelete,% this.path\n		write:=FileOpen(fPath,\"w\")\n		for,k,v in this\n		{\n			for,w,z in this[k]\n			{\n				if(w=1)\n				{\n						write.Write(this[k,w])\n				}else{\n						write.Write(\";\" . this[k,w])\n				}\n			}\n			write.Write(\"`r`n\")	\n		}\n		write.close()\n	}\n\n	exist(value,column)\n	{\n		returnValue:=0\n		while(this[A_Index,column]!=\"\")\n			{\n				if(value=this[A_Index,column])\n					{\n						returnValue:=1\n					}\n			}	\n			return returnValue\n	}\n\n	clear()\n	{\n		while(this[A_Index,1]!=\"\")\n		{\n			this.remove(A_Index)\n		}\n	}\n\n	checkduplicated()\n	{\n		MsgBox, % \"CheckDuplicated\"\n		valores:=object()\n		duplicatedValues:=\"\"\n\n		i:=0\n		while(this[A_Index,1]!=\"\")\n		{\n			i+=1	\n			while(this[i,A_Index]!=\"\")\n			{\n				_naoinserir:=0\n				for,index,k in valores\n				{\n					if(k=this[i,A_Index])\n					{\n						_naoinserir:=1\n						if(duplicatedValues=\"\")\n						{\n							duplicatedValues.=k	\n						}Else{\n							duplicatedValues.=\";\" . k\n						}\n							\n					}\n				}\n				if(_naoinserir=0)\n				{\n					valores.insert(this[i,A_Index])	\n				}\n			}\n				\n		}\n		return duplicatedValues\n	}\n}\n\n/*\n	Funcao que conta o numero de codigos de determinado modelo \n	e insere a quantidade na janela principal\n*/\nnumber_of_items(info){\n 	Global db\n	\n	codigos := db.load_table_in_array(get_prefix_from_info(info) \"Codigo\")\n	Gui, M:default\n	GuiControl,, numberofitems, % codigos.maxindex()\n}\n\n/*\n Retorna o prefixo \n baseada nas informacoes do info\n*/\nget_prefix_from_info(info){\n	prefixo := info.empresa[2] info.tipo[2] info.familia[2] info.subfamilia[2] info.modelo[2]\n	return prefixo\n}\n\n/*\n	Carrega todos os modelo na listview da janela principal\n*/\nload_all_mod(info){\n	Global db \n\n	code_table := get_prefix_from_info(info) \"codigo\"\n	code_list_array := db.find_items_where(\"codigos like '%\" info.modelo[2]  \"%'\", code_table)\n	Gui, M:default\n	GuiControl,, numberofitems, % code_list_array.maxindex() \n	load_lv_from_array([\"codigo\", \"descricao\", \"descricao completa\", \"descricao em ingles\"], code_list_array, \"M\", \"all_mod_lv\", [\"100\", \"200\"])	\n}\n\n/*\n	Removes determinadas colunas de um array \n	multidimensional\n*/\ntrim_array(array, columns_to_keep, number_of_columns){\n	new_array := []\n	new_array_column := 0\n	loop, % number_of_columns{\n		column := A_Index\n		for, each, column_to_keep in columns_to_keep{\n			if(column = column_to_keep ){\n				new_array_column++\n				loop, % array.maxindex(){\n					if(array[A_Index, column] = \"\")\n						Continue\n					new_array[A_Index, new_array_column] := array[A_Index, column]\n				}\n			}\n		}\n	}\n	Return new_array\n}\n\nclear_lv(window, lv){\n	Gui,	%window%:default\n	Gui, listview, %lv%\n	LV_Delete()\n}\n\n/*\n	Limpa as informacoes sobre o \n	modelo da tabela principal\n*/\nclear_main_info(){\n	Global change_ptcode\n	Gui, M:default\n	Gui, Listview, MODlv\n	LV_Delete()\n	GuiControl,, numberofitems,\n	GuiControl,, status_picture, % \"img\\gray_glossy_ball.png\"\n	GuiControl,, status_info, \n	if(change_ptcode){\n		change_ptcode := 0\n		GuiControl, , ptcode, % \"img\\promtologo.png\"\n	}\n	Gui, Listview, all_mod_lv\n	LV_Delete()\n	GuiControl,, mod_info,\n	GuiControl,, msg_info,\n}\n\n/*\n	Funcao que muda a imagem de \n	determinado controle \n*/\n\n\nLV_MoveRowfam(wname,lvname,moveup = true) {\n	gui,%wname%:Default\n    gui,listview,%lvname%\n   ; Original by diebagger (Guest) from:\n   ; http://de.autohotkey.com/forum/viewtopic.php?p=58526#58526\n   ; Slightly Modifyed by Obi-Wahn\n   If moveup not in 1,0\n      Return   ; If direction not up or down (true or false)\n   while x := LV_GetNext(x)   ; Get selected lines\n      i := A_Index, i%i% := x\n   If (!i) || ((i1 < 2) && moveup) || ((i%i% = LV_GetCount()) && !moveup)\n      Return   ; Break Function if: nothing selected, (first selected < 2 AND moveup = true) [header bug]\n            ; OR (last selected = LV_GetCount() AND moveup = false) [delete bug]\n   cc := LV_GetCount(\"Col\"), fr := LV_GetNext(0, \"Focused\"), d := moveup ? -1 : 1\n   ; Count Columns, Query Line Number of next selected, set direction math.\n   Loop, %i% {   ; Loop selected lines\n      r := moveup ? A_Index : i - A_Index + 1, ro := i%r%, rn := ro + d\n      ; Calculate row up or down, ro (current row), rn (target row)\n      Loop, %cc% {   ; Loop through header count\n         LV_GetText(to, ro, A_Index), LV_GetText(tn, rn, A_Index)\n         ; Query Text from Current and Targetrow\n         LV_Modify(rn, \"Col\" A_Index, to), LV_Modify(ro, \"Col\" A_Index, tn)\n         ; Modify Rows (switch text)\n      }\n      LV_Modify(ro, \"-select -focus\"), LV_Modify(rn, \"select vis\")\n      If (ro = fr)\n         LV_Modify(rn, \"Focus\")\n   }\n}\n\n\n\n\n\nloadlv(hash){\n	Global Listiv\n	Gui, inserirval:default\n	Gui, Listview, lviv2\n	LV_Delete()\n	Listiv := []\n	for, each, value in %hash%[\"valor\"]{\n		if(%hash%[\"valor\",A_Index] = \"\")\n			Continue\n		Listiv[A_Index,1] := %hash%[\"valor\",A_Index]\n		Listiv[A_Index,2] := %hash%[\"descricao\",A_Index]\n		LV_Add(\"\", %hash%[\"valor\",A_Index], %hash%[\"descricao\", A_Index])\n	}\n	lv_modifycol(1,200)\n}\n\npesquisalvmod(wname, lvname, string, List){    ;funcao de pesquisa na listview modificada!!!!\n	Global \n\n	Gui,%wname%:default\n  Gui, Listview, %lvname%\n  GuiControl, -Redraw, %lvname%\n  Gui, Submit, NoHide\n  resultsearch := [] \n  If (string=\"\"){ \n      LV_Delete()\n	for,each,value in List{\n      	codname:=List[A_Index,1]\n      	if(codname = \"\")\n      		continue\n          LV_Add(\"\",List[A_Index,1],List[A_Index,2],List[A_Index,3], List[A_Index, 4], %codname%[\"NCM\"], %codname%[\"UM\"], %codname%[\"ORIGEM\"], %codname%[\"TCONTA\"], %codname%[\"TIPO\"], %codname%[\"GRUPO\"], %codname%[\"IPI\"], %codname%[\"LOCPAD\"])\n      }    \n  }Else{\n      for,each,value in List{\n          i++\n          string2:=List[A_Index,1] List[A_Index,2]\n          IfInString,string2,%string%\n          {\n              resultsearch.insert(i)\n          }\n      }\n      i:=0\n      LV_Delete()\n      for,each,value in resultsearch{\n      	codname := List[value,1]\n    	  if(codname = \"\")\n    		 continue\n        \n        LV_Add(\"\", List[value,1], List[value,2], List[A_Index,3], List[A_Index, 4], %codname%[\"NCM\"], %codname%[\"UM\"], %codname%[\"ORIGEM\"], %codname%[\"TCONTA\"], %codname%[\"TIPO\"], %codname%[\"GRUPO\"], %codname%[\"IPI\"], %codname%[\"LOCPAD\"])\n      }\n  }\n  GuiControl, +Redraw,%lvname%\n  LV_Modify(1, \"+Select\")\n}\n\n/*\n	Carrega a verificacao do certificado \n	na janela de mudanca de status\n*/\nload_verification_cert(info){\n	Global db, checked_with_cert\n\n	if(db.Certificado.verification_exists(get_prefix_from_info(info))){\n		Gui, change_status_view:default\n		GuiControl,, checked_with_cert, 1\n	}\n}\n\n/*\n	Pega os items de determinada listview em um \n	array \n*/\nget_lv_in_array(window_name, lv_name, number_of_columns = 1){\n	Gui, %window_name%:default\n	GUi, listview, %lv_name%\n	returned_array := []\n	Loop, % LV_GetCount()\n	{\n    row := A_Index\n    loop, % number_of_columns{\n    	LV_GetText(Text, row, A_Index)\n    	returned_array[row, A_Index] := Text	\n    }\n	}\n	return returned_array\n}\n/*\n	Funcao que forma a arvore de items ate \n	a familia \n*/\nget_tree(table,x,nivel,masc){\n	Global db, ETF_TVSTRING, field, ETF_hashmask\n\n	x+=1, nivel.=\"`t\"\n	For each, value in list := db.getvalues(\"*\", table){\n		if(field[x] = \"\"){\n			Break\n		}\n		ETF_TVSTRING .= \"`n\" . nivel . list[A_Index, 1] \"			\" list[A_Index, 2] 		\n		ETF_hashmask[list[A_Index, 1]] := list[A_Index, 2] 	\n		result := db.query(\"SELECT tabela2 FROM reltable WHERE tipo='\" . field[x] . \"' AND tabela1='\" . masc . list[A_Index,1] . \"'\")\n		new_table := result[\"tabela2\"]\n		result.close()\n		if(new_table)\n			get_tree := get_tree(new_table, x, nivel, masc . list[A_Index, 2])\n	}\n	return\n}\n\nget_tabela_campo_esp(campo, info){\n	Global db\n\n	tabela1 := info.empresa[2] info.tipo[2] info.familia[2] info.subfamilia[2] info.modelo[2] info.modelo[1]\n	StringReplace,s_campo_sem_espaco, campo,%A_Space%,,All\n	tabela_campos_especificos := db.Modelo.get_tabela_campo_esp(s_campo_sem_espaco, tabela1)\n	return tabela_campos_especificos\n}\n\n\nget_tabela_ordem(tipo, info){\n	Global db\n	;MsgBox, % \"get tabela ordem\"\n	if(tipo = \"prefixo\"){\n		tabela_ordem := info.empresa[2] info.tipo[2] info.familia[2] info.subfamilia[2] info.modelo[2] \"prefixo\"\n	}else if(tipo = \"oc\"){\n		tabela1 := info.empresa[2] info.tipo[2] info.familia[2] info.subfamilia[2] info.modelo[2] info.modelo[1]\n	 	tabela_ordem := db.get_reference(tipo, tabela1)\n	}else if(tipo = \"odr\"){\n		tabela1 := info.empresa[2] info.tipo[2] info.familia[2] info.subfamilia[2] info.modelo[2] info.modelo[1]\n	 	tabela_ordem := db.get_reference(tipo, tabela1)\n	}else if(tipo = \"odi\"){\n		tabela1 := info.empresa[2] info.tipo[2] info.familia[2] info.subfamilia[2] info.modelo[2] info.modelo[1]\n	 	tabela_ordem := db.get_reference(tipo, tabela1)\n	}else if(tipo = \"odc\"){\n		tabela1 := info.empresa[2] info.tipo[2] info.familia[2] info.subfamilia[2] info.modelo[2] info.modelo[1]\n	 	tabela_ordem := db.get_reference(tipo, tabela1)\n	}\n	return tabela_ordem \n}\n\n/*\n	funcao que pega o prefix da \n	tabela\n*/\nget_promto_mask(){\n	Global ETF_hashmask\n	\n	maska := []\n	Gui, Treeview, main_tv\n	id := TV_GetSelection()\n	TV_GetText(selected_in_tv, id)  \n	Loop\n	{\n		TV_GetText(text, id)\n		if(A_Index = 1)\n			selected2 := text\n		if ETF_hashmask[text] != \"\"\n			maska.insert(ETF_hashmask[text])	\n		id := TV_GetParent(id)\n		if !id \n			Break\n	}\n	newarray := reversearray(maska)\n	mask := \"\"\n	for,each,value in newarray{\n		if(A_Index < newarray.maxindex())\n			mask .= value\n	} \n	return mask\n}\n\n/*\n	Funcao que pega valores \n	referentes a treeview da janela principal\n*/\nget_tv_info(type, ignore_error = 0, window = \"M\", treeview = \"main_tv\", starting_id = \"\", same_window = \"\"){\n	Global ETF_hashmask\n\n\n	if(same_window != \"\"){\n		tv_level := get_tv_level(same_window, treeview)	\n	}else{\n		tv_level := get_tv_level(window, treeview)	\n	}\n	\n\n	if(tv_level = \"\"){\n		MsgBox,16,Erro, % \"Nao existia nenhum item selecionado na treeview\"\n	}\n	if(type = \"Subfamilia\" && tv_level != 4){\n		if(ignore_error = 0)\n			MsgBox,16,Erro, % \"a selecao nao esta em nivel suficiente para retornar valores de familia\"\n	}\n	if(type = \"Familia\" && tv_level != 3 && tv_level != 4){\n		if(ignore_error = 0)\n			MsgBox,16,Erro, % \"a selecao nao esta em nivel suficiente para retornar valores de familia\"\n	}\n	if(type = \"Tipo\" && tv_level < 2){\n		if(ignore_error = 0)\n			MsgBox,16,Erro, % \"a selecao nao esta em nivel suficiente para retornar valores de tipo\"\n	}\n\n	return_values := []\n	if(same_window = \"\"){\n		Gui, %window%:Default\n	}else{\n		Gui, %same_window%:Default\n	}\n	\n	Gui, Treeview, %treeview%\n\n	if(starting_id = \"\"){\n		id := TV_GetSelection()\n	}else{\n		id := starting_id \n		tv_level--\n	}\n	\n\n	if(type = \"Subfamilia\"){\n		if(tv_level = 4){\n			nome := get_item_from_tv(id, treeview)\n			return_values.nome := nome\n			return_values.mascara := ETF_hashmask[nome]	\n		}\n	}\n\n	if(type = \"Familia\"){\n\n		if(tv_level = 4){\n			parent_id := TV_GetParent(id)\n			nome := get_item_from_tv(parent_id, treeview)\n			return_values.nome := nome\n			return_values.mascara := ETF_hashmask[nome]\n		}\n		if(tv_level = 3){\n			nome := get_item_from_tv(id, treeview)\n			return_values.nome := nome\n			return_values.mascara := ETF_hashmask[nome]	\n		}\n	}\n\n	if(type = \"Tipo\"){\n		\n		if(tv_level = 4){\n			super_id := TV_GetParent(id)\n			parent_id := TV_GetParent(super_id)\n			nome := get_item_from_tv(parent_id, treeview)\n			return_values.nome := nome\n			return_values.mascara := ETF_hashmask[nome]\n		}\n\n		if(tv_level = 3){\n			parent_id := TV_GetParent(id)\n			nome := get_item_from_tv(parent_id, treeview)\n			nome := get_item_from_tv(parent_id, treeview)\n			return_values.nome := nome\n			return_values.mascara := ETF_hashmask[nome]\n		}\n\n		if(tv_level = 2){\n			nome := get_item_from_tv(id, treeview)\n			return_values.nome := nome\n			return_values.mascara := ETF_hashmask[nome]	\n		}\n	}\n\n	if(type = \"Empresa\"){\n		if(tv_level = 4){\n			ultra_id := TV_GetParent(id)\n			super_id := TV_GetParent(ultra_id)\n			parent_id := TV_GetParent(super_id)\n			nome := get_item_from_tv(parent_id, treeview)\n			return_values.nome := nome\n			return_values.mascara := ETF_hashmask[nome]\n		}\n\n		if(tv_level = 3){\n			parent_id := TV_GetParent(id)\n			super_parent_id := TV_GetParent(parent_id)\n			nome := get_item_from_tv(super_parent_id, treeview)\n			return_values.nome := nome\n			return_values.mascara := ETF_hashmask[nome]\n		}\n\n		if(tv_level = 2){\n			parent_id := TV_GetParent(id)\n			nome := get_item_from_tv(parent_id, treeview)\n			return_values.nome := nome\n			return_values.mascara := ETF_hashmask[nome]\n		}\n\n		if(tv_level = 1){\n			nome := get_item_from_tv(id, treeview)\n			return_values.nome := nome\n			return_values.mascara := ETF_hashmask[nome]\n		}\n	}\n	return return_values\n}\n\n/*\n	Pega o item da treeview \n	e da parse no texto para pegar o nome\n*/\nget_item_from_tv(id, treeview = \"main_tv\", window = \"M\"){ \n	Gui, TreeView, %treeview%\n	TV_GetText(nome, id)\n	StringSplit, nome, nome, >, >\n	StringTrimRight, nome, nome1, 1\n	return nome\n}\n\n\n/*\n	Retorna o prefixo do determinado\n	modelo na ordem devida\n*/\nget_prefixbloq(info){\n	Global db \n\n	table := info.empresa[2] info.tipo[2] info.familia[2] info.subfamilia[2] info.modelo[2] \"prefixo\"\n	ordem_a := db.load_table_in_array(table)\n	return_value := \"\"\n	for, each, value in ordem_a{\n		return_value .= ordem_a[A_Index, 2]\n	}\n	return return_value\n}\n	\n/*\n	recebe um hash com os valores que serao \n	inseridos no db externo. \n*/\ninserirdbexterno(values){\n	Global \n	local itemvalue\n\n	/*\n		Pega o prefixo do codigo\n	*/\n	prefixbloq := \"\"\n	prefixbloq := get_prefixbloq(info) \n\n	/*\n		testa a conecao\n	*/\n	if(IsObject(sigaconnection)){\n	    ;MsgBox,64,,% \"A connexao esta funcionando!!!\"\n	}else{\n	    MsgBox,64,,% \"A conexao falhou!! confira os parametros!!\"\n	}\n\n	/*\n		pega o numero do ultimo registro\n	*/\n	rs := sigaconnection.OpenRecordSet(\"SELECT TOP 1 B1_COD,B1_DESC,R_E_C_N_O_ FROM \" base_value \" ORDER BY R_E_C_N_O_ DESC\")\n	R_E_C_N_O_TBI := rs[\"R_E_C_N_O_\"]\n	rs.close()\n\n	/*\n		Carrega um array com todos os items desbloqueados\n		atualmente no sistema.\n	*/\n	if(bloquear_outros_items = True){\n		bloqlist := []\n		sql := \n		(JOIN\n			\"SELECT B1_COD FROM \" base_value \" WHERE B1_COD LIKE '\" prefixbloq \"%'\"\n			\"AND B1_MSBLQL != '1'\"\n		)\n		rs := sigaconnection.OpenRecordSet(sql)\n		while(!rs.EOF){   \n			CODIGO := rs[\"B1_COD\"] \n			bloqlist.Insert(CODIGO)\n			rs.MoveNext()\n		}\n		rs.close()\n	}\n\n	GARANT := 2,XCALCPR := 0,B1_LOCALIZ := \"N\"\n	progress(values.maxindex())\n\n	/*\n	Inicia o loop que ira inserir todos \n	os novos items no dbex\n	*/\n\n	for,each,value in values{\n		itemvalue := values[A_Index,1]\n		updateprogress(\"Inserindo valores: \" itemvalue, 1)\n\n		/*\n		Confere se o item a ser inserido \n		ja existe no dbex\n		*/\n		table := sigaconnection.Query(\"Select B1_COD from \" base_value \" WHERE B1_COD LIKE '\" itemvalue \"'\")\n		columnCount := table.Columns.Count()\n		_exists := 0\n		for each,row in table.Rows{\n			Loop, % columnCount{\n				if(row[A_index] != \"\")\n					_exists:=1\n				else\n					_exists:=0\n			}\n		}\n		table.close()\n\n		/*\n		Caso exista cria um update\n		*/\n\n		if(_exists = 1){\n			/*\n				Faz a relacao entre o campo e o valor do campo \n				em um hash. \n			*/\n\n			/*\n				B1_USERLGI\n			*/\n\n			field_values := {\n			(JOIN\n				B1_XDESC: values[A_Index,2], B1_DESC: values[A_Index,3], B1_XDESCIN: values[A_Index,4],\n				B1_POSIPI: values[A_Index,5], B1_UM: values[A_Index,6],\n				B1_ORIGEM: values[A_Index,7], B1_CONTA: values[A_Index,8],\n				B1_TIPO: values[A_Index,9], B1_GRUPO: values[A_Index,10], \n				B1_IPI: values[A_Index,11], B1_LOCPAD: values[A_Index,12], B1_XGRUPO: values[A_Index, 10], \n				B1_GARANT: GARANT, B1_XCALCPR: XCALCPR, B1_MSBLQL: \"2\", B1_USERLGI: A_UserName,\n				B1_LOCALIZ: \"N\", B1_CODBAR: itemvalue\n			)}\n		\n			/*\n			Faz um loop por todos os campos e so insere os que\n			tem algum valor preenchido\n			*/\n			if(itemvalue = \"\"){\n				MsgBox, % \"Um dos codigos estavam em branco!\"\n				return \n			}\n			sql := \"UPDATE \" base_value \" SET B1_COD='\" itemvalue \n			for field, value in field_values{\n					/*\n						Se o valor para o campo nao estiver em branco \n						o nome do campo e o valor sao incluidos no update\n						*/\n					if(value != \"\"){\n						sql .= \"',\" field \"='\" value\n					}\n			}\n			sql .= \"' WHERE B1_COD='\" itemvalue \"';\"\n		}else{\n			/*\n				Caso nao exista cria um insert\n			*/\n			\n			R_E_C_N_O_TBI++\n\n			sql:=\n			(JOIN\n				\"INSERT INTO \" base_value \" (\"\n					\"B1_COD,\"\n					\"B1_XDESC,\"\n					\"B1_DESC,\"\n					\"B1_XDESCIN,\"\n					\"B1_POSIPI,\"\n					\"B1_UM,\"\n					\"B1_ORIGEM,\"\n					\"B1_CONTA,\"\n					\"B1_TIPO,\"\n					\"B1_GRUPO,\"\n					\"B1_XGRUPO,\"\n					\"B1_IPI,\"\n					\"B1_LOCPAD,\"\n					\"B1_GARANT,\"\n					\"B1_XCALCPR,\"\n					\"B1_LOCALIZ,\"\n					\"B1_USERLGI,\"\n					\"B1_CODBAR,\"\n					\"R_E_C_N_O_) VALUES ('\"\n					itemvalue \"','\"\n					values[A_Index,2] \"','\"\n					values[A_Index,3] \"','\"\n					values[A_Index,4] \"','\" \n					values[A_Index,5] \"','\" \n					values[A_Index,6] \"','\" \n					values[A_Index,7] \"','\" \n					values[A_Index,8] \"','\" \n					values[A_Index,9] \"','\"\n					values[A_Index,10] \"','\"\n					values[A_Index,10] \"','\" \n					values[A_Index,11] \"','\" \n					values[A_Index,12] \"','\" \n					GARANT \"','\" \n					XCALCPR \"','\"\n					\"N','\" \n					A_UserName \"','\"\n					itemvalue \"','\"\n					R_E_C_N_O_TBI \"')\"\n			)\n		}\n		\n		/*\n		Roda a query\n		*/\n		sigaconnection.Query(sql)\n	}	\n	if(bloquear_outros_items = True){\n		for,each,value in bloqlist{\n			if(!MatHasValue(values,value)){\n					sigaconnection.Query(\"UPDATE \" base_value \" SET B1_MSBLQL='1' WHERE B1_COD='\" value \"';\")\n				}else{\n					sigaconnection.Query(\"UPDATE \" base_value \" SET B1_MSBLQL='2' WHERE B1_COD='\" value \"';\")\n				}\n		} \n	}\n	gui,progress:destroy\n	MsgBox,64,,% \"Os valores foram inseridos no db externo!!\" \n	info := get_item_info(\"M\", \"MODlv\")\n	change_status_view(info)\n}\n\nget_tv_id(window, treeview){\n	Gui, %window%:Default\n	Gui, Treeview, %treeview%\n	id := TV_GetSelection()\n	return id\n}\n\nclear_prev_status(){\n	Gui, M:default\n	GuiControl, , consistency_picture_tot , % \"img\\gray_glossy_ball.png\"\n	GuiControl, , consistency_picture_mac , % \"img\\gray_glossy_ball.png\"\n}\n\n;#############GETREFERENCE################################################\ngetreferencetable(tipo,table){\n	Global db\n\n	StringReplace, tipo, tipo, %A_Space%,,All\n	result := db.query(\"SELECT tabela2 FROM reltable WHERE tipo='\" . tipo . \"' AND tabela1='\" . table . \"'\")\n	returnvalue := result[\"tabela2\"]\n	result.close()\n	return	returnvalue\n}\n\n/*\n	Verifica se ja existe conexao de um \n	determinado nome com uma mascara\n*/\ncheck_if_ETF_exist(nome, mascara_antiga){\n	Global ETF_hashmask\n	mascara := ETF_hashmask[nome]\n	if(mascara != \"\"){\n		return mascara\n	}else{\n		return mascara_antiga\n	}\n}\n\n/*\n	Pega todas as informacoes sobre determinado item\n	baseado no valor de uma listview\n*/\n\nget_item_info(window, lv, treeview = \"main_tv\", starting_id = \"\", same_window = \"\"){\n	Global empresa, tipo, familia, modelo\n	\n	empresa := get_tv_info(\"Empresa\", 0, \"M\", treeview, starting_id, same_window)\n	tipo := get_tv_info(\"Tipo\", 1, \"M\", treeview, starting_id, same_window)\n	familia := get_tv_info(\"Familia\", 1, \"M\", treeview, starting_id, same_window)\n	subfamilia := get_tv_info(\"Subfamilia\", 1, \"M\", treeview, starting_id, same_window)\n\n\n	/*\n		Pega o modelo selecionado na listview\n	*/\n\n	model := GetSelectedRow(window, lv)\n	modelo := []\n	modelo.nome := model[1]\n	modelo.mascara := model[2]\n\n	;MsgBox, % \"## modelo \" model[1] \" mascara \" model[2]\n\n	/*\n		Coloca todas as informacoes em \n		um unico hash \n	*/\n	info := {}\n	info.empresa[1] := empresa.nome\n	info.empresa[2] := empresa.mascara\n	info.tipo[1] := tipo.nome\n	info.tipo[2] := tipo.mascara\n	info.familia[1] := familia.nome\n	info.familia[2] := familia.mascara\n	info.subfamilia[1] := subfamilia.nome\n	info.subfamilia[2] := subfamilia.mascara\n	info.modelo[1] := modelo.nome\n	info.modelo[2] := modelo.mascara\n\n	return info 	\n}\n\n/*\n	Funcao que verifica se existe algum valor em branco em um\n	hash de valores\n*/\ncheck_if_blank(hash){\n	for, each, value in hash{\n		if(value = \"\"){\n			MsgBox, 16, Erro, % \"O valor \" each \" estava em branco!\"\n			return	\n		}\n	}\n}\n	\n\n/*\n Carrega a imagem do modelo na janela principal\n*/\nload_model_image_in_main_window(info){\n	Global db, change_ptcode\n\n	code := info.empresa[2] info.tipo[2] info.familia[2] info.subfamilia[2] info.modelo[2] info.modelo[1]\n	image_name_value := db.Imagem.get_image_full_path(code)\n	if(image_name_value = \"\"){\n		image_name_value := \"img\\sem_foto.jpg\" \n	}\n	change_ptcode := 1\n	GuiControl,, ptcode, % image_name_value  \n}\n\n/*\n	Carrega a formacao do codigo na janela principal\n*/\nload_formation_in_main_window(info){\n	Global db\n	\n	/*\n		Inicia o gdi\n	*/\n	newgdi({w:710,h:350})\n\n	/*\n	 Cria os blocos com os nomes dos prefixos\n	*/\n	panel_color := \"coolblue\" \n	text_panel_color := \"00ff00\"\n	bloq_w := 65\n	bloq_h := 50\n	prefix_table := info.empresa[2] info.tipo[2] info.familia[2] info.subfamilia[2] info.modelo[2] \"prefixo\"\n	prefix_values := db.load_table_in_array(prefix_table)\n	x := 10\n	y := 10 \n	if(prefix_values.maxindex() = 3){\n		fields := [\"Empresa\", \"Familia\" , \"Modelo\"]\n	}else{\n		fields := [\"Tipo\", \"Empresa\", \"Familia\" , \"Modelo\"]\n	}\n\n	for, each, value in fields{\n		if(value = \"\")\n			Continue\n		panel({x:x, y:y, w: bloq_w, h: bloq_h, color: panel_color, text: value, textsize: 12, boardsize: 0})\n		x += bloq_w + 5\n	}\n\n	/*\n		Cria os blocos com os nomes dos campos\n	*/\n	tabela1 := info.empresa[2] info.tipo[2] info.familia[2] info.subfamilia[2] info.modelo[2] info.modelo[1]\n	oc_table := db.get_reference(\"oc\", tabela1)\n	;MsgBox, % \"oc table \" oc_table\n	oc_values := db.load_table_in_array(oc_table)\n	campos_sem_espaco := []\n	for, each, value in oc_values{\n		oc_name := oc_values[A_Index, 2]\n		if(oc_name = \"\")\n			Continue\n		panel({x:x, y:y, w: bloq_w, h: bloq_h, color: panel_color, text: oc_name, textsize: 8, boardsize: 0})\n		StringReplace, oc_name, oc_name, %A_Space%,, All\n		campos_sem_espaco.insert(oc_name)\n		x += bloq_w + 5\n	} \n 	\n	/*\n		Cria os blocos com os valores dos prefixos\n	*/\n	x := 10\n	y += 80\n	for, each, value in prefix_values{\n		current_prefix := prefix_values[A_Index, 2]\n		if(current_prefix = \"\")\n			Continue\n		panel({x:x,y:y, w: bloq_w, h: bloq_h,color: panel_color,text: current_prefix, textsize: 20, boardsize: 0})\n		x += bloq_w + 5\n	} \n\n	/*\n		Cria os blocos com os valores dos campos\n	*/\n	for, each, value in campos_sem_espaco{\n		;MsgBox, % \"valor ser espaco \" value\n		campo_table := db.get_reference(value, tabela1)\n		;MsgBox, % \"campo table \" campo_table\n		if(campo_table = \"\")\n			Continue\n		campo_values := db.load_table_in_array(campo_table)\n		if(campo_values[1, 1] = \"\")\n			Continue\n		panel({x:x, y:y, w: bloq_w, h: bloq_h, color: panel_color, text: 	campo_values[1, 1], textsize: 20, boardsize: 0})\n		x += bloq_w + 5\n	}	\n	savetofile(\"img\\formation.png\")\n	Gui, M:Default\n	GuiControl,, fmcode, % \"img\\formation.png\" \n}\n\n/*\n	Carrega o logo na janela principal\n*/\nload_logo_in_main(){\n	image_source := \"img\\promtologo.png\"\n	show_image_and_code(image_source, 0)\n}\n	\n\n/*\n	Pega o modelo selecionado em certa list_view\n*/\nget_selected_model(window, lv){\n	model := GetSelectedRow(window, lv)\n	if(model[1] = \"Modelos\" || model[1] = \"\")\n		return \n	modelo := []\n	modelo.nome := model[1]\n	modelo.mascara := model[2]\n\n	return modelo\n}\n		\n\n/*\n	funcao que busca o nivel da tv \n*/\nget_tv_level(window, tv){\n	Gui, %window%:default\n	Gui, treeview, %tv%\n	id := TV_GetSelection()\n	count := 0\n	Loop{\n		count++\n		id := TV_GetParent(id)\n		if !id \n			Break	\n	}\n	return count\n}\n\n;############ funcao que chama a janela de carregamento ###################################\ncarregandologo(){\n	Global \n	;GC1:=\"grey\"\n	;GC2:=\"darkgrey\"\n	;GC3:=\"lightgrey\"\n	;GC4:=\"darkgrey\"\n	;GC5:=\"orange\"\n	If !pToken := Gdip_Startup()\n	{\n	    MsgBox, 48, gdiplus error!, Gdiplus failed to start. Please ensure you have gdiplus on your system\n	    ExitApp\n	}\n	Gui, carregandologo: -Caption +E0x80000 +LastFound +OwnDialogs +Owner +AlwaysOnTop\n	Gui, carregandologo: Show, NA\n	hwnd1 := WinExist()\n	sw:=A_ScreenWidth,sh:=A_ScreenHeight\n	logow:=sw*0.17,logoh:=sh*0.19\n	promtologo([GC1,GC2,GC3,GC4,GC5],logow,logoh,0)\n	savetofile(\"logopequeno.png\")\n	loadintowindow(\"logopequeno.png\",hwnd1)\n	_cog:=0\n	;SetTimer,carregandoaction,500\n	return 		\n}\n\ngetcolors(colorname){\n	colors:=[]\n	;lightblue:=75c2d4\n	;blue:=3f8c9e\n	;darkblue:=235c73\n	;75c2d4\n	;ff00ff\n	;oldblue colors[1]:=\"0xff1e90ff\",colors[2]:=\"0xff0949e9\"\n	if(colorname=\"blue\")\n		colors[1]:=\"0xff2661dd\",colors[2]:=\"0xff1941A5\"\n	if(colorname=\"black\")\n		colors[1]:=\"0xff000000\",colors[2]:=\"0xff000000\"\n	if(colorname=\"red\")\n		colors[1]:=\"0xFFF90101\",colors[2]:=\"0xFFA50101\"\n	if(colorname=\"yellow\")\n		colors[1]:=\"0xFFF2B50F\",colors[2]:=\"0xFFFFCC11\"\n	if(colorname=\"green\")\n		colors[1]:=\"0xFF00933B\",colors[2]:=\"0xFF00533B\"\n	if(colorname=\"lightblue\")\n		colors[1]:=\"0xff75c2d4\",colors[2]:=\"0xff3f8c9e\"\n	if(colorname=\"floralwhite\")\n		colors[1]:=\"0xfffffaf0\",colors[2]:=\"0xfffffaf0\"\n	if(colorname=\"ghostwhite\")\n		colors[1]:=\"0xfff8f8ff\",colors[2]:=\"0xfff8f8ff\"\n	if(colorname=\"darkblue\")\n		colors[1]:=\"0xff1e3364\",colors[2]:=\"0xff1e3364\"\n	if(colorname=\"pink\")\n		colors[1]:=\"0xffff00ff\",colors[2]:=\"0xffff00ff\"\n	if(colorname=\"darkgrey\")\n		colors[1]:=\"0xff545454\",colors[2]:=\"0xffA4A4A4\"\n	if(colorname=\"grey\")\n		colors[1]:=\"0xffC0C0C0\",colors[2]:=\"0xffffffff\"\n	if(colorname=\"lightgrey\")\n		colors[1]:=\"0xffAEAEAE\",colors[2]:=\"0xffCECECE\"\n	if(colorname=\"white\")\n		colors[1]:=\"0xffffffff\",colors[2]:=\"0xffffffff\"\n	if(colorname=\"nocolor\")\n		colors[1]:=\"0x00ffffff\",colors[2]:=\"0x00ffffff\"\n	if(colorname=\"verydarkblue\")\n		colors[1]:=\"0xff102E37\",colors[2]:=\"0xff162f3E\"\n	if(colorname=\"turquoise\")\n		colors[1]:=\"0xff2BBBD8\",colors[2]:=\"0xff2FBFDF\"\n	if(colorname=\"lightorange\")\n		colors[1]:=\"0xffF78D3F\",colors[2]:=\"0xffFD8F3F\"\n	if(colorname=\"nocolor\")\n		colors[1]:=\"0x00ffffff\",colors[2]:=\"0x00ffffff\"\n	if(colorname=\"darkgreen\")\n		colors[1]:=\"0xff009A31\",colors[2]:=\"0xff009A31\"\n	if(colorname=\"limegreen\")\n		colors[1]:=\"0xff84CF96\",colors[2]:=\"0xff84CF96\"\n	if(colorname=\"verylightgreen\")\n		colors[1]:=\"0xffC6E7CE\",colors[2]:=\"0xffC6E7CE\"\n	if(colorname=\"coolgreen\")\n		colors[1]:=\"0xff669900\",colors[2]:=\"0xff225500\"\n	if(colorname=\"coolblue\")\n		colors[1]:=\"0xff0099FF\",colors[2]:=\"0xff0055AA\"\n	if(colorname=\"cooldarkblue\")\n		colors[1]:=\"0xff0033CC\",colors[2]:=\"0xff000088\"\n	if(colorname=\"orange\")\n		colors[1]:=\"0xffff3311\",colors[2]:=\"0xffff7722\"\n	if(colorname=\"purple\")\n		colors[1]:=\"0xff9933CC\",colors[2]:=\"0xff5511aa\"\n	return colors\n}\n\n\n;################## load window #####################################   ;atualiza a janela de carregamento\nloadintowindow(imagepath,hwnd1){\n	pBitmap := Gdip_CreateBitmapFromFile(imagepath)\n	;If !pBitmap\n	;{\n	;    MsgBox, 48, File loading error!, Could not load the image specified\n	;    ExitApp\n	;}\n	Width := Gdip_GetImageWidth(pBitmap), Height := Gdip_GetImageHeight(pBitmap)\n	hbm := CreateDIBSection(Width, Height)\n	hdc := CreateCompatibleDC()\n	obm := SelectObject(hdc, hbm)\n	G := Gdip_GraphicsFromHDC(hdc)\n	Gdip_SetInterpolationMode(G, 7)\n	Gdip_DrawImage(G, pBitmap,0,0, Width, Height, 0, 0, Width, Height)\n	UpdateLayeredWindow(hwnd1, hdc,(A_ScreenWidth//2)-(Width//2),(A_ScreenHeight//2)-(Height),Width,Height)\n	SelectObject(hdc, obm)\n	DeleteObject(hbm)\n	DeleteDC(hdc)\n	Gdip_DeleteGraphics(G)\n	Gdip_DisposeImage(pBitmap)\n	Return\n}\n;##############destroy carregando lib#########################\ndestroycarregandologo(){\n	gui,carregandologo:destroy\n	;SetTimer,carregandoaction,Off\n	return\n}\n;##########################Showimageandcode################################################\nshow_image_and_code(image, with_desc = 1){\n	Global\n	\n	;MsgBox, % \"show image and code\"\n	newgdi({w:850,h:280})\n	image := Gdip_CreateBitmapFromFile(image)\n	w := Gdip_GetImageWidth(image), h := Gdip_GetImageHeight(image)\n	Gdip_DrawImage(G,image,10,10,250,250,0,0,w,h)\n	if(text = \"\"){\n\n		/*\n			Pega a descricao \n		*/\n		if(with_desc){\n			desc_ := db.Modelo.get_desc(info)\n			StringSplit, desc_, desc_ ,|,\n			descricao_model := desc_1\n			already_logo := false\n		}else{\n			if(already_logo)\n				return\n			descricao_model := \"\"\n			already_logo := true\n		}\n\n		/*\n			Printa a descricao\n		*/\n		panel({x:265 ,y:10,w:550,h:250,text2:descricao_model,text2size:textsize,color: \"coolblue\",boardsize: 0})\n	}else{\n		panel({x:265 ,y:10,w:550,h:250,text2:text,text2size:textsize,color: \"coolblue\",boardsize: 0})\n	}\n	FileDelete, \"img/simpleplot.png\"  \n	Gdip_SaveBitmapToFile(pBitmap,\"img/simpleplot.png\")\n	Gdip_DisposeImage(pBitmap)\n	Gdip_DisposeImage(image)	\n	Gui, M:default \n	Guicontrol,,ptcode,img/simpleplot.png\n}\n\n;#########################PLOTPTCODE#########################################################\nplotptcode(prefixpt,prefixpt2,modelpt,_showcode=0,iwidth=820,iheight=1076){\n	global\n	camptable:=prefixpt modelpt \"oc\"\n	;loop utilizado para determinar o tamanho da foto.\n	for,each,value in listcount:=db.getvalues(\"Campos\",camptable){\n		campnamecount:=listcount[A_Index,1]\n		StringReplace,campnamecount,campnamecount,%A_Space%,,All\n		result:=db.iquery(\"SELECT CODIGO FROM \" prefixpt modelpt campnamecount \";\")\n		count:=result.Rows.Count()\n		if(count>countprev)\n			countprev:=count\n	}\n	result.close()\n	iheight:=300\n	iheight+=countprev*90\n	newgdi({w:iwidth,h:iheight})\n	;panel({x:0,y:0,w:iwidth,h:iheight,color: \"white\"})\n	image := Gdip_CreateBitmapFromFile(\"image.png\")\n	Width := Gdip_GetImageWidth(image), Height :=Gdip_GetImageHeight(image)\n	Gdip_DrawImage(G, image,10,10,250,250,0,0,Width,Height)\n	table:=db.query(\"SELECT descricao FROM \" prefixpt modelpt \"Desc;\")\n	panel({x: 265 , y: 10 ,w:550,h:250,text2:table[\"descricao\"],text2size: 40,text2color:\"000000\",textcolor:\"000000\",color: \"nocolor\",boardsize: 0})\n	panel({x:10,y: 265,w: 90,h: 80,text2:prefixpt2,color: \"nocolor\",boardsize: 0,textcolor:\"000000\",text2color:\"000000\"})\n	panel({x:105,y: 265,w: 90,h: 80,text2:modelpt,color: \"nocolor\",boardsize: 0,textcolor:\"000000\",text2color:\"000000\"})\n	ix:=200,iy:=265\n	for,each,value in list:=db.getvalues(\"Campos\",camptable){\n		campname:=list[A_Index,1]\n		StringReplace,campname,campname,%A_Space%,,All\n		result:=db.query(\"SELECT tabela2 FROM reltable WHERE tipo='\" campname \"' AND tabela1='\" prefixpt modelpt selectmodel \"'\")\n		camplist:=result[\"tabela2\"]\n		for,each,value in list2:=db.getvalues(\"CODIGO,DR\",camplist){\n			if(A_Index=1){\n				i2y:=iy\n				panel({x:ix,y:i2y,w: 90,h: 80,text:list2[A_Index,2],text2y:40,text2:list2[A_Index,1],color: \"nocolor\",boardsize: 0,textcolor:\"000000\",text2color:\"000000\"})\n			}else{\n				i2y+=85 \n				panel({x:ix,y:i2y,w: 90,h: 80,text:list2[A_Index,2],text2y:40,text2:list2[A_Index,1],color: \"nocolor\",boardsize: 0,textcolor:\"000000\",text2color:\"000000\"})\n			}	 \n		} 	\n		ix+=100\n	} \n	FileDelete,testeplot.png  \n	Gdip_SaveBitmapToFile(pBitmap,A_WorkingDir \"\\temp\\\" prefixpt2 modelpt \"grupo.png\")\n	Gdip_DisposeImage(pBitmap)\n	Gdip_DisposeImage(image)\n	if(_showcode=1)\n		run,% A_WorkingDir \"\\temp\\\" prefixpt2 modelpt \"grupo.png\"\n	return \n}\n\n/*\n	Funcao especifica usada na insercao do modelo \n*/\nchange_info(v_info){\n	Global\n\n	e_info := []\n	e_info.empresa[2] := empresa.mascara\n	e_info.tipo[2] := tipo.mascara\n	e_info.familia[2] := familia.mascara\n	e_info.subfamilia[2] := v_info.subfamilia[2]\n	e_info.modelo[2] := v_info.modelo[2]\n\n	e_info.empresa[1] :=  empresa.nome\n	e_info.tipo[1] := tipo.nome\n	e_info.familia[1] := familia.nome\n	e_info.subfamilia[1] := v_info.subfamilia[1]\n	e_info.modelo[1] := v_info.modelo[1]\n\n	return e_info\n}\n\nexistindb(connection, sql){  ;connection fora da classe sql \n	if(!IsObject(connection)){\n	 	MsgBox,16, Erro,% \"A conexao falhou, confira os parametros\"\n	 	return\n	}\n	tableexist := connection.Query(sql)\n	columnCount := tableexist.Columns.Count()\n	for each,row in tableexist.Rows{\n		Loop, % columnCount{\n			if(row[A_index]!=\"\"){\n				returnvalue := True\n				Break\n			}else{\n				returnvalue := False\n				Break\n			}\n		}\n	}\n	tableexist.close()\n	return returnvalue\n}\n\nplot_pt_code_list(){\n	global\n	;## calcula o tamanho do arquivo final ##.\n	newgdi({w:680,h:items_to_plot.maxindex()*170})\n	panel({x:0,y:0,w:680,h:items_to_plot.maxindex()*170,color: \"white\",boardcolor: \"0x00000000\"})\n	y := 10  \n	for,each,item in items_to_plot{\n		prefixpt := EmpresaMascara AbaMascara FamiliaMascara items_to_plot[A_Index,2] \n		result := db.query(\"SELECT tabela2 FROM reltable WHERE tipo='image' AND tabela1='\" EmpresaMascara AbaMascara FamiliaMascara items_to_plot[A_Index,2] items_to_plot[A_Index,1] \"'\") \n		model_image := result[\"tabela2\"]\n		result.close()\n		IfnotExist,% A_WorkingDir \"\\img\\\" model_image \".png\"\n		{\n			model_image := db.load_image_to_file(\"\",\"\",model_image)\n		}\n		image := Gdip_CreateBitmapFromFile(A_WorkingDir \"\\img\\\" model_image \".png\")\n		Width := Gdip_GetImageWidth(image), Height := Gdip_GetImageHeight(image)\n		Gdip_DrawImage(G,image,10,y,100,100,0,0,Width,Height)\n		Gdip_DisposeImage(image)\n		table := db.query(\"SELECT descricao FROM \" prefixpt \"Desc;\")\n		panel({x: 110 , y: y ,w:550,h:100,text2:table[\"descricao\"],text2size: 20,text2color:\"000000\",textcolor:\"000000\",color: \"nocolor\",boardsize: 0})\n		updateprogress(\"Imprimindo : \" prefixpt items_to_plot[A_Index,1],1)\n		y += 120\n	}\n	Gdip_SaveBitmapToFile(pBitmap,A_WorkingDir \"\\temp\\\" FamiliaName \".png\")\n	Gdip_DisposeImage(pBitmap)\n	run,% A_WorkingDir \"\\temp\\\" FamiliaName \".png\"\n	return \n}\n\nremove_t(code){\n	StringLeft,testprefix,code,3\n	if(testprefix=\"mpt\")\n		StringReplace,code,code,MPT,MP, All    ;SUBSTITUI O MPT POR MP\n	if(testprefix=\"mod\")\n		StringReplace,code,code,MODT,MOD, All    ;SUBSTITUI O MODT POR MOD\n	return code\n}\n\nload_cert_status(info){\n	Global db \n\n	tabela1 := get_prefix_from_info(info) info.modelo[1]\n	rel_value := db.find_items_where(\" tipo = 'certificado' AND tabela1 = '\" tabela1 \"'\", \"reltable\")\n	cert_values := db.find_items_where(\" modelo ='\" rel_value[1, 3] \"'\", \"certificados\")\n	if(cert_values[1, 1] != \"\"){\n		expiration_date := cert_values[1, 5]\n		StringLeft, expiration_date, expiration_date, 8\n		StringLeft, year, expiration_date, 4\n		StringTrimLeft, sub_exp, expiration_date, 4\n		StringLeft, month, sub_exp, 2\n		StringRight, day, expiration_date, 2\n		Gui, M:default\n		GuiControl, , cert_status, % \"Vencimento certificado: \" day \"/\" month \"/\" year	\n	}else{\n		GuiControl, , cert_status, % \"\"\n	}\n}\n\n\nexport_code_list_to_file(code_list,family_name,model_name){	\n	if(!code_list || !model_name){\n		MsgBox,64,,% \"A lista de modelos ou o nomde do modelo estava em branco!\"\n		Return\n	}\n	IfnotExist,% A_WorkingDir \"\\temp\\lists\\\" model_name \n	{\n		FileCreateDir, %  A_WorkingDir \"\\temp\\lists\\\" model_name\n	}	\n	FileDelete,% A_WorkingDir \"\\temp\\lists\\\" model_name \"\\\" family_name model_name \".csv\"\n	fields_to_insert:=\n	(JOIN\n		\"B1_COD\"\n		\";B1_XDESC\"\n		\";B1_DESC\"\n		\";B1_POSIPI\"\n		\";B1_UM\"\n		\";B1_ORIGEM\"\n		\";B1_CONTA\"\n		\";B1_TIPO\"\n		\";B1_GRUPO\"\n		\";B1_IPI\"\n		\";B1_LOCPAD\"\n		\";B1_GARANT\"\n		\";B1_CODBAR\"\n	)\n	FileAppend,% fields_to_insert \"`n\",% A_WorkingDir \"\\temp\\lists\\\" model_name \"\\\" family_name model_name \".csv\"\n	progress(code_list.maxindex())\n	for,each,value in code_list{\n			updateprogress(\"Inserindo valores no arquivo: \" code_list[A_Index,1],1)\n			value_to_insert:=\n			(JOIN\n				remove_t(code_list[A_Index,1]) \";\"\n				code_list[A_Index,2] \";\"\n				code_list[A_Index,3] \";\"\n				code_list[A_Index,4] \";\"\n				code_list[A_Index,5] \";\"\n				code_list[A_Index,6] \";\"\n				code_list[A_Index,7] \";\"\n				code_list[A_Index,8] \";\"\n				code_list[A_Index,9] \";\"\n				code_list[A_Index,10] \";\"\n				code_list[A_Index,11] \";\"\n				\"2;\"\n				code_list[A_Index,1] \";\"\n			)\n			FileAppend,% value_to_insert \"`n\",% A_WorkingDir \"\\temp\\lists\\\" model_name \"\\\" family_name model_name \".csv\"	\n	}\n	gui,progress:destroy \n	MsgBox,64,,% \"Os Arquivos foram salvos em\" A_WorkingDir \"\\temp\\lists\\\" model_name \"\\\" family_name model_name \".csv\"\n}\n\n;############logopromto##################################\npromtologo(colors,w,h,notext){\n	global \n	newgdi({w:w,h:h})\n	if(notext!=1){\n		L:=w*0.4\n		;panel({x:0,y:0,w:w,h:h,color:\"grey\",boardcolor: \"0xff000000\",boardsize:5})\n		panel({x:w*0.37,y:h*0.026,w:L,h:L,color: colors[3],boardcolor: \"0xffffffff\",boardsize: w*0.01})\n		panel({x:w*0.31,y:h*0.18,w:L*0.8,h:L*0.8,color: colors[2],boardcolor: \"0xffffffff\",boardsize:w*0.01})\n		panel({x:w*0.27,y:h*0.36,w:L*0.5,h:L*0.5,color: colors[1],boardcolor: \"0xffffffff\",boardsize:w*0.01})\n		txcolor1:=getcolors(colors[4]) , txcolor2:=getcolors(colors[5])\n		txcolor1:=txcolor1[1] , txcolor2:=txcolor2[2]\n		StringReplace,txcolor1,txcolor1,0x,, All\n		StringReplace,txcolor2,txcolor2,0x,, All\n		panel({x:w*0.06,y:h*0.62,w:w*0.85,h:L*0.3,color: \"nocolor\",text: \"ProMTo!!!\",textcolor: txcolor1, textsize:w*0.16,boardcolor: \"0x00000000\",textalign:\"Centre\"})\n		panel({x:w*0.04,y:h*0.82,w:w*0.9,h:L*0.3,color: \"nocolor\",text: \"product manager tool\",textcolor: txcolor2, textsize: w*0.08,boardcolor: \"0x00000000\",textalign:\"Centre\"})		\n	}else{\n		L:=w*0.55\n		panel({x:w*0.27,y:h*0.040,w:L,h:L,color: colors[3],boardcolor: \"0xffffffff\",boardsize:w*0.01})\n		panel({x:w*0.21,y:h*0.23,w:L*0.8,h:L*0.8,color: colors[2],boardcolor: \"0xffffffff\",boardsize:w*0.01})\n		panel({x:w*0.17,y:h*0.54,w:L*0.5,h:L*0.5,color: colors[1],boardcolor: \"0xffffffff\",boardsize:w*0.01})\n	}\n	return\n}\n\n\n;##############banner#########################\nbanner(color,ByRef Variable, Text=\"\", TextOptions=\"x0p y10 s30 Center cffffffff r4 Bold\", Font=\"verdana\",r=5)\n{\n    GuiControlGet, Pos, Pos, Variable\n    GuiControlGet, hwnd, hwnd, Variable\n    pBitmap := Gdip_CreateBitmap(Posw, Posh), G := Gdip_GraphicsFromImage(pBitmap), Gdip_SetSmoothingMode(G, 4)\n    w:=posw,h:=posh\n    colors:=getcolors(color)\n	pBrush := Gdip_CreateLineBrushFromRect(0, 0, w, h,colors[1],colors[2])\n	Gdip_FillRoundedRectangle(G, pBrush, 0, 0, w, h,r)\n	Gdip_DeleteBrush(pBrush)\n    Gdip_TextToGraphics(G,Text,TextOptions, Font, Posw, Posh)\n    hBitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)\n    SetImage(hwnd, hBitmap)\n    Gdip_DeleteBrush(pBrushFront), Gdip_DeleteBrush(pBrushBack)\n    Gdip_DeleteGraphics(G), Gdip_DisposeImage(pBitmap), DeleteObject(hBitmap)\n    Return, 0\n}\n\naddbutton(bargs){\n	Static x,count\n	name := bargs[\"name\"],label := bargs[\"label\"],window := bargs[\"window\"]\n	w := bargs[\"w\"],h := bargs[\"h\"]\n	Gui,%window%:default\n	if(bargs[\"count\"]=1){\n		x:=bargs[\"initialx\"],y:=bargs[\"initialy\"]\n		count:=bargs[\"count\"]\n		Gui,Add,Button,x%x% y%y% w%w% h%h%  g%label%,% name\n	}else{\n		if(objHasValue(bargs[\"buttonfield\"],bargs[\"count\"])){\n			x+=bargs[\"w\"],y:=bargs[\"initialy\"]\n			Gui,Add,Button,x%x% y%y% w%w% h%h%  g%label%,% name\n		}else{\n			Gui,Add,Button,y+5 w%w% h%h%  g%label%,% name\n		}\n	}\n	bargs[\"count\"]+=1\n	Gui, Show, AutoSize Center\n}\n\nGetSelectedItems(wName = \"\", lvName = \"\", type = \"text\"){\n	Global \n	Local returnValue\n	if(wName != \"\"){\n		Gui,%wName%:default\n	}\n	if(lvName != \"\"){\n		Gui, listview, %lvName%\n	}\n	returnValue := []\n	if(type = \"text\"){\n		rownumber := 0\n		Loop \n		{\n			rownumber := LV_GetNext(rownumber)  ; Resume the search at the row after that found by the previous iteration.\n    	if not rownumber  ; The above returned zero, so there are no more selected rows.\n        break\n			LV_GetText(text,rownumber)\n			returnValue[A_Index] := text\n		}\n	}\n	if(type = \"number\"){\n		rownumber := 0\n		Loop\n		{\n			rownumber := LV_GetNext(rownumber)\n			if not rownumber  ; The above returned zero, so there are no more selected rows.\n        break\n			returnValue[A_Index] := rownumber\n		}\n	}\n	return returnValue\n}\n\n/*\n Remove os items selecionados na determinada \n listview\n*/\nremove_selected_in_lv(window_name, lv_name){\n	rownumber := 0\n	Gui, %window_name%:default \n	Gui, Listview, %lv_name%\n	GuiControl, -Redraw, %lv_name% \n	selected_rows := []\n	Loop\n	{\n		rownumber := LV_GetNext(rownumber)\n		if not rownumber  ; The above returned zero, so there are no more selected rows.\n      break\n    selected_rows[A_Index] := rownumber \n	}\n	alredy_removed := 0\n	removed_count := 0\n	for, each, value in selected_rows{\n		selected_tbr := selected_rows[A_Index] \n		if(alredy_removed){\n			removed_count++\n			selected_tbr-=removed_count \n		}\n		LV_GetText(selected_text, selected_tbr)\n		LV_Delete(selected_tbr)\n		alredy_removed := 1\n	}\n	GuiControl, +Redraw, %lv_name%\n}\n\n\n/*\n	RETORNA O VALOR DA PRIMEIRA COLUNA DA LINHA SELECIONADA NA LISTVIEW\n*/\n\nGetSelected(wName=\"\",lvName=\"\",type=\"text\"){\n	Global \n	Local returnValue\n	if(wName != \"\"){\n		Gui,%wName%:default\n	}\n	if(lvName != \"\"){\n		Gui, listview, %lvName%\n	}\n	if(type = \"text\"){\n			LV_GetText(returnValue, LV_GetNext())\n	}\n	if(type = \"number\"){\n			returnValue := LV_GetNext()\n	}\n	return returnValue\n}\n\n;############flip########################\nFlip( Str) {\n Loop, Parse, Str\n  nStr=%A_LoopField%%nStr%\nReturn nStr\n}\n;############reversearray########################\nreversearray(array){\n	x:=-1,newarray:=[]\n	for,each,value in array{\n		x+=1\n		;MsgBox, % value\n		newarray.insert(array[array.maxindex()-x])\n	}\n	return newarray\n}\n\n\n;###########GetSelectedRow#######################\nGetSelectedRow(wName=\"\",lvName=\"\"){\n	Global \n	Local returnValue\n	if(wName!=\"\"){\n		Gui,%wName%:default\n	}\n	if(lvName!=\"\"){\n		Gui,listview,%lvName%\n	}\n	\n	i:=0\n	result:=object()\n	row:=LV_GetNext()\n	Loop,% LV_GetCount(\"col\"){\n		i+=1\n		LV_GetText(value,row,i)\n		result.insert(value)\n	}\n	return result\n}\n\nUpdateScrollBars(GuiNum, GuiWidth, GuiHeight)\n{\n    static SIF_RANGE=0x1, SIF_PAGE=0x2, SIF_DISABLENOSCROLL=0x8, SB_HORZ=0, SB_VERT=1\n    ;msgBox, %GuiNum%\n    Gui, %GuiNum%:Default\n    Gui, +LastFound\n    \n    ; Calculate scrolling area.\n    Left := Top := 9999\n    Right := Bottom := 0\n    WinGet, ControlList, ControlList\n    Loop, Parse, ControlList, `n\n    {\n        GuiControlGet, c, Pos, %A_LoopField%\n        if (cX < Left)\n            Left := cX\n        if (cY < Top)\n            Top := cY\n        if (cX + cW > Right)\n            Right := cX + cW\n        if (cY + cH > Bottom)\n            Bottom := cY + cH\n    }\n    Left -= 8\n    Top -= 8\n    Right += 8\n    Bottom += 8\n    ScrollWidth := Right-Left\n    ScrollHeight := Bottom-Top\n    \n    ; Initialize SCROLLINFO.\n    VarSetCapacity(si, 28, 0)\n    NumPut(28, si) ; cbSize\n    NumPut(SIF_RANGE | SIF_PAGE, si, 4) ; fMask\n    \n    ; Update horizontal scroll bar.\n    NumPut(ScrollWidth, si, 12) ; nMax\n    NumPut(GuiWidth, si, 16) ; nPage\n    DllCall(\"SetScrollInfo\", \"uint\", WinExist(), \"uint\", SB_HORZ, \"uint\", &si, \"int\", 1)\n    \n    ; Update vertical scroll bar.\n;     NumPut(SIF_RANGE | SIF_PAGE | SIF_DISABLENOSCROLL, si, 4) ; fMask\n    NumPut(ScrollHeight, si, 12) ; nMax\n    NumPut(GuiHeight, si, 16) ; nPage\n    DllCall(\"SetScrollInfo\", \"uint\", WinExist(), \"uint\", SB_VERT, \"uint\", &si, \"int\", 1)\n    \n    if (Left < 0 && Right < GuiWidth)\n        x := Abs(Left) > GuiWidth-Right ? GuiWidth-Right : Abs(Left)\n    if (Top < 0 && Bottom < GuiHeight)\n        y := Abs(Top) > GuiHeight-Bottom ? GuiHeight-Bottom : Abs(Top)\n    if (x || y)\n        DllCall(\"ScrollWindow\", \"uint\", WinExist(), \"int\", x, \"int\", y, \"uint\", 0, \"uint\", 0)\n}\n\n;############banner1############################################################################\n\nbanner1(color,Variable,Text=\"\",TextOptions=\"x0p y15p s60p Center cffffffff r4 Bold\", Font=\"verdana\",r=1)\n{\n    GuiControlGet, Pos, Pos,%Variable%\n    GuiControlGet, hwnd, hwnd,%Variable%\n    pBitmap := Gdip_CreateBitmap(Posw, Posh), G := Gdip_GraphicsFromImage(pBitmap), Gdip_SetSmoothingMode(G, 4)\n    w:=posw,h:=posh\n    colors:=getcolors(color)\n	pBrush := Gdip_CreateLineBrushFromRect(0, 0, w, h,colors[1],colors[2])\n	Gdip_FillRoundedRectangle(G, pBrush, 0, 0,w,h,r)\n	Gdip_DeleteBrush(pBrush)\n    Gdip_TextToGraphics(G,Text, TextOptions, Font, Posw, Posh)\n    hBitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)\n    SetImage(hwnd, hBitmap)\n    Gdip_DeleteBrush(pBrushFront), Gdip_DeleteBrush(pBrushBack)\n    Gdip_DeleteGraphics(G), Gdip_DisposeImage(pBitmap), DeleteObject(hBitmap)\n    Return, 0\n}\n\n;############CREATE TREEVIEW############################################\nCreateTreeView(TreeViewDefinitionString) {  ; by Learning one\n  Global nameid:={},idlist:=object()\n  \n  IDs := {}   \n  k:=1\n  Loop, parse, TreeViewDefinitionString, `n, `r\n  {\n    if A_LoopField is space\n      continue\n    Item := RTrim(A_LoopField, A_Space A_Tab), Item := LTrim(Item, A_Space), Level := 0\n    While (SubStr(Item,1,1) = A_Tab)\n      Level += 1, Item := SubStr(Item, 2)\n    RegExMatch(Item, \"([^`t]*)([`t]*)([^`t]*)\", match)  ; match1 = ItemName, match3 = Options\n    if(_dontchange!=1){\n      icon:=\"icon1\"\n    }\n    if(match1=\"PRODUTOS ACABADOS\"){\n        icon:=\"icon2\"\n        _dontchange := 1\n      }\n      if(match1=\"PRODUTOS SEMI-ACABADOS\"){\n        icon:=\"icon3\"\n        _dontchange := 1\n      }\n      if(match1=\"MATERIA PRIMA\"){\n        icon:=\"icon4\"\n        _dontchange := 1\n      }\n      if(match1=\"PRODUTOS INTERMEDIARIOS\"){\n        icon:=\"icon5\"\n        _dontchange := 1\n      }\n      if(match1=\"CONJUNTOS\"){\n        icon:=\"icon6\"\n        _dontchange := 1\n      }\n      if(match1=\"MAO DE OBRA\"){\n        icon:=\"icon7\"\n        _dontchange := 1\n      }\n    if (Level=0){\n      IDs[\"Level0\"] := TV_Add(match1, 0,icon)\n      nameid[match1]:= IDs[\"Level0\"]\n      idlist.insert(IDs[\"Level0\"])\n    }else{\n      IDs[\"Level\" Level] := TV_Add(match1, IDs[\"Level\" Level-1],icon)\n      nameid[match1]:= IDs[\"Level\" Level]\n      idlist.insert(IDs[\"Level\" Level])\n    }\n  }\n\n} ; http://www.autohotkey.com/board/topic/92863-functio\n\n;#############load treeview ##########################\nloadtv(tvstring,tv){\n	TvDefinition=\n	(\n	%tvstring%\n	)\n	gui,treeview,%tv%\n	TV_Delete()\n	CreateTreeView(TvDefinition)\n	return \n}\n;################getchild#########################\ngetchild(itemid,tv,nivel){\n	Global newtvstring\n	gui,TreeView,%tv%\n	ItemID := TV_GetChild(itemid)\n	if not ItemID  \n        return \n	TV_GetText(ItemText,ItemID)\n	nivel.=\"`t\"\n	newtvstring.=nivel ItemText \"`n\"\n	;loop do mesmo nivel da crianca\n	Loop\n    {\n        itemid:=TV_GetNext(itemid)\n        if not ItemID  \n          break\n        TV_GetText(ItemText,ItemID)\n        newtvstring.=nivel ItemText \"`n\"\n      	;MsgBox, % newtvstring  \n      	getchild(ItemID,\"treeview\",nivel)     \n    }\n    return \n}\n;################haschild#########################\nhaschild(itemid,wname,tv){\n	gui,%wname%:default\n	gui,treeview,%tv%\n	ItemID := TV_GetChild(itemid)\n	if not ItemID  \n        return False\n    return True \n}\n\nget_info_in_string(info){\n	code_table := info \n}\n\n;############# load lv from array ################\nload_lv_from_array(columns, array, window, lv, col_sizes = \"\", start_at = \"1\"){\n	Gui, %window%:default\n	Gui, Listview, %lv%\n\n	/*\n		Deleta todas as colunas existentes\n	*/\n	Loop, % columns.maxindex(){\n		LV_DeleteCol(1)\n	}\n\n	LV_Delete()\n	prev_count := 0\n	line_count := 0\n	column_count := 0\n\n	Gui, %window%:default\n	Gui, Listview, %lv%\n	GuiControl, -Redraw, %lv% \n	loop, % columns.maxindex(){\n		loop, % array[A_Index].maxindex(){\n			if(A_Index < start_at)\n				Continue\n\n			if(A_Index > column_count){\n				col_number := A_Index\n				LV_InsertCol(col_number,\"\",columns[A_Index])	\n				column_count++\n			}\n			loop, % array.maxindex(){\n				if(A_Index > line_count){\n					LV_Add(\"\",\"\",\"\")\n					line_count++	\n				}\n				LV_Modify(A_Index, \"Col\" . col_number, array[ A_Index, col_number])\n			}\n		}	\n	}\n	for, each, size in col_sizes{\n	  LV_ModifyCol(A_Index, size)\n	} \n	GuiControl, +Redraw, %lv%\n}\n\n\nload_lv_from_matrix(number_of_columns, array, window, lv){\n	Gui, %window%:default\n	Gui, Listview, %lv%\n\n	prev_count := 0\n	loop, % array.maxindex(){\n		row_number := A_Index\n		if(row_number = \"\")\n			Continue\n		LV_Add(\"\",\"\",\"\")\n		Loop, % number_of_columns{\n			LV_Modify(row_number, \"Col\" . A_index, array[row_number, A_Index])			\n				LV_ModifyCol(A_Index, 200)\n		}\n	}\n}\n\n/*\n	Transform array\n*/\ntransform_array(array){\n	return_array := []\n\n	for, each, value in array{\n		return_array[A_Index, 1] := array[\"code\", A_Index]\n		return_array[A_Index, 2] := array[\"desc\", A_Index]\n	}\n	return return_array\n}\n\n;############### createtag #################################\ncreatetag(prefix, prefix2, model, selectmodel, codelist, codigos_array = \"\", textsize = 30, textcolor = \"ff000000\", imagepath = \"image.png\"){\n	Global db, global_image_path\n\n	code_rect_size := 130 ; tamanho do retangulo onde vai o codigo\n	code_rect_spacing := 135 ; tamanho do espacamento entre os retangulos \n\n	if(codigos_array[1, 1] = \"\"){\n		table := db.load_table_in_array(codelist)\n	}else{\n		table := codigos_array\n	}\n	\n	progress(table.maxindex())\n	totalheight := 500.17 * table.maxindex()\n	newgdi({w:1200, h:totalheight})\n	prefix_in_string := get_prefix_in_string(prefix2)\n	StringLen, prefixlength, prefix_in_string\n	\n	y := 80\n	 \n	panel({x:0, y:0, w:1200, h:totalheight, color: \"white\", boardcolor: \"0x00000000\"})\n	\n	for, each, value in table{\n		if(table[A_Index,1] = \"\")\n			Continue\n		x:=30	\n		updateprogress(\"Criando Tags: \" table[A_Index,1],1)\n		\n		; Pega a imagem\n		imagepath := db.Imagem.get_image_full_path(table[A_Index, 1])\n		\n		/*\n			Insere o prefixo\n		*/\n		f_hight := y-60\n		for, each, value in prefix2{\n			if(prefix2[A_Index] = \"\")\n				Continue\n			panel({x:x, y:f_hight, w:code_rect_size, h:50, color: \"nocolor\", text:\"Prefixo\", textsize: 10, textcolor: textcolor, boardersize:0})\n			panel({x:x, y:f_hight+60, w:code_rect_size, h:50, color: \"nocolor\", text:prefix2[A_Index], textsize: textsize, textcolor: \"ffff3311\"})	\n			x += code_rect_spacing\n		}\n		x -= code_rect_spacing\n\n		codigo := table[A_Index,1]	\n\n		StringTrimleft,codigo,codigo, prefixlength\n		\n		/*\n			Pega a tabela de campos, para pegar o nome dos campos\n		*/\n		camp_table := db.get_reference(\"oc\", prefix model selectmodel)\n		\n		table_camp := db.load_table_in_array(camp_table)\n\n		for, each, value in table_camp{\n			if(table_camp[A_Index, 2] = \"\"){\n				Continue\n			}\n\n			campname := table_camp[A_Index, 2]\n			StringReplace, campname, campname, %A_Space%,, All\n			camp_esp_table := db.get_reference(campname, prefix model selectmodel)\n			\n			table_camp_esp := db.load_table_in_array(camp_esp_table)\n\n			for, each, value in table_camp_esp{\n				codepiece := table_camp_esp[A_Index,1]\n				StringLen, length, codepiece\n				if(length != \"\"){\n					StringLeft, codepiece, codigo, length\n					StringTrimLeft, codigo, codigo, length\n					Break\n				}\n			} 	\n			/*\n				Insere os campos especificos\n			*/\n			panel({x:x+=code_rect_spacing,y:y-60,w:code_rect_size,h:50,color: \"nocolor\",text: table_camp[A_Index,2], textsize:8, textcolor: textcolor})\n			panel({x:x, y:y, w:code_rect_size, h:50, color: \"nocolor\", text:codepiece, textsize: textsize, textcolor: textcolor})\n		}\n\n		; Insere a foto na plaqueta  \n		panel({x:30,y:y+=60,w:200,h:200,color: \"nocolor\", imagepath: imagepath})\n\n		/*\n			Insere a descricao\n		*/\n		panel({x:245,y: y,w: 800,h: 200,color: \"nocolor\",text: table[A_Index,2],textsize: 30,textcolor: textcolor})	\n\n		dottedliney := y + 234.17	\n		pPen := Gdip_CreatePen(0xff000000, 3)\n		DrawDottedLine(0, dottedliney, 1500, dottedliney)\n		Gdip_DeletePen(pPen)\n		y += 234.17+81\n	}\n	Gui,progress:destroy\n	MsgBox, 64, Sucesso, % \"O arquivo foi salvo!!\"\n	formated_model := format_file_name(selectmodel)\n	savetofile(\"temp\\tag.png\")\n	MsgBox, % \"ira rodar o arquivo temp\\tag.png\" \n	run, % \"temp\\tag.png\"\n}\n\nget_prefix_in_string(table){\n	\n	for, each, value in table{\n		return_value .= table[A_Index]\n	}\n	return return_value\n}\n\nDrawDottedLine(sx,sy,ex,ey){\n	Global \n	Loop{\n		ex2:=sx+10\n		Gdip_DrawLine(G, pPen,sx,sy,ex2,sy)\n		sx+=15\n		if(sx>ex)\n			Break\n	}\n}\n\nGetCheckedRows2(wName = \"\", lvName = \"\"){\n\n	if(wName != \"\")\n		Gui, %wName%:default\n\n	if(lvName != \"\")\n		Gui, listview, %lvName%\n\n	result := {}\n	RowNumber = 0  \n	\n	Loop\n	{ \n    RowNumber := LV_GetNext(RowNumber, \"Checked\")  ; Resume the search at the row after that found by the previous iteration.\n    if not RowNumber  ; The above returned zero, so there are no more selected rows.\n     break\n\n    LV_GetText(Text, RowNumber)\n    LV_GetText(Desc, RowNumber,2)\n    result[\"code\", A_Index] := Text\n    result[\"desc\", A_Index] := Desc\n	}\n\n	return result\n}\n\nGetCheckedRows(wName=\"\",lvName=\"\"){\n\n	Local returnValue\n	if(wName!=\"\"){\n		Gui,%wName%:default\n	}\n	if(lvName!=\"\"){\n		Gui,listview,%lvName%\n	}\n	result:=object()\n	k:=0\n	Loop, % LV_GetCount()\n	{\n		row:=A_Index\n		SendMessage,4140,row - 1, 0xF000, SysListView321 \n		IsChecked := (ErrorLevel >> 12) - 1\n		i:=0\n		if (IsChecked!=1)\n			continue\n		k++\n		Loop,% LV_GetCount(\"col\"){\n			i+=1\n			LV_GetText(value,row,i)\n			result[k,i]:=value\n		}\n	}\n	return result\n}\n\n;################progress###################\nupdateprogress(text,increase){\n    Global progress,plabel\n    GuiControl,,progress,+%increase%\n    GuiControl,,plabel,%text%   \n}\n\n\nprogress(maxrange, stop_progress_func_local=\"\", undetermined=0, toolwindow=0){\n  Global progress,plabel,stop_progress_func\n  \n  ;declara a funcao a ser rodada quando o botao parar e acionado.\n  stop_progress_func := stop_progress_func_local\n\n  Gui,progress:New \n  Gui,color,ffffff\n  if(toolwindow=1)\n  	Gui,progress:-caption +toolwindow\n  Gui, Add, Picture, x40 , % \"img\\promtologo.png\"\n  if(undetermined=0){\n  	Gui, Add, Progress, w300 h20 x10 c2661dd Range0-%maxrange% vprogress\n  }\n  Else{\n  	Gui, Add, Progress, vprogress  -Smooth 0x8 w300 h18 x10\n  	SetTimer, undeterminedprogressaction, 45\n  }\n  Gui,font,s8\n  Gui,Add,text,w300 y+5 vplabel\n  Gui,Show,,progresso\n} \n\n;parar_processo:\n;%stop_progress_func%()\n;return \n\nundeterminedprogressaction:\ngui,progress:default\nGuiControl,,progress, 1\n\npesquisa_simple_array(wname,lvname,string,List){\n	Gui,%wname%:default\n  Gui,listview,%lvname%\n  ;caso a string esteja vazia\n	If (string = \"\"){\n		GuiControl, -Redraw,%lvname% \n    LV_Delete()\n    for,each,value in List\n        LV_Add(\"\",value)\n\n    GuiControl, +Redraw,%lvname%       \n    return\n  }\n	result := []\n	for each,value in List{\n\n		IfInString,value,%string%\n		{\n			result.insert(value)\n		}\n	}\n	GuiControl, -Redraw,%lvname%\n	LV_Delete()\n	for each,value in result{\n		LV_Add(\"\",value)\n	}\n	GuiControl, +Redraw,%lvname%\n}\n\npesquisalv(wname,lvname,string,List){\n	Gui,%wname%:default\n    Gui,listview,%lvname%\n    GuiControl, -Redraw,%lvname%\n    Gui, Submit, NoHide\n    resultsearch:=[] \n    If (string=\"\"){ \n        LV_Delete()\n        for,each,value in List{\n            LV_Add(\"\",List[A_Index,1],List[A_Index,2])\n        }       \n    }Else{\n        for,each,value in List{\n            i++\n            string2:=List[A_Index,1] List[A_Index,2]\n            IfInString,string2,%string%\n            {\n                resultsearch.insert(i)\n            }\n        }\n        i:=0\n        LV_Delete()\n        for,each,value in resultsearch{\n            LV_Add(\"\",List[value,1],List[value,2])\n        }\n    }\n    GuiControl, +Redraw,%lvname%\n    LV_Modify(1, \"+Select\")\n}\n\nany_word_search(wname, lvname, string, List){\n	Gui,%wname%:default\n  Gui, listview,%lvname%\n  GuiControl, -Redraw,%lvname%\n  Gui, Submit, NoHide\n\n    resultsearch := [] \n    If (string = \"\"){ \n      LV_Delete()\n\n      for,each,value in List{\n        LV_Add(\"\",List[A_Index, 1], List[A_Index, 2], List[A_Index, 3], List[A_Index, 4],  List[A_Index, 5], List[A_Index, 6])\n      }       \n    }Else{\n      for,each,value in List{\n        i++\n\n        string2 := List[A_Index, 1] List[A_Index, 2] List[A_Index, 3]\n\n        StringSplit, splitted_string, string,%A_Space%\n\n        _exists_in_all := 0\n				Loop,% splitted_string0\n				{\n					value_to_search := trim(splitted_string%A_Index%)\n					IfInString, string2, %value_to_search%\n          {\n            _exists_in_all := 1\n          }else{\n          	_exists_in_all := 0\n          	Break\n          }	\n				}\n				if(_exists_in_all = 1)\n					resultsearch.insert(i)\n      }\n      i := 0\n      LV_Delete()\n      for, each, value in resultsearch{\n          LV_Add(\"\",List[value,1], List[value,2], List[A_Index, 3], List[A_Index, 4],  List[A_Index, 5], List[A_Index, 6])\n      }\n    }\n    GuiControl, +Redraw,%lvname%\n    LV_Modify(1, \"+Select\")\n}\n\nany_word_search_backup(wname, lvname, string,List){\n	Gui,%wname%:default\n    Gui,listview,%lvname%\n    GuiControl, -Redraw,%lvname%\n    Gui, Submit, NoHide\n    resultsearch:=[] \n    If (string=\"\"){ \n        LV_Delete()\n        for,each,value in List{\n            LV_Add(\"\", List[A_Index, 1], List[A_Index, 2], List[A_Index, 3], List[A_Index, 4],  List[A_Index, 5], List[A_Index, 6])\n        }       \n    }Else{\n        for,each,value in List{\n            i++\n            string2:=List[A_Index,1] List[A_Index,2]\n            StringSplit,splitted_string,string,%A_Space%\n            _exists_in_all:=0\n			Loop,% splitted_string0\n			{\n				value_to_search:=trim(splitted_string%A_Index%)\n				IfInString,string2,%value_to_search%\n	            {\n	                _exists_in_all:=1\n	            }else{\n	            	_exists_in_all:=0\n	            	Break\n	            }\n				;MsgBox, % result%A_Index%	\n			}\n			if(_exists_in_all=1)\n				resultsearch.insert(i)\n        }\n        i:=0\n        LV_Delete()\n        for,each,value in resultsearch{\n            LV_Add(\"\",List[value,1],List[value,2], List[A_Index, 3], List[A_Index, 4],  List[A_Index, 5], List[A_Index, 6])\n        }\n    }\n    GuiControl, +Redraw,%lvname%\n    LV_Modify(1, \"+Select\")\n}\n\npesquisalv3(wname,lvname,string,List){     ;## PESQUISAR PARA 3 COLUNAS#### \n	Gui,%wname%:default\n    Gui,listview,%lvname%\n    GuiControl, -Redraw,%lvname%\n    Gui, Submit, NoHide\n    resultsearch:=[] \n    If (string=\"\"){ \n        LV_Delete()\n        for,each,value in List{\n            LV_Add(\"\",List[A_Index,1],List[A_Index,2],List[A_Index,3])\n        }       \n    }Else{\n        for,each,value in List{\n            i++\n            string2:=List[A_Index,1] List[A_Index,2] List[A_Index,3]\n            IfInString,string2,%string%\n            {\n                resultsearch.insert(i)\n            }\n        }\n        i:=0\n        LV_Delete()\n        for,each,value in resultsearch{\n            LV_Add(\"\",List[value,1],List[value,2],List[value,3])\n        }\n    }\n    GuiControl, +Redraw,%lvname%\n    LV_Modify(1, \"+Select\")\n} \n\npesquisalv4(wname,lvname,string,List){     ;## PESQUISAR PARA 3 COLUNAS#### \n	Gui,%wname%:default\n    Gui,listview,%lvname%\n    GuiControl, -Redraw,%lvname%\n    Gui, Submit, NoHide\n    resultsearch:=[] \n    If (string=\"\"){ \n        LV_Delete()\n        for,each,value in List{\n        		if(List[A_Index,1] = \"\")\n        			Continue\n            LV_Add(\"\",List[A_Index,1],List[A_Index,2],List[A_Index,3],List[A_Index,4])\n        }       \n    }Else{\n        for,each,value in List{\n            i++\n            string2:=List[A_Index,1] List[A_Index,2] List[A_Index,3] List[A_Index,4]\n            IfInString,string2,%string%\n            {\n                resultsearch.insert(i)\n            }\n        }\n        i:=0\n        LV_Delete()\n        for,each,value in resultsearch{\n            LV_Add(\"\",List[value,1],List[value,2],List[value,3],List[A_Index,4])\n        }\n    }\n    GuiControl, +Redraw,%lvname%\n    LV_Modify(1, \"+Select\")\n} \n\n;##############getvaluesLV#####################\n\ngetvaluesLV(wName,lvName)   ;extrai todos os valores de uma listview e retorna um array.\n{\n	values := []\n	i := 0\n	gui, %wName%:default \n	Gui, listview, %lvName%\n\n	Loop, % LV_GetCount(\"Column\")\n	{\n		i+=1\n		Loop, % LV_GetCount()\n		{\n			LV_GetText(text,A_Index,i)\n			values[A_Index,i] := text\n		}\n	}\n	return values\n}\n\n;################objhasvalue###################\nobjHasValue(obj,value){\n	for,each,value2 in obj\n		IfEqual,value2,%value%,return,True\n}\n/*\n	Retorna a mascara\n*/\ngetmascara(name,table,field){\n	Global db \n	\n	result:=db.query(\"SELECT Mascara FROM \" . table . \" WHERE \" . field . \"='\" . name . \"'\")\n	returnvalue:=result[\"Mascara\"]\n	return returnvalue	\n}\n\nerror_msg(msg){\n	MsgBox, 16, Erro, % msg\n	return 0 \n}\n\nsuccess_msg(msg){\n	MsgBox, 64, Sucesso, % msg\n	return 1 \n}\n\ncheck_blank_parameters(parameters, number){\n	loop, % number\n	{\n		if(parameters[A_Index] = \"\"){\n			throw { what: \"Existia parametros em branco!\", file: A_LineFile, line: A_LineNumber }		\n		}\n	}\n}\n\ncheck_if_mask_is_unique(item_name, item_mask){\n	Global ETF_hashmask \n	if(ETF_hashmask[item_name] != \"\" && ETF_hashmask[item_name] != item_mask){\n		error_msg :=\n		(JOIN\n			\"Ja existe uma outra mascara linkada com o nome inserido! `n\"\n			\"Voce pode usar a mesma mascara: \" ETF_hashmask[item_name] \"`n\"\n			\" Ou alterar o nome.\"  \n		)\n		MsgBox, 4, Item duplicado, % error_msg \n		IfMsgBox Yes\n		{\n			item_mask := ETF_hashmask[item_name]\n			MsgBox, % \"A mascara foi alterada para \" item_mask\n			item_hash := {name: item_name, mask: item_mask}\n			return item_hash\n		}else{\n			throw { what: \"O item nao foi inserido por causa da mascara de codigo!\", file: A_LineFile, line: A_LineNumber }		\n		}\n	}else{\n		item_hash := {name: item_name, mask: item_mask}\n		return item_hash\n	}\n}\n\n/*\nCarrega a string do tv \n	principal\n*/\nload_ETF(db){\n	Global \n	ETF_hashmask := {}\n	db.get_treeview(\"empresas\",0,\"\",\"\")\n}\n\n/*\n Carrega a propia ETF_TVSTRING \n na treeview \n*/\nload_main_tv(){\n		Global\n		\n		TvDefinition =\n		(\n			%ETF_TVSTRING%\n		)\n		Gui, Treeview, main_tv\n		CreateTreeView(TvDefinition)\n}\n\n;############deletefromarray###########################\ndeletefromarray(string,array){\n	for,each,value in array{\n		if (string=value){\n			array.Remove(each)\n		}\n	}\n	for,each,value in array[1]{\n		if (string=value){\n			array.Remove(each)\n		}\n	}\n	return array\n}\n\n;#################save an image to a file#####################\nsavetofile(imagename, show=0){\n	Global pBitmap\n\n	FileDelete, % imagename   \n	Gdip_SaveBitmapToFile(pBitmap, imagename)\n	Gdip_DisposeImage(pBitmap)\n	if(show=1)\n		run,%imagename%\n}\n\nnewgdi(a){\n	Global\n	\n	a.w:= (a.w=\"\") ? 500 : a.w\n	a.h:= (a.h=\"\") ? 500 : a.h\n	pBitmap := Gdip_CreateBitmap(a.w,a.h), G := Gdip_GraphicsFromImage(pBitmap), Gdip_SetSmoothingMode(G, 4)\n	return \n}\n\nchangepic(image){\n	Static _showpic\n	_showpic:=(_showpic=\"\" || _showpic=2) ? 1 : 2\n	if(_showpic=1){\n		GuiControl,,plotpicture,% image\n		GuiControl,hide,plotpicture2\n		GuiControl,Show,plotpicture\n	}\n	if(_showpic=2){\n		GuiControl,,plotpicture2,% image\n		GuiControl,hide,plotpicture\n		GuiControl,Show,plotpicture2\n	}\n	return 	\n}\n\n;############ imprime as estruturas ##############\nprintestrutura(item,offset,textcolor = \"ff000000\",ownercode = \"\",quantidade = \"\"){ ; o offset determina a distancia entre os items\n	Global\n	Local table,maincodes,quantidade_text_size\n	squarecolor := \"lightgrey\", quantidade_text_size := 30\n	if item =\n		return\n	nivel.=\"`t\"\n	offset += 30\n	if(%ownercode% != \"\")\n		%ownercode% := \"\"\n	table := db.query(\"SELECT item,componente,QUANTIDADE FROM ESTRUTURAS WHERE item='\" . item . \"'\")\n	if(table[\"componente\"] = \"\"){\n		if(ownercode != \"\"){\n		 	IfNotInString,%ownercode%,%item%\n		 	{\n		 		%ownercode% .= \"`n\" item\n		 		StringReplace,item,item,>>,|,All\n				StringSplit,item,item,|\n		 		result := db.query(\"SELECT tabela2 FROM reltable WHERE tipo='image' AND tabela1='\" item1 \"'\")\n				if(result[\"tabela2\"] != \"\"){\n					imagepath := db.loadimage(\"\",\"\",result[\"tabela2\"])\n				}else{\n					imagepath := \"noimage.png\"\n				}\n				result.close()\n		 		panel({x:offset,y:y += 130,w:100,h:100,color: \"nocolor\",imagepath: imagepath,boardsize: 0})\n		 		panel({x:offset+105,y:y,w:450,h:100,color:\"nocolor\",text:item1 \"`n\" item2,textsize:10,textcolor: textcolor,boardsize: 0})\n		 		panel({x:offset+560,y:y,w:100,h:100,color:\"nocolor\",text:quantidade \"`n\",textsize:quantidade_text_size,textcolor: textcolor,boardsize: 0,textalign: \"center\"})\n		 	}	\n		 }else{\n		 	IfNotInString,maincodes,%item%\n		 	{\n				maincodes .= \"`n\" item\n		 		StringReplace,item,item,>>,|,All\n				StringSplit,item,item,|\n		 		result := db.query(\"SELECT tabela2 FROM reltable WHERE tipo='image' AND tabela1='\" item1 \"'\")\n				if(result[\"tabela2\"] != \"\"){\n					imagepath := db.loadimage(\"\",\"\",result[\"tabela2\"])\n				}else{\n					imagepath := \"noimage.png\"\n				}\n				result.close()\n				;StringLeft,codetype,item1,1\n		 		panel({x:offset,y:y+=130,w:100,h:100,color: \"nocolor\",imagepath: imagepath,boardsize: 0})\n		 		panel({x:offset+105,y:y,w:450,h:100,color:\"nocolor\",text:item1 \"`n\" item2,textsize:10,textcolor: textcolor,boardsize: 0})\n		 		panel({x:offset+560,y:y,w:100,h:100,color:\"nocolor\",text:quantidade \"`n\",textsize:quantidade_text_size,textcolor: textcolor,boardsize: 0, textalign: \"center\"})\n		 	}\n		 }	\n	 }\n	while(!table.EOF){\n		tableitem := table[\"item\"]\n		if(ownercode!=\"\"){	\n			IfNotInString,%ownercode%,%tableitem%\n			{\n				%ownercode%.=\"`n\" tableitem\n				StringReplace,tableitem,tableitem,>>,|,All\n				StringSplit,tableitem,tableitem,|\n				result:=db.query(\"SELECT tabela2 FROM reltable WHERE tipo='image' AND tabela1='\" tableitem1 \"'\")\n				if(result[\"tabela2\"]!=\"\"){\n					imagepath:=db.loadimage(\"\",\"\",result[\"tabela2\"])\n				}else{\n					imagepath:=\"noimage.png\"\n				}\n				result.close()\n				;StringLeft,codetype,tableitem1,1\n				panel({x:offset,y:y+=130,w:100,h:100,color: \"nocolor\",imagepath: imagepath,boardsize: 0})\n		 		panel({x:offset+105,y:y,w:450,h:100,color:\"nocolor\",text:tableitem1 \"`n\" tableitem2,textsize: 10,textcolor: textcolor,boardsize: 0})\n		 		panel({x:offset+560,y:y,w:100,h:100,color:\"nocolor\",text:quantidade \"`n\",textsize:quantidade_text_size,textcolor: textcolor,boardsize: 0, textalign: \"center\"})\n			}\n		}else{\n			IfNotInString,maincodes,%tableitem%\n		 	{\n				maincodes.=\"`n\" tableitem\n				StringReplace,tableitem,tableitem,>>,|,All\n				StringSplit,tableitem,tableitem,|\n				result:=db.query(\"SELECT tabela2 FROM reltable WHERE tipo='image' AND tabela1='\" tableitem1 \"'\")\n				if(result[\"tabela2\"]!=\"\"){\n					imagepath:=db.loadimage(\"\",\"\",result[\"tabela2\"])\n				}else{\n					imagepath:=\"noimage.png\"\n				}\n				result.close()\n				;StringLeft,codetype,tableitem1,1\n				panel({x:offset,y:y+=210,w:100,h:100,color: \"nocolor\",imagepath: imagepath,boardsize: 0})\n		 		panel({x:offset+105,y:y,w:450,h:100,color:\"nocolor\",text:tableitem1 \"`n\" tableitem2,textsize: 10,textcolor: textcolor,boardsize: 0})\n		 		panel({x:offset+560,y:y,w:100,h:100,color:\"nocolor\",text:quantidade \"`n\",textsize:quantidade_text_size,textcolor: textcolor,boardsize: 0, textalign: \"center\"})\n		 	}\n		}\n		StringReplace,parseditem,tableitem,>>,|,All\n		StringSplit,parseditem,parseditem,|\n		StringReplace,parseditem1,parseditem1,%A_Space%,,All\n		printestrutura(table[\"componente\"],offset,textcolor,parseditem1,table[\"QUANTIDADE\"])\n		table.MoveNext()\n	}\n	table.close()\n	return \n}\n\n;############PANEL###################################\npanel(a){\n	Global\n\n	if(a.imagepath!=\"\"){\n		pBitmapFile1:=Gdip_CreateBitmapFromFile(a.imagepath)\n		Width := Gdip_GetImageWidth(pBitmapFile1), Height := Gdip_GetImageHeight(pBitmapFile1)\n		Gdip_DrawImage(G,pBitmapFile1,a.x,a.y,a.w,a.h,0,0,Width,Height)\n	}\n	colors:=getcolors((a.color=\"\") ? \"blue\" : a.color)\n	pBrush := Gdip_CreateLineBrushFromRect(a.x,a.y,(a.w=\"\") ? 100 : a.w,(a.h=\"\") ? 100 : a.h,colors[1],colors[2])\n	Gdip_FillRoundedRectangle(G,pBrush,(a.x=\"\") ? 100 : a.x,(a.y=\"\") ? 100 : a.y,(a.w=\"\") ? 100 : a.w,(a.h=\"\") ? 100 : a.h,(a.r=\"\") ? 1 : a.r)\n	pPen := Gdip_CreatePen((a.boardcolor=\"\") ? \"0xff000000\" : a.boardcolor,(a.boardsize=\"\") ? 2 : a.boardsize)\n	Gdip_DrawRoundedRectangle(G,pPen,a.x,a.y,a.w,a.h,a.r)\n	a.textx:=(a.textx=\"\") ? a.x+5 : a.x+a.textx\n	a.texty:=(a.texty=\"\") ? a.y+5 : a.y+a.texty\n	a.textsize:=(a.textsize=\"\") ? 8 : a.textsize\n	a.textalign:=(a.textalign=\"\") ? \"left\" : a.textalign\n	a.textcolor:=(a.textcolor=\"\") ? \"ffffffff\" : a.textcolor\n	TextOptions:=\"x\" a.textx \" y\" a.texty  \" s\" a.textsize \" \" a.textalign \" c\" a.textcolor  \" r4 Bold\",Font:=(a.font=\"\") ? \"arial\" : a.font\n	Gdip_TextToGraphics(G,a.text,TextOptions,Font,a.w,a.h) \n	a.text2x:=(a.text2x=\"\") ? a.x+5 : a.x+a.text2x\n	a.text2y:=(a.text2y=\"\") ? a.y+20 : a.y+a.text2y\n	a.text2size:=(a.text2size=\"\") ? 20 : a.text2size\n	a.text2align:=(a.text2align=\"\") ? \"left\" : a.text2align\n	a.text2color:=(a.text2color=\"\") ? \"ffffffff\" : a.text2color\n	TextOptions:=\"x\" a.text2x \" y\" a.text2y  \" s\" a.text2size \" \" a.text2align \" c\" a.text2color  \" r4 Bold\",Font:=(a.font=\"\") ? \"arial\" : a.font\n	Gdip_TextToGraphics(G,a.text2,TextOptions,Font,a.w,a.h) \n	Gdip_DisposeImage(pBitmapFile1)\n}\n\n;##############MATHASVALUE###########################\nMatHasValue(matrix, value){\n		i:=0\n		returnValue := False\n		while(matrix[A_Index, 1] != \"\"){\n			i+=1\n			while(matrix[i, A_Index]!=\"\"){\n				if(matrix[i, A_Index] = value){\n					returnValue := True\n				}\n			}\n		}\n		return returnValue\n}\n\n/*\n	Transforma os arrays de multi\n	para uma so dimensao\n*/\nsingledim_array(array, col = 1){\n	return_array := []\n	loop, % array.maxindex(){\n		return_array.insert(array[A_Index, col])\n	}\n	Return return_array\n}\n\n/*\n	Marca todos os items de uma determinada listview\n*/\ncheck_all(window, listview){\n	Gui, %window%:default\n	Gui, Listview, %listview%\n	Loop, % LV_GetCount()\n		LV_Modify(\"\",\"+check\")	\n}\n\n/*\n	Desmarca todos os items de determinada listview\n*/\nuncheck_all(window, listview){\n	Gui, %window%:default\n	Gui, Listview, %listview%\n	Loop, % LV_GetCount()\n		LV_Modify(\"\",\"-check\")	\n}\n\nremove_from_array(array, value){\n	For, each, row in array{\n		For, each, item in row{\n			if(item = value){\n				row.remove(A_Index)\n			}\n		}\n	}\n	return array\n}\n\n/*\n	Deleta a linha da listview que comtem \n	determinado valor \n*/\ndelete_row_from_lv(window, lv, item_to_remove, everyone = 0){\n	Gui, %window%:default\n	Gui, Listview, %lv%\n	\n	values := getvaluesLV(window, lv)\n	removed_items := \"\"\n	removed_rows := \"\"\n	for, each, row in values{\n		row_number := A_Index\n		for, each, item in row{\n			if(item = item_to_remove){\n				IfNotInString, removed_items, %item%\n				{\n					IfNotInString, removed_rows, %row_number%\n					{\n						LV_Delete(row_number)	\n						removed_items .= item\n						removed_rows .= row_number	\n					}\n				}else{\n					if(everyone = 1){\n						IfNotInString, removed_rows, %row_number%\n						{\n							LV_Delete(row_number)\n							removed_rows .= row_number	\n						}\n					}\n				}\n			}	\n		}\n	}\n}\n\n/*\n	Impede que caracteres ilegais sejam inseridos no \n	nome do arquivo\n*/\nformat_file_name(file_name){\n	file_name := Trim(file_name)\n	unmodified_name := file_name \n	_ilegal_char := 0\n\n	IfInString, file_name, \"\n	{\n		StringReplace, file_name, file_name,\",,All\n		_ilegal_char := 1\n	} \n\n	IfInString, file_name, '\n	{\n		StringReplace, file_name, file_name,',,All\n		_ilegal_char := 1\n	}\n\n	IfInString, file_name, \\\n	{\n		StringReplace, file_name, file_name,\\,,All\n		_ilegal_char := 1\n	}\n\n	IfInString, file_name, /\n	{\n		StringReplace, file_name, file_name,/,,All\n		_ilegal_char := 1\n	}\n\n	IfInString, file_name, :\n	{\n		StringReplace, file_name, file_name,:,,All\n		_ilegal_char := 1\n	}\n\n	IfInString, file_name, *\n	{\n		StringReplace, file_name, file_name,*,,All\n		_ilegal_char := 1\n	}\n\n	IfInString, file_name, ?\n	{\n		StringReplace, file_name, file_name,?,,All\n		_ilegal_char := 1\n	}\n\n	IfInString, file_name, <\n	{\n		StringReplace, file_name, file_name,<,,All\n		_ilegal_char := 1\n	}\n\n	IfInString, file_name, >\n	{\n		StringReplace, file_name, file_name,>,,All\n		_ilegal_char := 1\n	}\n\n	IfInString, file_name, |\n	{\n		StringReplace, file_name, file_name,|,,All\n		_ilegal_char := 1\n	}\n\n	if(_ilegal_char = 1){\n		MsgBox, 16, Erro, % \"O nome do arquivo continha caracteres ilegais `n e foi alterado de \" unmodified_name \" para \" file_name\n		return\n	}\n	return file_name\n}\n\n/*\n	Carrega as ultimas modificacoes do \n	determinado modelo na janela principal\n*/\nload_mod_info(info){\n	Global db\n\n	items := db.Log.get_mod_info(info)\n\n	for, each, item in Items{\n	  usuario := items[A_Index, 2]\n	  hash := hashify(items[A_Index, 3])\n	  data := items[A_Index, 4]\n	  hora := items[A_Index, 5]\n		string .= usuario \" alterou o item \" hash.modelo \" em \" data \" as \" hora \"`n\"\n		mensagem .= items[A_Index, 6] \"`n\"\n	} \n	Gui, M:default\n	GuiControl,, mod_info, % string  \n	GuiControl,, msg_info, % mensagem\n}\n\n/*\n	Carrega o status do determinado item na janela \n	principal\n*/\nload_status_in_main_window(info){\n	Global USER_NAME, db\n\n	items := db.Status.get_status(info)\n\n	if(items[1, 1] = \"\"){\n		Gui, M:default\n 		Gui, Font, s12 cBlack\n 		GuiControl, Font, status_info\n		GuiControl,, status_picture, % \"img\\gray_glossy_ball.png\"\n		GuiControl,, status_info, % \"Nao foi feito\"\n		return  	\n	}\n\n	usuario := items[1, 2]\n	status := items[1, 3]\n	mensagem := items[1, 4]\n\n	img_path := \"\"\n\n	if(status = 1){\n			img_path := \"img\\green_glossy_ball.png\"\n			current_status := \"OK:\"\n			font_color := \"green\" \n		}else if(status = 2){\n			img_path := \"img\\blue_glossy_ball.png\"\n			current_status := \"Em andamento:\"\n			font_color := \"blue\"\n			}else if(status = 3){\n				img_path := \"img\\red_glossy_ball.png\"\n				current_status := \"Com problemas:\"\n				font_color := \"red\"\n				}else if(status = 4){\n					img_path := \"img\\gray_glossy_ball.png\"\n					current_status := \"Nao foi feito:\"\n					font_color := \"gray\"\n				}\n\n 	msg := current_status \" \" mensagem \" `n Usuario: \" usuario\n 	Gui, M:default\n 	Gui, Font, s12 c%font_color%\n 	GuiControl, Font, status_info \n	GuiControl,, status_picture, % img_path\n	GuiControl,, status_info, % msg\n}\n\n/*\n	Retorna um hash com todas \n	as informacoes do item da tabela \n	log em um hash\n*/\nhashify(string){\n	StringSplit, string, string, |,, All\n	hash := {}\n	hash.empresa := string3\n	hash.tipo := string5\n	hash.familia := string7\n	hash.subfamilia := string9\n	hash.modelo := string11\n	return hash\n}\n",
			"file": "Lib/Promtolib.ahk",
			"file_size": 76543,
			"file_write_time": 130519822938079009,
			"settings":
			{
				"buffer_size": 73706,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Lib/promto_search.ahk",
			"settings":
			{
				"buffer_size": 752,
				"line_ending": "Windows",
				"name": "class PromtoSearch{"
			}
		},
		{
			"file": "index.html",
			"settings":
			{
				"buffer_size": 59666,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/mcruz/AppData/Roaming/Sublime Text 3/Packages/User/Fetch.sublime-settings",
			"settings":
			{
				"buffer_size": 235,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Lib/promto_sql_mariaDB_subfamilia.ahk",
			"settings":
			{
				"buffer_size": 5749,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Lib/promto_sql_mariaDB_modelo.ahk",
			"settings":
			{
				"buffer_size": 22517,
				"line_ending": "Windows"
			}
		},
		{
			"file": "views/ordem_view.ahk",
			"settings":
			{
				"buffer_size": 2276,
				"line_ending": "Windows"
			}
		},
		{
			"file": "views/linkar_campos_view.ahk",
			"settings":
			{
				"buffer_size": 1302,
				"line_ending": "Windows"
			}
		},
		{
			"file": "views/inserir_campos_view.ahk",
			"settings":
			{
				"buffer_size": 7957,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Lib/promto_sql_mariaDB.ahk",
			"settings":
			{
				"buffer_size": 24038,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Lib/promto_sql_mariaDB_log.ahk",
			"settings":
			{
				"buffer_size": 1844,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Lib/promto_sql_mariaDB_empresa.ahk",
			"settings":
			{
				"buffer_size": 3273,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Lib/promto_sql_mariaDB_tipo.ahk",
			"settings":
			{
				"buffer_size": 6621,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Lib/promto_sql_mariaDB_familia.ahk",
			"settings":
			{
				"buffer_size": 8515,
				"line_ending": "Windows"
			}
		},
		{
			"file": "json-test.ahk",
			"settings":
			{
				"buffer_size": 1264,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Lib/promto_json.ahk",
			"settings":
			{
				"buffer_size": 2460,
				"line_ending": "Windows"
			}
		},
		{
			"file": "promto_feed_json.json",
			"settings":
			{
				"buffer_size": 6884,
				"line_ending": "Unix",
				"name": "{"
			}
		},
		{
			"file": "promto.sublime-project",
			"settings":
			{
				"buffer_size": 73,
				"line_ending": "Unix"
			}
		},
		{
			"file": "promto_JSON.json",
			"settings":
			{
				"buffer_size": 378342,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/C/Users/mcruz/Downloads/Jit-2.0.1/Jit/Examples/Spacetree/example1.html",
			"settings":
			{
				"buffer_size": 3172,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nLiveReload:\n----------\n\n  Changelog:\n  \n  Please be sure to restart Sublime Text 2 to start using this new version. For more information or how to use this plugin visit https://github.com/dz0ny/LiveReload-sublimetext2/blob/master/README.md \n  \n  New Features\n   - Support v2 of protocol\n  \n  Bugs:\n   - Potential security vulnerability with plugin https://github.com/dz0ny/LiveReload-sublimetext2/issues/7\n  \n\n\nEmmet:\n-----\n\n  Thank you for installing Emmet -- a toolkit that can greatly improve your workflow. Note that this plugin automatically downloads and installs PyV8 binary (see status bar message). \n  \n  ******************************\n  Please restart editor \n  to finish installation process \n  after PyV8 was downloaded.\n  ******************************\n  \n  Tab key handler\n  ==========================\n  \n  By default, Emmet allows you to expand abbreviations with Tab key in HTML, XML, HAML and CSS/SASS/LESS/Stylus documents. As a side effect, you can’t use some of your ST2 snippets.\n  \n  Please read https://github.com/sergeche/emmet-sublime#tab-key-handler about how Tab handler works and how to tweak its behavior to match your needs.\n  \n  Enter key\n  ==========================\n  \n  In HTML and XML documents, Emmet overrides Enter key to insert formatted line breaks between opening and closing tags. In some cases it will break character input (for example, in Japanese language).\n  \n  To disable Enter key handler, simply add the following option in your user's Preferences file:\n  \n  \"disable_formatted_linebreak\": true\n  \n  Actions shortcuts\n  ==========================\n  \n  Emmet has a number of actions with keyboard shortcuts that may override ones you're using commonly (for example, Ctrl-E or Ctrl-Down). Please read the project main page to get list of available actions and keyboard shortcuts and how to disable them:\n  https://github.com/sergeche/emmet-sublime\n  \n  Documentation and examples:\n  http://emmet.io\n  \n  ------------------------------\n  Follow me on Twitter: @emmetio\n  ------------------------------\n  \n",
			"settings":
			{
				"buffer_size": 2103,
				"line_ending": "Windows",
				"name": "Package Control Messages",
				"scratch": true
			}
		},
		{
			"file": "Lib/promto_json_helper.ahk",
			"settings":
			{
				"buffer_size": 1448,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Lib/general_funcs.ahk",
			"settings":
			{
				"buffer_size": 5431,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/mcruz/Downloads/Jit-2.0.1/Jit/Examples/Spacetree/example1.js",
			"settings":
			{
				"buffer_size": 29511,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 329 files for \"any_word_search\"\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\Promto(Front-End)(Native).ahk:\n  714  			pesquisaraddmass:\n  715  			Gui,submit,nohide\n  716: 			any_word_search(\"addmassa\",\"lvaddmass\",pesquisaraddmass,Listaddmass)\n  717  			return \n  718  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\Lib\\Promtolib.ahk:\n 2135  }\n 2136  \n 2137: any_word_search(wname, lvname, string, List){\n 2138  	Gui,%wname%:default\n 2139    Gui, listview,%lvname%\n ....\n 2181  }\n 2182  \n 2183: any_word_search_backup(wname, lvname, string,List){\n 2184  	Gui,%wname%:default\n 2185      Gui,listview,%lvname%\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\cert_view.ahk:\n   53  	search_cert:\n   54  	Gui, Submit, Nohide\n   55: 	any_word_search(\"cert_view\", \"lv_cert\", search_cert, search_cert_list)\n   56  	return\n   57  }\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\db_ex_view.ahk:\n   66   	pesquisadbex:\n   67   	Gui, submit, nohide\n   68:  	any_word_search(\"dbex\",\"lvdbex\", pesquisadbex, Listdbex)\n   69   	;pesquisalvmod(\"dbex\",\"lvdbex\",pesquisadbex,Listdbex)\n   70   	return \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\estruturas_view.ahk:\n   42  	pesquisarlv:\n   43  	Gui, Submit, Nohide\n   44: 	any_word_search(\"massaestrut\", \"lv1\", pesquisarlv, Listestrut)\n   45  	return\n   46  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\linkar_modelos_view.ahk:\n   43  	pesquisa_linkar_modelos:\n   44  	Gui, Submit, Nohide\n   45: 	any_word_search(\"linkar_modelos_view\", \"linkar_modelos_lv\", pesquisa_linkar_modelos, lista_pesquisa_linkar_modelos)\n   46  	return\n   47  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\selecionar_campo_externo_view.ahk:\n   57  	pesquisa_selecionar_campo_externo:\n   58  	Gui, Submit, Nohide\n   59: 	any_word_search(\"selecionar_campo_externo_view\", \"selecionar_campo_externo_lv\", pesquisa_selecionar_campo_externo, lista_pesquisa_selecionar_campos)\n   60  	return\n   61  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\shared\\inserir_imagem_db_view.ahk:\n   41  	pesquisa_inserir_imagem_db_view:\n   42  	Gui,submit,nohide\n   43: 	any_word_search(\"inserir_imagem_db_view\", \"inserir_imagem_db_lv\", pesquisa_inserir_imagem_db_view, Lista_de_pesquisa)\n   44  	return\n   45  \n\n9 matches across 8 files\n\n\nSearching 331 files for \"reset_debug\"\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\Lib\\general_funcs.ahk:\n  165  	*/\n  166  \n  167: 	reset_debug(){\n  168  		FileDelete, % \"debug.txt\"\n  169  	}\n\n1 match in 1 file\n\n\nSearching 331 files for \"any word search\"\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\Lib\\promto_search_lv.ahk:\n    3  	any_word_search(window, lv, keyword, list){\n    4  		Global search\n    5: 		MsgBox, % \"any word search!\"\n    6  		this.window := window, this.lv := lv\n    7  		this.keyword := keyword, this.list := list\n\n1 match in 1 file\n\n\nSearching 331 files for \"loadlvdbex(\"\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\controllers\\db_ex_controller.ahk:\n  153  	carregar lv db ex\n  154  */\n  155: loadlvdbex(){\n  156  	Global \n  157  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\controllers\\inserir_valores_controller.ahk:\n   14  		%codname%[selectedvaluecol] := checkedval\n   15  	}\n   16: 	loadlvdbex()	\n   17  }\n   18  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\Scripts\\automaticsendemail.ahk:\n  130   return \n  131  \n  132: loadlvdbex(){\n  133  	Global \n  134  	Gui,dbex:default\n  ...\n  184  			%codname%[colvalue]:=checkedval\n  185  		}\n  186: 		loadlvdbex()\n  187  		return \n  188  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\Scripts\\keyboardkeylogger.ahk:\n  314   return \n  315  \n  316: loadlvdbex(){\n  317  	Global \n  318  	Gui,dbex:default\n  ...\n  368  			%codname%[colvalue]:=checkedval\n  369  		}\n  370: 		loadlvdbex()\n  371  		return \n  372  \n\n6 matches across 4 files\n\n\nSearching 331 files for \"any_word_search\"\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\Promto(Front-End)(Native).ahk:\n  714  			pesquisaraddmass:\n  715  			Gui,submit,nohide\n  716: 			any_word_search(\"addmassa\",\"lvaddmass\",pesquisaraddmass,Listaddmass)\n  717  			return \n  718  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\Lib\\promto_search_lv.ahk:\n    4  	}	\n    5  \n    6: 	any_word_search(window, lv, keyword){\n    7  		Global search	\n    8  		this.window := window, this.lv := lv\n    .\n   61  		for, each, item in this.result{\n   62  		  this.list[item, number] := value \n   63: 		  this.any_word_search(this.window, this.lv, this.keyword)\n   64  		} \n   65  	}\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\Lib\\Promtolib.ahk:\n 2141  }\n 2142  \n 2143: any_word_search(wname, lvname, string, List){\n 2144  	Gui,%wname%:default\n 2145    Gui, listview,%lvname%\n ....\n 2187  }\n 2188  \n 2189: any_word_search_backup(wname, lvname, string,List){\n 2190  	Gui,%wname%:default\n 2191      Gui,listview,%lvname%\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\cert_view.ahk:\n   53  	search_cert:\n   54  	Gui, Submit, Nohide\n   55: 	any_word_search(\"cert_view\", \"lv_cert\", search_cert, search_cert_list)\n   56  	return\n   57  }\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\db_ex_view.ahk:\n   66   	pesquisadbex:\n   67   	Gui, submit, nohide\n   68:  	search.LV.any_word_search(\"dbex\",\"lvdbex\", pesquisadbex)\n   69   	return \n   70  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\estruturas_view.ahk:\n   42  	pesquisarlv:\n   43  	Gui, Submit, Nohide\n   44: 	any_word_search(\"massaestrut\", \"lv1\", pesquisarlv, Listestrut)\n   45  	return\n   46  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\linkar_modelos_view.ahk:\n   43  	pesquisa_linkar_modelos:\n   44  	Gui, Submit, Nohide\n   45: 	any_word_search(\"linkar_modelos_view\", \"linkar_modelos_lv\", pesquisa_linkar_modelos, lista_pesquisa_linkar_modelos)\n   46  	return\n   47  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\selecionar_campo_externo_view.ahk:\n   57  	pesquisa_selecionar_campo_externo:\n   58  	Gui, Submit, Nohide\n   59: 	any_word_search(\"selecionar_campo_externo_view\", \"selecionar_campo_externo_lv\", pesquisa_selecionar_campo_externo, lista_pesquisa_selecionar_campos)\n   60  	return\n   61  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\shared\\inserir_imagem_db_view.ahk:\n   41  	pesquisa_inserir_imagem_db_view:\n   42  	Gui,submit,nohide\n   43: 	any_word_search(\"inserir_imagem_db_view\", \"inserir_imagem_db_lv\", pesquisa_inserir_imagem_db_view, Lista_de_pesquisa)\n   44  	return\n   45  \n\n11 matches across 9 files\n\n\nSearching 331 files for \"pesquisaraddmass\"\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\Promto(Front-End)(Native).ahk:\n  712  			\n  713  \n  714: 			pesquisaraddmass:\n  715  			Gui,submit,nohide\n  716: 			any_word_search(\"addmassa\",\"lvaddmass\",pesquisaraddmass,Listaddmass)\n  717  			return \n  718  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\controllers\\estruturas_controller.ahk:\n  111  	Gui,color,%GLOBAL_COLOR%\n  112  	Gui,addmassa:+ownerM\n  113: 	Gui,add,edit,x415 gpesquisaraddmass w400 r1 vpesquisaraddmass uppercase,Pesquisar!!!\n  114  	Gui,add,treeview,xm y+5 w400 h300 vtvaddmass gtvaddmass,\n  115  	Gui,add,listview, x+5 w400 h300 vlvaddmass checked glvaddmass,Codigos|DR\n\n4 matches across 2 files\n\n\nSearching 331 files for \"any_word_search\"\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\Promto(Front-End)(Native).ahk:\n  714  			pesquisaraddmass:\n  715  			Gui,submit,nohide\n  716: 			search.LV.any_word_search(\"dbex\",\"lvdbex\", pesquisaraddmass)\n  717  			return \n  718  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\Lib\\promto_search_lv.ahk:\n    4  	}	\n    5  \n    6: 	any_word_search(window, lv, keyword){\n    7  		Global search	\n    8  		this.window := window, this.lv := lv\n    .\n   61  		for, each, item in this.result{\n   62  		  this.list[item, number] := value \n   63: 		  this.any_word_search(this.window, this.lv, this.keyword)\n   64  		} \n   65  	}\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\Lib\\Promtolib.ahk:\n 2141  }\n 2142  \n 2143: any_word_search(wname, lvname, string, List){\n 2144  	Gui,%wname%:default\n 2145    Gui, listview,%lvname%\n ....\n 2187  }\n 2188  \n 2189: any_word_search_backup(wname, lvname, string,List){\n 2190  	Gui,%wname%:default\n 2191      Gui,listview,%lvname%\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\cert_view.ahk:\n   53  	search_cert:\n   54  	Gui, Submit, Nohide\n   55: 	any_word_search(\"cert_view\", \"lv_cert\", search_cert, search_cert_list)\n   56  	return\n   57  }\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\db_ex_view.ahk:\n   66   	pesquisadbex:\n   67   	Gui, submit, nohide\n   68:  	search.LV.any_word_search(\"dbex\",\"lvdbex\", pesquisadbex)\n   69   	return \n   70  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\estruturas_view.ahk:\n   42  	pesquisarlv:\n   43  	Gui, Submit, Nohide\n   44: 	any_word_search(\"massaestrut\", \"lv1\", pesquisarlv, Listestrut)\n   45  	return\n   46  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\linkar_modelos_view.ahk:\n   43  	pesquisa_linkar_modelos:\n   44  	Gui, Submit, Nohide\n   45: 	any_word_search(\"linkar_modelos_view\", \"linkar_modelos_lv\", pesquisa_linkar_modelos, lista_pesquisa_linkar_modelos)\n   46  	return\n   47  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\selecionar_campo_externo_view.ahk:\n   57  	pesquisa_selecionar_campo_externo:\n   58  	Gui, Submit, Nohide\n   59: 	any_word_search(\"selecionar_campo_externo_view\", \"selecionar_campo_externo_lv\", pesquisa_selecionar_campo_externo, lista_pesquisa_selecionar_campos)\n   60  	return\n   61  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\shared\\inserir_imagem_db_view.ahk:\n   41  	pesquisa_inserir_imagem_db_view:\n   42  	Gui,submit,nohide\n   43: 	any_word_search(\"inserir_imagem_db_view\", \"inserir_imagem_db_lv\", pesquisa_inserir_imagem_db_view, Lista_de_pesquisa)\n   44  	return\n   45  \n\n11 matches across 9 files\n\n\nSearching 331 files for \"search_cert_list\"\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\cert_view.ahk:\n    1  cert_view(v_info, owner){\n    2: 	Global db, SMALL_FONT, GLOBAL_COLOR, search_cert_list, global_cert_path\n    3  	Static s_info, search_cert, lv_cert\n    4  \n    .\n   35  	}\n   36  	Gui, Show,, Lista de certificados\n   37: 	search_cert_list := db.get_values(\"*\", \"certificados\")\n   38: 	search.LV.set_searcheable_list(search_cert_list)\n   39  	db.load_lv(\"cert_view\", \"lv_cert\", \"certificados\")\n   40  	return\n\n3 matches in 1 file\n\n\nSearching 331 files for \"any_word_search\"\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\Promto(Front-End)(Native).ahk:\n  714  			pesquisaraddmass:\n  715  			Gui,submit,nohide\n  716: 			search.LV.any_word_search(\"dbex\",\"lvdbex\", pesquisaraddmass)\n  717  			return \n  718  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\Lib\\promto_search_lv.ahk:\n    4  	}	\n    5  \n    6: 	any_word_search(window, lv, keyword){\n    7  		Global search	\n    8  		this.window := window, this.lv := lv\n    .\n   61  		for, each, item in this.result{\n   62  		  this.list[item, number] := value \n   63: 		  this.any_word_search(this.window, this.lv, this.keyword)\n   64  		} \n   65  	}\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\Lib\\Promtolib.ahk:\n 2141  }\n 2142  \n 2143: any_word_search(wname, lvname, string, List){\n 2144  	Gui,%wname%:default\n 2145    Gui, listview,%lvname%\n ....\n 2187  }\n 2188  \n 2189: any_word_search_backup(wname, lvname, string,List){\n 2190  	Gui,%wname%:default\n 2191      Gui,listview,%lvname%\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\cert_view.ahk:\n   53  	search_cert:\n   54  	Gui, Submit, Nohide\n   55:   search.LV.any_word_search(\"cert_view\", \"lv_cert\", search_cert)\n   56  	return \n   57  }\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\db_ex_view.ahk:\n   66   	pesquisadbex:\n   67   	Gui, submit, nohide\n   68:  	search.LV.any_word_search(\"dbex\",\"lvdbex\", pesquisadbex)\n   69   	return \n   70  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\estruturas_view.ahk:\n   42  	pesquisarlv:\n   43  	Gui, Submit, Nohide\n   44: 	any_word_search(\"massaestrut\", \"lv1\", pesquisarlv, Listestrut)\n   45  	return\n   46  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\linkar_modelos_view.ahk:\n   43  	pesquisa_linkar_modelos:\n   44  	Gui, Submit, Nohide\n   45: 	any_word_search(\"linkar_modelos_view\", \"linkar_modelos_lv\", pesquisa_linkar_modelos, lista_pesquisa_linkar_modelos)\n   46  	return\n   47  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\selecionar_campo_externo_view.ahk:\n   57  	pesquisa_selecionar_campo_externo:\n   58  	Gui, Submit, Nohide\n   59: 	any_word_search(\"selecionar_campo_externo_view\", \"selecionar_campo_externo_lv\", pesquisa_selecionar_campo_externo, lista_pesquisa_selecionar_campos)\n   60  	return\n   61  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\shared\\inserir_imagem_db_view.ahk:\n   41  	pesquisa_inserir_imagem_db_view:\n   42  	Gui,submit,nohide\n   43: 	any_word_search(\"inserir_imagem_db_view\", \"inserir_imagem_db_lv\", pesquisa_inserir_imagem_db_view, Lista_de_pesquisa)\n   44  	return\n   45  \n\n11 matches across 9 files\n\n\nSearching 331 files for \"listestrut\"\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\controllers\\estruturas_controller.ahk:\n  236  		code_table := info.empresa[2] info.tipo[2] info.familia[2] info.subfamilia[2] S_ETF_hashmask[selected_model] \"Codigo\"\n  237  		db.load_lv(window, lv, code_table, 1)\n  238: 		Listestrut := db.load_table_in_array(code_table)\n  239  	}\n  240  }\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\estruturas_view.ahk:\n   43  	Gui, Submit, Nohide\n   44  	search.LV.any_word_search(\"massaestrut\", \"lv1\", pesquisarlv)\n   45: 	any_word_search(\"massaestrut\", \"lv1\", pesquisarlv, Listestrut)\n   46  	return\n   47  \n\n2 matches across 2 files\n\n\nSearching 331 files for \"any_word_search\"\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\Promto(Front-End)(Native).ahk:\n  714  			pesquisaraddmass:\n  715  			Gui,submit,nohide\n  716: 			search.LV.any_word_search(\"dbex\",\"lvdbex\", pesquisaraddmass)\n  717  			return \n  718  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\Lib\\promto_search_lv.ahk:\n    4  	}	\n    5  \n    6: 	any_word_search(window, lv, keyword){\n    7  		Global search	\n    8  		this.window := window, this.lv := lv\n    .\n   61  		for, each, item in this.result{\n   62  		  this.list[item, number] := value \n   63: 		  this.any_word_search(this.window, this.lv, this.keyword)\n   64  		} \n   65  	}\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\Lib\\Promtolib.ahk:\n 2141  }\n 2142  \n 2143: any_word_search(wname, lvname, string, List){\n 2144  	Gui,%wname%:default\n 2145    Gui, listview,%lvname%\n ....\n 2187  }\n 2188  \n 2189: any_word_search_backup(wname, lvname, string,List){\n 2190  	Gui,%wname%:default\n 2191      Gui,listview,%lvname%\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\cert_view.ahk:\n   53  	search_cert:\n   54  	Gui, Submit, Nohide\n   55:   search.LV.any_word_search(\"cert_view\", \"lv_cert\", search_cert)\n   56  	return \n   57  }\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\db_ex_view.ahk:\n   66   	pesquisadbex:\n   67   	Gui, submit, nohide\n   68:  	search.LV.any_word_search(\"dbex\",\"lvdbex\", pesquisadbex)\n   69   	return \n   70  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\estruturas_view.ahk:\n   42  	pesquisarlv:\n   43  	Gui, Submit, Nohide\n   44: 	search.LV.any_word_search(\"massaestrut\", \"lv1\", pesquisarlv)\n   45  	return\n   46  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\linkar_modelos_view.ahk:\n   43  	pesquisa_linkar_modelos:\n   44  	Gui, Submit, Nohide\n   45: 	any_word_search(\"linkar_modelos_view\", \"linkar_modelos_lv\", pesquisa_linkar_modelos, lista_pesquisa_linkar_modelos)\n   46  	return\n   47  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\selecionar_campo_externo_view.ahk:\n   57  	pesquisa_selecionar_campo_externo:\n   58  	Gui, Submit, Nohide\n   59: 	any_word_search(\"selecionar_campo_externo_view\", \"selecionar_campo_externo_lv\", pesquisa_selecionar_campo_externo, lista_pesquisa_selecionar_campos)\n   60  	return\n   61  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\shared\\inserir_imagem_db_view.ahk:\n   41  	pesquisa_inserir_imagem_db_view:\n   42  	Gui,submit,nohide\n   43: 	any_word_search(\"inserir_imagem_db_view\", \"inserir_imagem_db_lv\", pesquisa_inserir_imagem_db_view, Lista_de_pesquisa)\n   44  	return\n   45  \n\n11 matches across 9 files\n\n\nSearching 331 files for \"any_word_search\"\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\Promto(Front-End)(Native).ahk:\n  714  			pesquisaraddmass:\n  715  			Gui,submit,nohide\n  716: 			search.LV.any_word_search(\"dbex\",\"lvdbex\", pesquisaraddmass)\n  717  			return \n  718  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\Lib\\promto_search_lv.ahk:\n    4  	}	\n    5  \n    6: 	any_word_search(window, lv, keyword){\n    7  		Global search	\n    8  		this.window := window, this.lv := lv\n    .\n   61  		for, each, item in this.result{\n   62  		  this.list[item, number] := value \n   63: 		  this.any_word_search(this.window, this.lv, this.keyword)\n   64  		} \n   65  	}\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\Lib\\Promtolib.ahk:\n 2141  }\n 2142  \n 2143: any_word_search(wname, lvname, string, List){\n 2144  	Gui,%wname%:default\n 2145    Gui, listview,%lvname%\n ....\n 2187  }\n 2188  \n 2189: any_word_search_backup(wname, lvname, string,List){\n 2190  	Gui,%wname%:default\n 2191      Gui,listview,%lvname%\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\cert_view.ahk:\n   53  	search_cert:\n   54  	Gui, Submit, Nohide\n   55:   search.LV.any_word_search(\"cert_view\", \"lv_cert\", search_cert)\n   56  	return \n   57  }\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\db_ex_view.ahk:\n   66   	pesquisadbex:\n   67   	Gui, submit, nohide\n   68:  	search.LV.any_word_search(\"dbex\",\"lvdbex\", pesquisadbex)\n   69   	return \n   70  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\estruturas_view.ahk:\n   42  	pesquisarlv:\n   43  	Gui, Submit, Nohide\n   44: 	search.LV.any_word_search(\"massaestrut\", \"lv1\", pesquisarlv)\n   45  	return\n   46  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\linkar_modelos_view.ahk:\n   44  	pesquisa_linkar_modelos:\n   45  	Gui, Submit, Nohide\n   46: 	search.LV.any_word_search(\"linkar_modelos_view\", \"linkar_modelos_lv\", pesquisa_linkar_modelos)\n   47  	return\n   48  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\selecionar_campo_externo_view.ahk:\n   57  	pesquisa_selecionar_campo_externo:\n   58  	Gui, Submit, Nohide\n   59: 	any_word_search(\"selecionar_campo_externo_view\", \"selecionar_campo_externo_lv\", pesquisa_selecionar_campo_externo, lista_pesquisa_selecionar_campos)\n   60  	return\n   61  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\shared\\inserir_imagem_db_view.ahk:\n   41  	pesquisa_inserir_imagem_db_view:\n   42  	Gui,submit,nohide\n   43: 	any_word_search(\"inserir_imagem_db_view\", \"inserir_imagem_db_lv\", pesquisa_inserir_imagem_db_view, Lista_de_pesquisa)\n   44  	return\n   45  \n\n11 matches across 9 files\n\n\nSearching 331 files for \"any_word_search\"\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\Promto(Front-End)(Native).ahk:\n  714  			pesquisaraddmass:\n  715  			Gui,submit,nohide\n  716: 			search.LV.any_word_search(\"dbex\",\"lvdbex\", pesquisaraddmass)\n  717  			return \n  718  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\Lib\\promto_search_lv.ahk:\n    4  	}	\n    5  \n    6: 	any_word_search(window, lv, keyword){\n    7  		Global search	\n    8  		this.window := window, this.lv := lv\n    .\n   61  		for, each, item in this.result{\n   62  		  this.list[item, number] := value \n   63: 		  this.any_word_search(this.window, this.lv, this.keyword)\n   64  		} \n   65  	}\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\Lib\\Promtolib.ahk:\n 2141  }\n 2142  \n 2143: any_word_search(wname, lvname, string, List){\n 2144  	Gui,%wname%:default\n 2145    Gui, listview,%lvname%\n ....\n 2187  }\n 2188  \n 2189: any_word_search_backup(wname, lvname, string,List){\n 2190  	Gui,%wname%:default\n 2191      Gui,listview,%lvname%\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\cert_view.ahk:\n   53  	search_cert:\n   54  	Gui, Submit, Nohide\n   55:   search.LV.any_word_search(\"cert_view\", \"lv_cert\", search_cert)\n   56  	return \n   57  }\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\db_ex_view.ahk:\n   66   	pesquisadbex:\n   67   	Gui, submit, nohide\n   68:  	search.LV.any_word_search(\"dbex\",\"lvdbex\", pesquisadbex)\n   69   	return \n   70  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\estruturas_view.ahk:\n   42  	pesquisarlv:\n   43  	Gui, Submit, Nohide\n   44: 	search.LV.any_word_search(\"massaestrut\", \"lv1\", pesquisarlv)\n   45  	return\n   46  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\linkar_modelos_view.ahk:\n   44  	pesquisa_linkar_modelos:\n   45  	Gui, Submit, Nohide\n   46: 	search.LV.any_word_search(\"linkar_modelos_view\", \"linkar_modelos_lv\", pesquisa_linkar_modelos)\n   47  	return\n   48  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\selecionar_campo_externo_view.ahk:\n   57  	pesquisa_selecionar_campo_externo:\n   58  	Gui, Submit, Nohide\n   59: 	search.LV.any_word_search(\"selecionar_campo_externo_view\", \"selecionar_campo_externo_lv\", pesquisa_selecionar_campo_externo\")\n   60  	return\n   61  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\shared\\inserir_imagem_db_view.ahk:\n   41  	pesquisa_inserir_imagem_db_view:\n   42  	Gui,submit,nohide\n   43: 	any_word_search(\"inserir_imagem_db_view\", \"inserir_imagem_db_lv\", pesquisa_inserir_imagem_db_view, Lista_de_pesquisa)\n   44  	return\n   45  \n\n11 matches across 9 files\n\n\nSearching 331 files for \"any_word_search\"\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\Promto(Front-End)(Native).ahk:\n  714  			pesquisaraddmass:\n  715  			Gui,submit,nohide\n  716: 			search.LV.any_word_search(\"dbex\",\"lvdbex\", pesquisaraddmass)\n  717  			return \n  718  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\Lib\\promto_search_lv.ahk:\n    4  	}	\n    5  \n    6: 	any_word_search(window, lv, keyword){\n    7  		Global search	\n    8  		this.window := window, this.lv := lv\n    .\n   61  		for, each, item in this.result{\n   62  		  this.list[item, number] := value \n   63: 		  this.any_word_search(this.window, this.lv, this.keyword)\n   64  		} \n   65  	}\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\Lib\\Promtolib.ahk:\n 2141  }\n 2142  \n 2143: any_word_search(wname, lvname, string, List){\n 2144  	Gui,%wname%:default\n 2145    Gui, listview,%lvname%\n ....\n 2187  }\n 2188  \n 2189: any_word_search_backup(wname, lvname, string,List){\n 2190  	Gui,%wname%:default\n 2191      Gui,listview,%lvname%\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\cert_view.ahk:\n   53  	search_cert:\n   54  	Gui, Submit, Nohide\n   55:   search.LV.any_word_search(\"cert_view\", \"lv_cert\", search_cert)\n   56  	return \n   57  }\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\db_ex_view.ahk:\n   66   	pesquisadbex:\n   67   	Gui, submit, nohide\n   68:  	search.LV.any_word_search(\"dbex\",\"lvdbex\", pesquisadbex)\n   69   	return \n   70  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\estruturas_view.ahk:\n   42  	pesquisarlv:\n   43  	Gui, Submit, Nohide\n   44: 	search.LV.any_word_search(\"massaestrut\", \"lv1\", pesquisarlv)\n   45  	return\n   46  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\linkar_modelos_view.ahk:\n   44  	pesquisa_linkar_modelos:\n   45  	Gui, Submit, Nohide\n   46: 	search.LV.any_word_search(\"linkar_modelos_view\", \"linkar_modelos_lv\", pesquisa_linkar_modelos)\n   47  	return\n   48  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\selecionar_campo_externo_view.ahk:\n   57  	pesquisa_selecionar_campo_externo:\n   58  	Gui, Submit, Nohide\n   59: 	search.LV.any_word_search(\"selecionar_campo_externo_view\", \"selecionar_campo_externo_lv\", pesquisa_selecionar_campo_externo\")\n   60  	return\n   61  \n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\shared\\inserir_imagem_db_view.ahk:\n   41  	pesquisa_inserir_imagem_db_view:\n   42  	Gui,submit,nohide\n   43: 	search.LV.any_word_search(\"inserir_imagem_db_view\", \"inserir_imagem_db_lv\", pesquisa_inserir_imagem_db_view)\n   44  	return\n   45  \n\n11 matches across 9 files\n\n\nSearching 3312 files for \"insert_mod_info\"\n\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\Lib\\promto_sql_mariaDB_log.ahk:\n    3  		Insere informacoes de modificacao de produto de certo usuario\n    4  	*/\n    5: 	insert_mod_info(info, user, msg){\n    6  		 global mariaDB\n    7  		 \n\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\array1.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\array2.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\array3.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\array4.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\assignment.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\concatstring.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\const.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\empty-blocks.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\forstatement.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\if.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\ifreturn.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\ifreturn2.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\issue10.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\issue11.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\issue13.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\issue14.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\issue16.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\issue17.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\issue20.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\issue21.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\issue25.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\issue27.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\issue28.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\issue29.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\issue30.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\issue34.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\issue4.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\issue48.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\issue50.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\issue53.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\issue54.1.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\issue68.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\issue69.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\issue9.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\mangle.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\null_string.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\strict-equals.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\var.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\whitespace.js\nUnable to open C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\node-modules\\feed\\node_modules\\grunt-contrib-nodeunit\\node_modules\\nodeunit\\node_modules\\tap\\node_modules\\runforcover\\node_modules\\bunker\\node_modules\\burrito\\node_modules\\uglify-js\\test\\unit\\compress\\test\\with.js\nC:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\views\\insert_mod_msg_view.ahk:\n   26  	Gui, Submit, Nohide\n   27  	Gui, insert_mod_msg_view:destroy\n   28: 	db.Log.insert_mod_info(info, USER_NAME, msg_value_edit)\n   29  	load_mod_info(info)\n   30  	load_formation_in_main_window(info)\n\n2 matches across 2 files\n",
			"settings":
			{
				"buffer_size": 36075,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "Lib/promto_search_lv.ahk",
			"settings":
			{
				"buffer_size": 1590,
				"line_ending": "Windows"
			}
		},
		{
			"file": "test1.ahk",
			"settings":
			{
				"buffer_size": 251,
				"line_ending": "Windows"
			}
		},
		{
			"file": "java/ConvertImage.java",
			"settings":
			{
				"buffer_size": 1779,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Lib/promto_sql_mariaDB_usuario.ahk",
			"settings":
			{
				"buffer_size": 1879,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/mcruz/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
			"settings":
			{
				"buffer_size": 132,
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/inserir_ETF_view.ahk",
			"settings":
			{
				"buffer_size": 3079,
				"line_ending": "Windows"
			}
		},
		{
			"file": "views/inserir_modelo_view.ahk",
			"settings":
			{
				"buffer_size": 9301,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"package",
				"Package Control: Remove Package"
			],
			[
				"fetch",
				"Fetch: File"
			],
			[
				"fet",
				"Fetch: Manage"
			],
			[
				"package insta",
				"Package Control: Install Package"
			],
			[
				"package ins",
				"Package Control: Install Package"
			],
			[
				"package ",
				"Package Control: Install Package"
			],
			[
				"package contrl",
				"Package Control: Install Package"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 160.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/node-modules/feed/public/package.json",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/controllers/back_up_controller.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Lib/DataBaseAbstract.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Lib/Base.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/FTP/FTP/oFTP.GetFileInfo.htm",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Lib/general_funcs.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/index.html",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Scripts/IncrementalSearch3.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Promto(Front-End)(Native).ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Lib/promto_sql_mariaDB.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Lib/promto_sql_mariaDB_familia.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/node-modules/feed/node_modules/grunt-node-webkit-builder/node_modules/archiver/node_modules/readable-stream/node_modules/inherits/inherits.js",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/views/manager_users_view.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/controllers/inserir_campos_controller.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/views/inserir_ETF_view.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Lib/ADO.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Lib/ArchLogger.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/views/alterar_valores_campo_view.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/views/inserir_db_ex_view.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/views/insert_user_view.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/controllers/inserir_bloqueio_controller.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/controllers/inserir_valores_controller.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/views/inserir_bloqueio_view.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/views/inserir_campos_view.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/views/inserir_modelo_view.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/views/inserir_todos_view.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/views/inserir_val_view.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/views/inserir_valores_view.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/views/inserir_campo_esp_view.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/views/shared/inserir_imagem_view.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/views/shared/inserir_dialogo_2_fields.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Lib/promto_sql_mariaDB_empresa.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/FTP/FTP/oFTP.RemoveDirectory.htm",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/FTP/FTP/oFile.htm",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Lib/promto_sql_mariaDB_modelo.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/views/linkar_modelos_view.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/views/list_options_view.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Lib/promto_sql_mariaDB_status.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Lib/promto_sql_mariaDB_subfamilia.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/views/db_ex_view.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Lib/promto_sql_mariaDB_usuario.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/node/node_modules/grunt-node-webkit-builder/node_modules/unzip/node_modules/binary/test/bu.js",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/controllers/manager_users_controller.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Manifest.txt",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/FTP/FTP/oFTP.CreateDirectory.htm",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/FTP/FTP.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/node-modules/feed/node_modules/grunt-contrib-nodeunit/node_modules/nodeunit/node_modules/tap/node_modules/slide/lib/async-map.js",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/node-modules/feed/node_modules/grunt-node-webkit-builder/node_modules/archiver/node_modules/buffer-crc32/README.md",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Lib/positions.xml",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/java/ConvertImage.java",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Lib/promto_sql_mariaDB_estrutura.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Lib/promto_sql_mariaDB_tipo.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Lib/promto_search_lv.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/views/selecionar_campo_externo_view.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/settings.json",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/views/linkar_campos_view.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/lista_codigos.txt",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/launcher.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/print/E.html",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/README.md",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Lib/promto_sql_mariaDB_log.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/views/reload_hashmask_view.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/temp/temp_export.csv",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/temp.csv",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Lib/set_button_to_a_function.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Scripts/IncrementalSearch2",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/FTP/Properties.TXT",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/promto_data.xml",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Lib/Promtolib.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Lib/RecordSetMySQL.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Lib/RecordSetADO.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Lib/promto_sql_mariaDB_certificado.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Lib/promto_sql.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/doc/PromtoLib.doc",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/controllers/db_ex_controller.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/dkfdkfnbkd",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/java/ConvertImageFolder_old.java",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/CRUD.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/print/.html",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/._.gitignore",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Scripts/gettextfromimage.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Lib/gdiclass.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Lib/json_parser.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/test1.ahk",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/Lib/promto_json.ahk",
		"/C/Users/mcruz/Downloads/autohotkey.vim",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/pull.bat",
		"/C/Users/mcruz/Documents/GitHub/Promto-Autohotkey/views/nova_conexao_view.ahk"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"make_update",
			"back_up",
			"backup",
			"backup_menu",
			"a ordem",
			"ordem",
			"excluir",
			"linkar",
			"salvar_ordem_prefixo",
			"alterar ordem",
			"modelo.incluir(",
			"db.modelo.incluir(",
			"db.modelo.incluir",
			"inserir_modelo",
			"salvar_descricao_geral_button",
			"get_item_info(",
			"info",
			"get_info",
			"empresa",
			"log",
			"s_info",
			"incluir(",
			"insert_mod_info",
			"m:",
			"usuario",
			"subfam",
			"find_all",
			"check",
			"xml",
			"schema",
			"any_word_search",
			"lista_de_pesquisa",
			"search.lv",
			"any_word_search",
			"search",
			"lista_pesquisa",
			"lista_pesquisa_selecionar",
			"search.",
			"any_word_search",
			"listestrut",
			"any_word_search",
			"search_cert_list",
			"search_cert",
			"any_word_search",
			"list",
			"pesquisaraddmass",
			"listaddmass",
			"pesquisaraddmass",
			"pesquisaradd",
			"pesquisar",
			"gpesquisaraddmass",
			"pesquisaraddmass",
			"any_word_search",
			"loadlvdbex(",
			"search",
			"listdbex",
			"this.result",
			"get_selected(",
			"loadlvdbex(",
			"loadlvdbex",
			"any word search",
			"reset_debug",
			"clear_lv",
			"this.clear",
			"clear_",
			"this.include_in_lv",
			"include_in_lv",
			"clear_lv",
			"this.clear_lv",
			"this.redraw",
			"redraw",
			"search",
			"A_Index",
			"List",
			"any_word_search",
			"dbex:",
			"loadJSON",
			"msgbox",
			"get_reference(",
			"space",
			"value",
			"get_values(",
			"MSGBOX",
			"MSGBOX,"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Promto(Front-End)(Native).ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 90297,
						"regions":
						{
						},
						"selection":
						[
							[
								6202,
								6213
							]
						],
						"settings":
						{
							"highlight_line": false,
							"history_list_is_closing": true,
							"incomplete_sync": null,
							"remote_loading": false,
							"sftp_duplicate_views": 0,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false,
							"vintage":
							{
								"_vintageous_glue_until_normal_mode": false,
								"action": null,
								"action_count": "",
								"capture_register": false,
								"mode": "mode_normal",
								"motion": null,
								"motion_count": "",
								"normal_insert_count": "1",
								"partial_sequence": "",
								"register": "\"",
								"repeat_data":
								[
									"native",
									[
										"_enter_normal_mode",
										{
											"mode": "mode_insert"
										}
									],
									"mode_insert",
									null
								],
								"sequence": "",
								"xpos": 7
							}
						},
						"translation.x": 0.0,
						"translation.y": 3245.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "controllers/update_controller.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 196,
						"regions":
						{
						},
						"selection":
						[
							[
								85,
								85
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "controllers/back_up_controller.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 460,
						"regions":
						{
						},
						"selection":
						[
							[
								246,
								246
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": ".gitignore",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20,
						"regions":
						{
						},
						"selection":
						[
							[
								20,
								20
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/C/Users/mcruz/Documents/GitHub/Sublime-Projects/feed.sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 146,
						"regions":
						{
						},
						"selection":
						[
							[
								146,
								146
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JSON.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "views/manager_users_view.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1019,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "views/insert_user_view.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1151,
						"regions":
						{
						},
						"selection":
						[
							[
								719,
								719
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 285.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "models/generate_feed_model.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 761,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_name": "dfdfd",
							"incomplete_sync": null,
							"remote_loading": false,
							"sftp_duplicate_views": 2,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "models/generate_feed_model.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 763,
						"regions":
						{
						},
						"selection":
						[
							[
								691,
								691
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"sftp_duplicate_views": 0,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "views/cert_view.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1331,
						"regions":
						{
						},
						"selection":
						[
							[
								633,
								633
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "views/estruturas_view.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2335,
						"regions":
						{
						},
						"selection":
						[
							[
								1432,
								1432
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 451.0,
						"zoom_level": 1.0
					},
					"stack_index": 40,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "views/linkar_modelos_view.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1893,
						"regions":
						{
						},
						"selection":
						[
							[
								1254,
								1254
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 546.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "views/selecionar_campo_externo_view.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2488,
						"regions":
						{
						},
						"selection":
						[
							[
								1864,
								1864
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 715.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "views/shared/inserir_imagem_db_view.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3156,
						"regions":
						{
						},
						"selection":
						[
							[
								720,
								720
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 285.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "controllers/estruturas_controller.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8833,
						"regions":
						{
						},
						"selection":
						[
							[
								6638,
								6638
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3928.0,
						"zoom_level": 1.0
					},
					"stack_index": 41,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "views/config_db_ex_view.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 694,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false,
							"vintage":
							{
								"action": null,
								"action_count": "",
								"capture_register": false,
								"mode": "mode_normal",
								"motion": null,
								"motion_count": "",
								"partial_sequence": "",
								"register": "\"",
								"sequence": "",
								"xpos": 0
							}
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 57,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "views/db_ex_view.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2489,
						"regions":
						{
						},
						"selection":
						[
							[
								1142,
								1142
							]
						],
						"settings":
						{
							"highlight_line": false,
							"history_list_is_closing": true,
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false,
							"vintage":
							{
								"_vintageous_glue_until_normal_mode": false,
								"action": null,
								"action_count": "",
								"capture_register": false,
								"mode": "mode_normal",
								"motion": null,
								"motion_count": "",
								"normal_insert_count": "1",
								"partial_sequence": "",
								"register": "\"",
								"repeat_data":
								[
									"native",
									[
										"sequence",
										{
											"commands":
											[
												[
													"insert",
													{
														"characters": " "
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"insert",
													{
														"characters": " "
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"insert",
													{
														"characters": " "
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"insert",
													{
														"characters": " "
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												]
											]
										}
									],
									"mode_insert",
									null
								],
								"sequence": "",
								"xpos": 48
							}
						},
						"translation.x": 0.0,
						"translation.y": 224.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "views/inserir_valores_view.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1409,
						"regions":
						{
						},
						"selection":
						[
							[
								304,
								304
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 50,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "controllers/inserir_valores_controller.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1841,
						"regions":
						{
						},
						"selection":
						[
							[
								287,
								287
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 43,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "views/inserir_db_ex_view.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 692,
						"regions":
						{
						},
						"selection":
						[
							[
								198,
								198
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 45,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "controllers/db_ex_controller.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4678,
						"regions":
						{
						},
						"selection":
						[
							[
								4228,
								4228
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2637.0,
						"zoom_level": 1.0
					},
					"stack_index": 47,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "doc/PromtoLib.doc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3025,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"vintage":
							{
								"action": null,
								"action_count": "",
								"capture_register": false,
								"mode": "mode_normal",
								"motion": null,
								"motion_count": "",
								"partial_sequence": "",
								"register": "\"",
								"sequence": "",
								"xpos": 0
							}
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 54,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "Lib/Promtolib.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 73706,
						"regions":
						{
						},
						"selection":
						[
							[
								20325,
								20325
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"incomplete_sync": null,
							"remote_loading": false,
							"sftp_duplicate_views": 0,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false,
							"vintage":
							{
								"_vintageous_glue_until_normal_mode": false,
								"action": null,
								"action_count": "",
								"capture_register": false,
								"mode": "mode_normal",
								"motion": null,
								"motion_count": "",
								"normal_insert_count": "1",
								"partial_sequence": "",
								"register": "\"",
								"repeat_data":
								[
									"native",
									[
										"sequence",
										{
											"commands":
											[
												[
													"move",
													{
														"by": "word_ends",
														"extend": true,
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "word_ends",
														"extend": true,
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "word_ends",
														"extend": true,
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"insert",
													{
														"characters": " "
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"insert",
													{
														"characters": " "
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"insert",
													{
														"characters": " "
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"insert",
													{
														"characters": "\n"
													}
												]
											]
										}
									],
									null,
									null
								],
								"sequence": "",
								"xpos": 12
							}
						},
						"translation.x": 0.0,
						"translation.y": 16298.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "Lib/promto_search.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 752,
						"regions":
						{
						},
						"selection":
						[
							[
								712,
								712
							]
						],
						"settings":
						{
							"auto_name": "class PromtoSearch{",
							"incomplete_sync": null,
							"remote_loading": false,
							"sftp_duplicate_views": 0,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"vintage":
							{
								"_vintageous_glue_until_normal_mode": true,
								"action": null,
								"action_count": "",
								"capture_register": false,
								"mode": "mode_insert",
								"motion": null,
								"motion_count": "",
								"normal_insert_count": "1",
								"partial_sequence": "",
								"register": "\"",
								"repeat_data":
								[
									"vi",
									"d",
									"mode_normal",
									[
										2,
										2,
										"mode_visual"
									]
								],
								"sequence": "",
								"xpos": 2
							}
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 51,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 59666,
						"regions":
						{
						},
						"selection":
						[
							[
								696,
								696
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"translate_tabs_to_spaces": false,
							"vintage":
							{
								"_vintageous_glue_until_normal_mode": false,
								"action": null,
								"action_count": "",
								"capture_register": false,
								"mode": "mode_normal",
								"motion": null,
								"motion_count": "",
								"normal_insert_count": "1",
								"partial_sequence": "",
								"register": "\"",
								"repeat_data":
								[
									"native",
									[
										"sequence",
										{
											"commands":
											[
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"insert",
													{
														"characters": "\n"
													}
												],
												[
													"insert",
													{
														"characters": "div"
													}
												],
												[
													"insert",
													{
														"characters": "."
													}
												],
												[
													"insert",
													{
														"characters": "main."
													}
												],
												[
													"left_delete",
													null
												],
												[
													"insert",
													{
														"characters": "#main"
													}
												],
												[
													"insert",
													{
														"characters": ">"
													}
												],
												[
													"expand_abbreviation_by_tab",
													null
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "word_ends",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "word_ends",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "words",
														"extend": true,
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "words",
														"extend": true,
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "words",
														"extend": true,
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "words",
														"extend": true,
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "words",
														"extend": true,
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "words",
														"extend": true,
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "words",
														"extend": true,
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "words",
														"extend": true,
														"forward": false
													}
												],
												[
													"left_delete",
													null
												],
												[
													"insert_snippet",
													{
														"contents": "($0)"
													}
												],
												[
													"insert",
													{
														"characters": "div."
													}
												],
												[
													"insert",
													{
														"characters": "main#main"
													}
												],
												[
													"insert",
													{
														"characters": ">"
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"insert",
													{
														"characters": "*5"
													}
												],
												[
													"expand_abbreviation_by_tab",
													null
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "word_ends",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "word_ends",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "words",
														"extend": true,
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "words",
														"extend": true,
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "words",
														"extend": true,
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "words",
														"extend": true,
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "words",
														"extend": true,
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "words",
														"extend": true,
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "words",
														"extend": true,
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"extend": true,
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"extend": true,
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"extend": true,
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"extend": true,
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"extend": true,
														"forward": false
													}
												],
												[
													"left_delete",
													null
												],
												[
													"insert",
													{
														"characters": "div.main"
													}
												],
												[
													"insert",
													{
														"characters": "$"
													}
												],
												[
													"left_delete",
													null
												],
												[
													"insert",
													{
														"characters": "#main>"
													}
												],
												[
													"insert",
													{
														"characters": "ul>"
													}
												],
												[
													"insert_snippet",
													{
														"contents": "($0)"
													}
												],
												[
													"insert",
													{
														"characters": "li>"
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"insert",
													{
														"characters": "*5"
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"insert",
													{
														"characters": "."
													}
												],
												[
													"insert",
													{
														"characters": "lista"
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"expand_abbreviation_by_tab",
													null
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "words",
														"extend": true,
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "words",
														"extend": true,
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"extend": true,
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"extend": true,
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"extend": true,
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"extend": true,
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"extend": true,
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"extend": true,
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"extend": true,
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"extend": true,
														"forward": false
													}
												],
												[
													"left_delete",
													null
												],
												[
													"left_delete",
													null
												]
											]
										}
									],
									null,
									null
								],
								"sequence": "",
								"xpos": 25
							}
						},
						"translation.x": 0.0,
						"translation.y": 171.0,
						"zoom_level": 1.0
					},
					"stack_index": 55,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "/C/Users/mcruz/AppData/Roaming/Sublime Text 3/Packages/User/Fetch.sublime-settings",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 235,
						"regions":
						{
						},
						"selection":
						[
							[
								126,
								126
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"vintage":
							{
								"_vintageous_glue_until_normal_mode": true,
								"action": null,
								"action_count": "",
								"capture_register": false,
								"mode": "mode_insert",
								"motion": null,
								"motion_count": "",
								"normal_insert_count": "1",
								"partial_sequence": "",
								"register": "\"",
								"sequence": "",
								"xpos": 2
							}
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 56,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "Lib/promto_sql_mariaDB_subfamilia.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5749,
						"regions":
						{
						},
						"selection":
						[
							[
								2097,
								2100
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false,
							"vintage":
							{
								"_vintageous_glue_until_normal_mode": false,
								"action": null,
								"action_count": "",
								"capture_register": false,
								"mode": "mode_normal",
								"motion": null,
								"motion_count": "",
								"normal_insert_count": "1",
								"partial_sequence": "",
								"register": "\"",
								"sequence": "",
								"xpos": 36
							}
						},
						"translation.x": 0.0,
						"translation.y": 777.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "Lib/promto_sql_mariaDB_modelo.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22517,
						"regions":
						{
						},
						"selection":
						[
							[
								5914,
								5914
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"sftp_duplicate_views": 0,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3141.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "views/ordem_view.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2276,
						"regions":
						{
						},
						"selection":
						[
							[
								391,
								391
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "views/linkar_campos_view.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1302,
						"regions":
						{
						},
						"selection":
						[
							[
								413,
								413
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": -0.0,
						"translation.y": 114.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "views/inserir_campos_view.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7957,
						"regions":
						{
						},
						"selection":
						[
							[
								6331,
								6331
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"sftp_duplicate_views": 0,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3160.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "Lib/promto_sql_mariaDB.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24038,
						"regions":
						{
						},
						"selection":
						[
							[
								7711,
								7711
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"incomplete_sync": null,
							"remote_loading": false,
							"sftp_duplicate_views": 0,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false,
							"vintage":
							{
								"_vintageous_glue_until_normal_mode": true,
								"action": null,
								"action_count": "",
								"capture_register": false,
								"mode": "mode_insert",
								"motion": null,
								"motion_count": "",
								"normal_insert_count": "1",
								"partial_sequence": "",
								"register": "\"",
								"sequence": "",
								"xpos": 13
							}
						},
						"translation.x": 0.0,
						"translation.y": 5676.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "Lib/promto_sql_mariaDB_log.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1844,
						"regions":
						{
						},
						"selection":
						[
							[
								1005,
								1005
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"sftp_duplicate_views": 0,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 243.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "Lib/promto_sql_mariaDB_empresa.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3273,
						"regions":
						{
						},
						"selection":
						[
							[
								679,
								679
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "Lib/promto_sql_mariaDB_tipo.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6621,
						"regions":
						{
						},
						"selection":
						[
							[
								929,
								929
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"sftp_duplicate_views": 0,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 35,
					"file": "Lib/promto_sql_mariaDB_familia.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8515,
						"regions":
						{
						},
						"selection":
						[
							[
								2845,
								2848
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1374.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 36,
					"file": "json-test.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1264,
						"regions":
						{
						},
						"selection":
						[
							[
								1163,
								1163
							]
						],
						"settings":
						{
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false,
							"vintage":
							{
								"_vintageous_glue_until_normal_mode": true,
								"action": null,
								"action_count": "",
								"capture_register": false,
								"mode": "mode_insert",
								"motion": null,
								"motion_count": "",
								"normal_insert_count": "1",
								"partial_sequence": "",
								"register": "\"",
								"sequence": "",
								"xpos": 0
							}
						},
						"translation.x": 0.0,
						"translation.y": 527.0,
						"zoom_level": 1.0
					},
					"stack_index": 64,
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "Lib/promto_json.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2460,
						"regions":
						{
						},
						"selection":
						[
							[
								498,
								498
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"vintage":
							{
								"_vintageous_glue_until_normal_mode": true,
								"action": null,
								"action_count": "",
								"capture_register": false,
								"mode": "mode_insert",
								"motion": null,
								"motion_count": "",
								"normal_insert_count": "1",
								"partial_sequence": "",
								"register": "\"",
								"repeat_data":
								[
									"vi",
									"c",
									"mode_insert",
									[
										0,
										5,
										"mode_visual"
									]
								],
								"sequence": "",
								"xpos": 45
							}
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 38,
					"file": "promto_feed_json.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6884,
						"regions":
						{
						},
						"selection":
						[
							[
								555,
								555
							]
						],
						"settings":
						{
							"auto_name": "{",
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 39,
					"file": "promto.sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 73,
						"regions":
						{
						},
						"selection":
						[
							[
								70,
								70
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JSON.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				},
				{
					"buffer": 40,
					"file": "promto_JSON.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 378342,
						"regions":
						{
						},
						"selection":
						[
							[
								19,
								19
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"vintage":
							{
								"action": null,
								"action_count": "",
								"capture_register": false,
								"mode": "mode_normal",
								"motion": null,
								"motion_count": "",
								"partial_sequence": "",
								"register": "\"",
								"sequence": "",
								"xpos": 0
							}
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 41,
					"file": "/C/Users/mcruz/Downloads/Jit-2.0.1/Jit/Examples/Spacetree/example1.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3172,
						"regions":
						{
						},
						"selection":
						[
							[
								328,
								328
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"vintage":
							{
								"_vintageous_glue_until_normal_mode": false,
								"_vintageous_gluing_sequence": false,
								"_vintageous_non_interactive": false,
								"action": null,
								"action_count": "",
								"capture_register": false,
								"mode": "mode_normal",
								"motion": null,
								"motion_count": "",
								"partial_sequence": "",
								"register": "\"",
								"sequence": "",
								"xpos": 6
							}
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 59,
					"type": "text"
				},
				{
					"buffer": 42,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2103,
						"regions":
						{
						},
						"selection":
						[
							[
								336,
								336
							]
						],
						"settings":
						{
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"vintage":
							{
								"action": null,
								"action_count": "",
								"capture_register": false,
								"mode": "mode_normal",
								"motion": null,
								"motion_count": "",
								"partial_sequence": "",
								"register": "\"",
								"sequence": "",
								"xpos": 0
							},
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 66,
					"type": "text"
				},
				{
					"buffer": 43,
					"file": "Lib/promto_json_helper.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1448,
						"regions":
						{
						},
						"selection":
						[
							[
								309,
								309
							]
						],
						"settings":
						{
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"vintage":
							{
								"_vintageous_glue_until_normal_mode": true,
								"action": null,
								"action_count": "",
								"capture_register": false,
								"mode": "mode_insert",
								"motion": null,
								"motion_count": "",
								"normal_insert_count": "1",
								"partial_sequence": "",
								"register": "\"",
								"repeat_data":
								[
									"vi",
									"dd",
									"mode_internal_normal",
									null
								],
								"sequence": "",
								"xpos": 12
							}
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 60,
					"type": "text"
				},
				{
					"buffer": 44,
					"file": "Lib/general_funcs.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5431,
						"regions":
						{
						},
						"selection":
						[
							[
								5273,
								5273
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false,
							"vintage":
							{
								"_vintageous_glue_until_normal_mode": true,
								"action": null,
								"action_count": "",
								"capture_register": false,
								"mode": "mode_insert",
								"motion": null,
								"motion_count": "",
								"normal_insert_count": "1",
								"partial_sequence": "",
								"register": "\"",
								"sequence": "",
								"xpos": 2
							}
						},
						"translation.x": 0.0,
						"translation.y": 4289.0,
						"zoom_level": 1.0
					},
					"stack_index": 63,
					"type": "text"
				},
				{
					"buffer": 36,
					"file": "json-test.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1264,
						"regions":
						{
						},
						"selection":
						[
							[
								1019,
								1019
							]
						],
						"settings":
						{
							"highlight_line": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false,
							"vintage":
							{
								"_vintageous_glue_until_normal_mode": true,
								"action": null,
								"action_count": "",
								"capture_register": false,
								"mode": "mode_insert",
								"motion": null,
								"motion_count": "",
								"normal_insert_count": "1",
								"partial_sequence": "",
								"register": "\"",
								"repeat_data":
								[
									"native",
									[
										"sequence",
										{
											"commands":
											[
												[
													"_vi_big_i",
													{
														"count": 1,
														"mode": "mode_internal_normal"
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"insert",
													{
														"characters": "\n\n"
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"reindent",
													null
												],
												[
													"insert_snippet",
													{
														"contents": "\"$0\""
													}
												],
												[
													"insert",
													{
														"characters": "FA"
													}
												],
												[
													"left_delete",
													null
												],
												[
													"left_delete",
													null
												],
												[
													"insert",
													{
														"characters": "t"
													}
												],
												[
													"left_delete",
													null
												],
												[
													"insert",
													{
														"characters": "models"
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"insert",
													{
														"characters": " :"
													}
												],
												[
													"insert",
													{
														"characters": " "
													}
												],
												[
													"left_delete",
													null
												],
												[
													"left_delete",
													null
												],
												[
													"insert",
													{
														"characters": ":"
													}
												],
												[
													"insert",
													{
														"characters": " "
													}
												],
												[
													"insert_snippet",
													{
														"contents": "[$0]"
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"left_delete",
													null
												],
												[
													"left_delete",
													null
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"left_delete",
													null
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"left_delete",
													null
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"insert",
													{
														"characters": ","
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"insert",
													{
														"characters": "m,"
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"left_delete",
													null
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "words",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "words",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "words",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "words",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "words",
														"forward": false
													}
												],
												[
													"insert",
													{
														"characters": "	"
													}
												],
												[
													"left_delete",
													null
												],
												[
													"insert",
													{
														"characters": " "
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"insert",
													{
														"characters": " "
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"insert",
													{
														"characters": "\n"
													}
												],
												[
													"insert",
													{
														"characters": " "
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "lines",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"insert",
													{
														"characters": "\nob."
													}
												],
												[
													"left_delete",
													null
												],
												[
													"insert",
													{
														"characters": "j.companies."
													}
												],
												[
													"insert",
													{
														"characters": "types.famili"
													}
												],
												[
													"insert",
													{
														"characters": "es.insert"
													}
												],
												[
													"insert_snippet",
													{
														"contents": "($0)"
													}
												],
												[
													"insert",
													{
														"characters": "\n"
													}
												],
												[
													"run_macro_file",
													{
														"file": "res://Packages/Default/Add Line Before.sublime-macro"
													}
												],
												[
													"insert_snippet",
													{
														"contents": "($0)"
													}
												],
												[
													"insert",
													{
														"characters": "JOIN"
													}
												],
												[
													"insert",
													{
														"characters": " "
													}
												],
												[
													"left_delete",
													null
												],
												[
													"insert",
													{
														"characters": "\n"
													}
												],
												[
													"run_macro_file",
													{
														"file": "res://Packages/Default/Add Line Before.sublime-macro"
													}
												],
												[
													"wrap_block",
													{
														"begin": "{",
														"end": "}"
													}
												],
												[
													"insert_snippet",
													{
														"contents": "\"$0\""
													}
												],
												[
													"insert",
													{
														"characters": "NAME"
													}
												],
												[
													"left_delete",
													null
												],
												[
													"left_delete",
													null
												],
												[
													"left_delete",
													null
												],
												[
													"left_delete",
													null
												],
												[
													"insert",
													{
														"characters": "name"
													}
												]
											]
										}
									],
									"mode_insert",
									null
								],
								"sequence": "",
								"xpos": 10
							}
						},
						"translation.x": 0.0,
						"translation.y": 583.0,
						"zoom_level": 1.0
					},
					"stack_index": 61,
					"type": "text"
				},
				{
					"buffer": 45,
					"file": "/C/Users/mcruz/Downloads/Jit-2.0.1/Jit/Examples/Spacetree/example1.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29511,
						"regions":
						{
						},
						"selection":
						[
							[
								26756,
								26756
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"vintage":
							{
								"_vintageous_glue_until_normal_mode": false,
								"_vintageous_gluing_sequence": false,
								"_vintageous_non_interactive": false,
								"action": null,
								"action_count": "",
								"capture_register": false,
								"mode": "mode_normal",
								"motion": null,
								"motion_count": "",
								"normal_insert_count": "1",
								"partial_sequence": "",
								"register": "\"",
								"sequence": "",
								"xpos": 17
							}
						},
						"translation.x": 0.0,
						"translation.y": 15392.0,
						"zoom_level": 1.0
					},
					"stack_index": 58,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "Lib/Promtolib.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 73706,
						"regions":
						{
						},
						"selection":
						[
							[
								5640,
								5640
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"incomplete_sync": null,
							"remote_loading": false,
							"sftp_duplicate_views": 0,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false,
							"vintage":
							{
								"_vintageous_glue_until_normal_mode": false,
								"action": null,
								"action_count": "",
								"capture_register": false,
								"mode": "mode_normal",
								"motion": null,
								"motion_count": "",
								"normal_insert_count": "1",
								"partial_sequence": "",
								"register": "\"",
								"repeat_data":
								[
									"native",
									[
										"sequence",
										{
											"commands":
											[
												[
													"move",
													{
														"by": "word_ends",
														"extend": true,
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "word_ends",
														"extend": true,
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "word_ends",
														"extend": true,
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"insert",
													{
														"characters": " "
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": false
													}
												],
												[
													"insert",
													{
														"characters": " "
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"insert",
													{
														"characters": " "
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"move",
													{
														"by": "characters",
														"forward": true
													}
												],
												[
													"insert",
													{
														"characters": "\n"
													}
												]
											]
										}
									],
									null,
									null
								],
								"sequence": "",
								"xpos": 12
							}
						},
						"translation.x": 0.0,
						"translation.y": 5282.0,
						"zoom_level": 1.0
					},
					"stack_index": 46,
					"type": "text"
				},
				{
					"buffer": 46,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 36075,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										190,
										205
									],
									[
										379,
										394
									],
									[
										515,
										530
									],
									[
										757,
										772
									],
									[
										986,
										1001
									],
									[
										1258,
										1273
									],
									[
										1495,
										1510
									],
									[
										1805,
										1820
									],
									[
										2144,
										2159
									],
									[
										2452,
										2463
									],
									[
										2747,
										2762
									],
									[
										3050,
										3061
									],
									[
										3252,
										3263
									],
									[
										3397,
										3408
									],
									[
										3520,
										3531
									],
									[
										3671,
										3682
									],
									[
										3794,
										3805
									],
									[
										4050,
										4065
									],
									[
										4249,
										4264
									],
									[
										4465,
										4480
									],
									[
										4633,
										4648
									],
									[
										4769,
										4784
									],
									[
										5011,
										5026
									],
									[
										5250,
										5265
									],
									[
										5457,
										5472
									],
									[
										5694,
										5709
									],
									[
										6004,
										6019
									],
									[
										6343,
										6358
									],
									[
										6667,
										6683
									],
									[
										6762,
										6778
									],
									[
										6997,
										7013
									],
									[
										7023,
										7039
									],
									[
										7437,
										7452
									],
									[
										7618,
										7633
									],
									[
										7834,
										7849
									],
									[
										8002,
										8017
									],
									[
										8138,
										8153
									],
									[
										8380,
										8395
									],
									[
										8619,
										8634
									],
									[
										8826,
										8841
									],
									[
										9063,
										9078
									],
									[
										9373,
										9388
									],
									[
										9712,
										9727
									],
									[
										10075,
										10091
									],
									[
										10228,
										10244
									],
									[
										10322,
										10338
									],
									[
										10637,
										10652
									],
									[
										10818,
										10833
									],
									[
										11034,
										11049
									],
									[
										11202,
										11217
									],
									[
										11338,
										11353
									],
									[
										11591,
										11606
									],
									[
										11813,
										11828
									],
									[
										12020,
										12035
									],
									[
										12257,
										12272
									],
									[
										12567,
										12582
									],
									[
										12906,
										12921
									],
									[
										13386,
										13396
									],
									[
										13688,
										13698
									],
									[
										13951,
										13966
									],
									[
										14132,
										14147
									],
									[
										14348,
										14363
									],
									[
										14516,
										14531
									],
									[
										14652,
										14667
									],
									[
										14905,
										14920
									],
									[
										15127,
										15142
									],
									[
										15344,
										15359
									],
									[
										15569,
										15584
									],
									[
										15879,
										15894
									],
									[
										16218,
										16233
									],
									[
										16588,
										16603
									],
									[
										16769,
										16784
									],
									[
										16985,
										17000
									],
									[
										17153,
										17168
									],
									[
										17289,
										17304
									],
									[
										17542,
										17557
									],
									[
										17764,
										17779
									],
									[
										17981,
										17996
									],
									[
										18216,
										18231
									],
									[
										18495,
										18510
									],
									[
										18834,
										18849
									],
									[
										19204,
										19219
									],
									[
										19385,
										19400
									],
									[
										19601,
										19616
									],
									[
										19769,
										19784
									],
									[
										19905,
										19920
									],
									[
										20158,
										20173
									],
									[
										20380,
										20395
									],
									[
										20597,
										20612
									],
									[
										20832,
										20847
									],
									[
										21121,
										21136
									],
									[
										21427,
										21442
									],
									[
										21797,
										21812
									],
									[
										21978,
										21993
									],
									[
										22194,
										22209
									],
									[
										22362,
										22377
									],
									[
										22498,
										22513
									],
									[
										22751,
										22766
									],
									[
										22973,
										22988
									],
									[
										23190,
										23205
									],
									[
										23425,
										23440
									],
									[
										23714,
										23729
									],
									[
										24030,
										24045
									],
									[
										24397,
										24412
									],
									[
										35928,
										35943
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								24181,
								24181
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"incomplete_sync": null,
							"line_numbers": false,
							"output_tag": 15,
							"remote_loading": false,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"synced": false,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"vintage":
							{
								"action": null,
								"action_count": "",
								"capture_register": false,
								"mode": "mode_normal",
								"motion": null,
								"motion_count": "",
								"partial_sequence": "",
								"register": "\"",
								"sequence": "",
								"xpos": 30
							}
						},
						"translation.x": 0.0,
						"translation.y": 21481.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 0,
					"file": "Promto(Front-End)(Native).ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 90297,
						"regions":
						{
						},
						"selection":
						[
							[
								19151,
								19151
							]
						],
						"settings":
						{
							"highlight_line": false,
							"incomplete_sync": null,
							"sftp_duplicate_views": 0,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false,
							"vintage":
							{
								"_vintageous_glue_until_normal_mode": false,
								"action": null,
								"action_count": "",
								"capture_register": false,
								"mode": "mode_normal",
								"motion": null,
								"motion_count": "",
								"normal_insert_count": "1",
								"partial_sequence": "",
								"register": "\"",
								"repeat_data":
								[
									"native",
									[
										"_enter_normal_mode",
										{
											"mode": "mode_insert"
										}
									],
									"mode_insert",
									null
								],
								"sequence": "",
								"xpos": 7
							}
						},
						"translation.x": 87.0,
						"translation.y": 12023.0,
						"zoom_level": 1.0
					},
					"stack_index": 42,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "Lib/promto_search.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 752,
						"regions":
						{
						},
						"selection":
						[
							[
								441,
								441
							]
						],
						"settings":
						{
							"auto_name": "class PromtoSearch{",
							"incomplete_sync": null,
							"sftp_duplicate_views": 0,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": true,
							"vintage":
							{
								"_vintageous_glue_until_normal_mode": true,
								"action": null,
								"action_count": "",
								"capture_register": false,
								"mode": "mode_insert",
								"motion": null,
								"motion_count": "",
								"normal_insert_count": "1",
								"partial_sequence": "",
								"register": "\"",
								"repeat_data":
								[
									"vi",
									"d",
									"mode_normal",
									[
										2,
										2,
										"mode_visual"
									]
								],
								"sequence": "",
								"xpos": 2
							}
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 49,
					"type": "text"
				},
				{
					"buffer": 47,
					"file": "Lib/promto_search_lv.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1590,
						"regions":
						{
						},
						"selection":
						[
							[
								1416,
								1416
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"vintage":
							{
								"_vintageous_glue_until_normal_mode": false,
								"action": null,
								"action_count": "",
								"capture_register": false,
								"mode": "mode_normal",
								"motion": null,
								"motion_count": "",
								"normal_insert_count": "1",
								"partial_sequence": "",
								"register": "\"",
								"repeat_data":
								[
									"native",
									[
										"sequence",
										{
											"commands":
											[
												[
													"_vi_c",
													{
														"count": 1,
														"mode": "mode_internal_normal",
														"motion":
														{
															"motion": "_vi_w",
															"motion_args":
															{
																"count": 1,
																"mode": "mode_internal_normal"
															}
														},
														"register": "\""
													}
												],
												[
													"insert",
													{
														"characters": "list"
													}
												]
											]
										}
									],
									"mode_insert",
									null
								],
								"sequence": "",
								"xpos": 42
							}
						},
						"translation.x": 0.0,
						"translation.y": 739.0,
						"zoom_level": 1.0
					},
					"stack_index": 44,
					"type": "text"
				},
				{
					"buffer": 48,
					"file": "test1.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 251,
						"regions":
						{
						},
						"selection":
						[
							[
								228,
								228
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 48,
					"type": "text"
				},
				{
					"buffer": 49,
					"file": "java/ConvertImage.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1779,
						"regions":
						{
						},
						"selection":
						[
							[
								1396,
								1396
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Java/Java.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 469.0,
						"zoom_level": 1.0
					},
					"stack_index": 52,
					"type": "text"
				},
				{
					"buffer": 43,
					"file": "Lib/promto_json_helper.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1448,
						"regions":
						{
						},
						"selection":
						[
							[
								1249,
								1249
							]
						],
						"settings":
						{
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"vintage":
							{
								"_vintageous_glue_until_normal_mode": true,
								"action": null,
								"action_count": "",
								"capture_register": false,
								"mode": "mode_insert",
								"motion": null,
								"motion_count": "",
								"normal_insert_count": "1",
								"partial_sequence": "",
								"register": "\"",
								"repeat_data":
								[
									"vi",
									"dd",
									"mode_internal_normal",
									null
								],
								"sequence": "",
								"xpos": 12
							}
						},
						"translation.x": 0.0,
						"translation.y": 818.0,
						"zoom_level": 1.0
					},
					"stack_index": 65,
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "Lib/promto_json.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2460,
						"regions":
						{
						},
						"selection":
						[
							[
								1779,
								1779
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"vintage":
							{
								"_vintageous_glue_until_normal_mode": true,
								"action": null,
								"action_count": "",
								"capture_register": false,
								"mode": "mode_insert",
								"motion": null,
								"motion_count": "",
								"normal_insert_count": "1",
								"partial_sequence": "",
								"register": "\"",
								"repeat_data":
								[
									"vi",
									"c",
									"mode_insert",
									[
										0,
										5,
										"mode_visual"
									]
								],
								"sequence": "",
								"xpos": 45
							}
						},
						"translation.x": 0.0,
						"translation.y": 747.0,
						"zoom_level": 1.0
					},
					"stack_index": 62,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "Lib/promto_sql_mariaDB.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24038,
						"regions":
						{
						},
						"selection":
						[
							[
								7619,
								7619
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false,
							"vintage":
							{
								"_vintageous_glue_until_normal_mode": false,
								"action": null,
								"action_count": "",
								"capture_register": false,
								"mode": "mode_normal",
								"motion": null,
								"motion_count": "",
								"normal_insert_count": "1",
								"partial_sequence": "",
								"register": "\"",
								"sequence": "",
								"xpos": 39
							}
						},
						"translation.x": 0.0,
						"translation.y": 5630.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "Lib/promto_sql_mariaDB_log.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1844,
						"regions":
						{
						},
						"selection":
						[
							[
								1331,
								1331
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"sftp_duplicate_views": 0,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 341.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 50,
					"file": "Lib/promto_sql_mariaDB_usuario.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1879,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 51,
					"file": "/C/Users/mcruz/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 132,
						"regions":
						{
						},
						"selection":
						[
							[
								129,
								129
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JSON.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 53,
					"type": "text"
				}
			]
		},
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 32,
					"file": "Lib/promto_sql_mariaDB_log.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1844,
						"regions":
						{
						},
						"selection":
						[
							[
								1596,
								1596
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"sftp_duplicate_views": 0,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 798.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "Lib/promto_sql_mariaDB_tipo.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6621,
						"regions":
						{
						},
						"selection":
						[
							[
								992,
								992
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"sftp_duplicate_views": 0,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "Lib/promto_sql_mariaDB_modelo.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22517,
						"regions":
						{
						},
						"selection":
						[
							[
								19334,
								19334
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"sftp_duplicate_views": 0,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 18.0,
						"translation.y": 12774.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "views/inserir_campos_view.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7957,
						"regions":
						{
						},
						"selection":
						[
							[
								7039,
								7039
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"sftp_duplicate_views": 0,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3502.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "models/generate_feed_model.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 761,
						"regions":
						{
						},
						"selection":
						[
							[
								594,
								594
							]
						],
						"settings":
						{
							"auto_name": "dfdfd",
							"incomplete_sync": null,
							"remote_loading": false,
							"sftp_duplicate_views": 2,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 34.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 52,
					"file": "views/inserir_ETF_view.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3079,
						"regions":
						{
						},
						"selection":
						[
							[
								3030,
								3030
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1478.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 53,
					"file": "views/inserir_modelo_view.ahk",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9301,
						"regions":
						{
						},
						"selection":
						[
							[
								7768,
								7768
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/User/AutoHotKey/AutoHotKey.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4300.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 36.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.871888726208,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": false,
	"output.exec":
	{
		"height": 130.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.sftp":
	{
		"height": 0.0
	},
	"project": "promto.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"update",
				"controllers\\update_controller.ahk"
			],
			[
				"native",
				"Promto(Front-End)(Native).ahk"
			],
			[
				"back_upcontroller",
				"controllers\\back_up_controller.ahk"
			],
			[
				"gitignore",
				".gitignore"
			],
			[
				"",
				"models\\generate_feed_model.ahk"
			],
			[
				"mariadbmodelo",
				"Lib\\promto_sql_mariaDB_modelo.ahk"
			],
			[
				"mariadb",
				"Lib\\promto_sql_mariaDB.ahk"
			],
			[
				"generatefeed",
				"models\\generate_feed_model.ahk"
			],
			[
				"generate_feed_model",
				"models\\generate_feed_model.ahk"
			],
			[
				"inserircampos",
				"views\\inserir_campos_view.ahk"
			],
			[
				"selecionar",
				"views\\selecionar_campo_externo_view.ahk"
			],
			[
				"lin",
				"views\\linkar_campos_view.ahk"
			],
			[
				"ordem",
				"views\\ordem_view.ahk"
			],
			[
				"inserirmodel",
				"views\\inserir_modelo_view.ahk"
			],
			[
				"inseriretf",
				"views\\inserir_ETF_view.ahk"
			],
			[
				"mariadbtipo",
				"Lib\\promto_sql_mariaDB_tipo.ahk"
			],
			[
				"mariadblog",
				"Lib\\promto_sql_mariaDB_log.ahk"
			],
			[
				"promtoli",
				"Lib\\Promtolib.ahk"
			],
			[
				"promtolib",
				"Lib\\Promtolib.ahk"
			],
			[
				"mariadbempresa",
				"Lib\\promto_sql_mariaDB_empresa.ahk"
			],
			[
				"mariadbsubfamilia",
				"Lib\\promto_sql_mariaDB_subfamilia.ahk"
			],
			[
				"mariadbfamilia",
				"Lib\\promto_sql_mariaDB_familia.ahk"
			],
			[
				"mariatipo",
				"Lib\\promto_sql_mariaDB_tipo.ahk"
			],
			[
				"mariadbmodel",
				"Lib\\promto_sql_mariaDB_modelo.ahk"
			],
			[
				"maraidbsubfamilia",
				"Lib\\promto_sql_mariaDB_subfamilia.ahk"
			],
			[
				"mariadbempr",
				"Lib\\promto_sql_mariaDB_empresa.ahk"
			],
			[
				"mariadbusu",
				"Lib\\promto_sql_mariaDB_usuario.ahk"
			],
			[
				"insert_user",
				"views\\insert_user_view.ahk"
			],
			[
				"manager_users_",
				"views\\manager_users_view.ahk"
			],
			[
				"promtofeed",
				"C:\\Users\\mcruz\\Documents\\GitHub\\Promto-Autohotkey\\models\\generate_feed_model.ahk"
			],
			[
				"feed",
				"promto_feed_json.json"
			],
			[
				"pormtojson",
				"promto_JSON.json"
			],
			[
				"promtojson",
				"Lib\\promto_json.ahk"
			],
			[
				"promto_json",
				"Lib\\promto_json.ahk"
			],
			[
				"sublimeproject",
				"promto.sublime-project"
			],
			[
				"promto_jso",
				"Lib\\promto_json.ahk"
			],
			[
				"cert_view",
				"views\\cert_view.ahk"
			],
			[
				"selecionarcampo_externo",
				"views\\selecionar_campo_externo_view.ahk"
			],
			[
				"inserir_imagem_db_view",
				"views\\shared\\inserir_imagem_db_view.ahk"
			],
			[
				"dbex",
				"views\\db_ex_view.ahk"
			],
			[
				"linkar_modelos_view",
				"views\\linkar_modelos_view.ahk"
			],
			[
				"dbexview",
				"views\\db_ex_view.ahk"
			],
			[
				"estruturascontroller",
				"controllers\\estruturas_controller.ahk"
			],
			[
				"estruturaview",
				"views\\estruturas_view.ahk"
			],
			[
				"estruturacontroller",
				"controllers\\estruturas_controller.ahk"
			],
			[
				"db_ex_view",
				"views\\db_ex_view.ahk"
			],
			[
				"inserirdbexview",
				"views\\inserir_db_ex_view.ahk"
			],
			[
				"promtosearchlv",
				"Lib\\promto_search_lv.ahk"
			],
			[
				"db_ex_controller",
				"controllers\\db_ex_controller.ahk"
			],
			[
				"test1",
				"test1.ahk"
			],
			[
				"promto_search_lv",
				"Lib\\promto_search_lv.ahk"
			],
			[
				"promtosearch",
				"Lib\\promto_search.ahk"
			],
			[
				"inserir_valores_controller",
				"controllers\\inserir_valores_controller.ahk"
			],
			[
				"inserir_valores_view",
				"views\\inserir_valores_view.ahk"
			],
			[
				"promtosearclv",
				"Lib\\promto_search_lv.ahk"
			],
			[
				"promtolib.ahk",
				"Lib\\Promtolib.ahk"
			],
			[
				"java",
				"java\\ConvertImage.java"
			],
			[
				"romtolib",
				"doc\\PromtoLib.doc"
			],
			[
				"marid",
				"Lib\\promto_sql_mariaDB.ahk"
			],
			[
				"index.ht",
				"index.html"
			],
			[
				"configdbexview",
				"views\\config_db_ex_view.ahk"
			],
			[
				".html",
				"index.html"
			],
			[
				"jsonhelper",
				"Lib\\promto_json_helper.ahk"
			],
			[
				"jsontest",
				"json-test.ahk"
			],
			[
				"general",
				"Lib\\general_funcs.ahk"
			],
			[
				"json",
				"json-test.ahk"
			],
			[
				"mariadbusbfamilia",
				"Lib\\promto_sql_mariaDB_subfamilia.ahk"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"C:\\Users\\mcruz\\Documents\\GitHub\\promtoWeb\\promtoweb.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
		"_vintageous_last_char_search_command": "vi_big_f",
		"_vintageous_last_character_search": "J",
		"_vintageous_reset_during_init": true,
		"vintage":
		{
			"_cmdline_cd": "C:\\Users\\mcruz\\Downloads\\Jit-2.0.1\\Jit\\Examples\\Spacetree"
		}
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": false,
	"side_bar_visible": false,
	"side_bar_width": 217.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
